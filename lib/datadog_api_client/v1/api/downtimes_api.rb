=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V1
  class DowntimesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel a downtime
    # Cancel a downtime.
    # @param downtime_id [Integer] ID of the downtime to cancel.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_downtime(downtime_id, opts = {})
      cancel_downtime_with_http_info(downtime_id, opts)
      nil
    end

    # Cancel a downtime
    # Cancel a downtime.
    # @param downtime_id [Integer] ID of the downtime to cancel.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_downtime_with_http_info(downtime_id, opts = {})

      if @api_client.config.unstable_operations.has_key?(:cancel_downtime)
        unstable_enabled = @api_client.config.unstable_operations[:cancel_downtime]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "cancel_downtime")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "cancel_downtime"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DowntimesApi.cancel_downtime ...'
      end
      # verify the required parameter 'downtime_id' is set
      if @api_client.config.client_side_validation && downtime_id.nil?
        fail ArgumentError, "Missing the required parameter 'downtime_id' when calling DowntimesApi.cancel_downtime"
      end
      # resource path
      local_var_path = '/api/v1/downtime/{downtime_id}'.sub('{' + 'downtime_id' + '}', CGI.escape(downtime_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"DowntimesApi.cancel_downtime",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DowntimesApi#cancel_downtime\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel downtimes by scope
    # Delete all downtimes that match the scope of `X`.
    # @param body [CancelDowntimesByScopeRequest] Scope to cancel downtimes for.
    # @param [Hash] opts the optional parameters
    # @return [CanceledDowntimesIds]
    def cancel_downtimes_by_scope(body, opts = {})
      data, _status_code, _headers = cancel_downtimes_by_scope_with_http_info(body, opts)
      data
    end

    # Cancel downtimes by scope
    # Delete all downtimes that match the scope of &#x60;X&#x60;.
    # @param body [CancelDowntimesByScopeRequest] Scope to cancel downtimes for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CanceledDowntimesIds, Integer, Hash)>] CanceledDowntimesIds data, response status code and response headers
    def cancel_downtimes_by_scope_with_http_info(body, opts = {})

      if @api_client.config.unstable_operations.has_key?(:cancel_downtimes_by_scope)
        unstable_enabled = @api_client.config.unstable_operations[:cancel_downtimes_by_scope]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "cancel_downtimes_by_scope")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "cancel_downtimes_by_scope"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DowntimesApi.cancel_downtimes_by_scope ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DowntimesApi.cancel_downtimes_by_scope"
      end
      # resource path
      local_var_path = '/api/v1/downtime/cancel/by_scope'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CanceledDowntimesIds'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"DowntimesApi.cancel_downtimes_by_scope",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DowntimesApi#cancel_downtimes_by_scope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Schedule a downtime
    # Schedule a downtime.
    # @param body [Downtime] Schedule a downtime request body.
    # @param [Hash] opts the optional parameters
    # @return [Downtime]
    def create_downtime(body, opts = {})
      data, _status_code, _headers = create_downtime_with_http_info(body, opts)
      data
    end

    # Schedule a downtime
    # Schedule a downtime.
    # @param body [Downtime] Schedule a downtime request body.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Downtime, Integer, Hash)>] Downtime data, response status code and response headers
    def create_downtime_with_http_info(body, opts = {})

      if @api_client.config.unstable_operations.has_key?(:create_downtime)
        unstable_enabled = @api_client.config.unstable_operations[:create_downtime]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "create_downtime")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "create_downtime"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DowntimesApi.create_downtime ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DowntimesApi.create_downtime"
      end
      # resource path
      local_var_path = '/api/v1/downtime'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Downtime'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"DowntimesApi.create_downtime",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DowntimesApi#create_downtime\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a downtime
    # Get downtime detail by `downtime_id`.
    # @param downtime_id [Integer] ID of the downtime to fetch.
    # @param [Hash] opts the optional parameters
    # @return [Downtime]
    def get_downtime(downtime_id, opts = {})
      data, _status_code, _headers = get_downtime_with_http_info(downtime_id, opts)
      data
    end

    # Get a downtime
    # Get downtime detail by &#x60;downtime_id&#x60;.
    # @param downtime_id [Integer] ID of the downtime to fetch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Downtime, Integer, Hash)>] Downtime data, response status code and response headers
    def get_downtime_with_http_info(downtime_id, opts = {})

      if @api_client.config.unstable_operations.has_key?(:get_downtime)
        unstable_enabled = @api_client.config.unstable_operations[:get_downtime]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "get_downtime")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "get_downtime"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DowntimesApi.get_downtime ...'
      end
      # verify the required parameter 'downtime_id' is set
      if @api_client.config.client_side_validation && downtime_id.nil?
        fail ArgumentError, "Missing the required parameter 'downtime_id' when calling DowntimesApi.get_downtime"
      end
      # resource path
      local_var_path = '/api/v1/downtime/{downtime_id}'.sub('{' + 'downtime_id' + '}', CGI.escape(downtime_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Downtime'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"DowntimesApi.get_downtime",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DowntimesApi#get_downtime\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all downtimes
    # Get all scheduled downtimes.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :current_only Only return downtimes that are active when the request is made.
    # @return [Array<Downtime>]
    def list_downtimes(opts = {})
      data, _status_code, _headers = list_downtimes_with_http_info(opts)
      data
    end

    # Get all downtimes
    # Get all scheduled downtimes.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :current_only Only return downtimes that are active when the request is made.
    # @return [Array<(Array<Downtime>, Integer, Hash)>] Array<Downtime> data, response status code and response headers
    def list_downtimes_with_http_info(opts = {})

      if @api_client.config.unstable_operations.has_key?(:list_downtimes)
        unstable_enabled = @api_client.config.unstable_operations[:list_downtimes]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "list_downtimes")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "list_downtimes"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DowntimesApi.list_downtimes ...'
      end
      # resource path
      local_var_path = '/api/v1/downtime'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'current_only'] = opts[:'current_only'] if !opts[:'current_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Downtime>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"DowntimesApi.list_downtimes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DowntimesApi#list_downtimes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a downtime
    # Update a single downtime by `downtime_id`.
    # @param downtime_id [Integer] ID of the downtime to update.
    # @param body [Downtime] Update a downtime request body.
    # @param [Hash] opts the optional parameters
    # @return [Downtime]
    def update_downtime(downtime_id, body, opts = {})
      data, _status_code, _headers = update_downtime_with_http_info(downtime_id, body, opts)
      data
    end

    # Update a downtime
    # Update a single downtime by &#x60;downtime_id&#x60;.
    # @param downtime_id [Integer] ID of the downtime to update.
    # @param body [Downtime] Update a downtime request body.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Downtime, Integer, Hash)>] Downtime data, response status code and response headers
    def update_downtime_with_http_info(downtime_id, body, opts = {})

      if @api_client.config.unstable_operations.has_key?(:update_downtime)
        unstable_enabled = @api_client.config.unstable_operations[:update_downtime]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "update_downtime")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "update_downtime"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DowntimesApi.update_downtime ...'
      end
      # verify the required parameter 'downtime_id' is set
      if @api_client.config.client_side_validation && downtime_id.nil?
        fail ArgumentError, "Missing the required parameter 'downtime_id' when calling DowntimesApi.update_downtime"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DowntimesApi.update_downtime"
      end
      # resource path
      local_var_path = '/api/v1/downtime/{downtime_id}'.sub('{' + 'downtime_id' + '}', CGI.escape(downtime_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Downtime'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"DowntimesApi.update_downtime",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DowntimesApi#update_downtime\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
