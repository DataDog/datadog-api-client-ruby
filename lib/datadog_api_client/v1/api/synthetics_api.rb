=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module DatadogAPIClient::V1
  class SyntheticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a global variable
    # Create a Synthetics global variable.
    # @param body [SyntheticsGlobalVariable] Details of the global variable to create.
    # @param [Hash] opts the optional parameters
    # @return [SyntheticsGlobalVariable]
    def create_global_variable(body, opts = {})
      data, _status_code, _headers = create_global_variable_with_http_info(body, opts)
      data
    end

    # Create a global variable
    # Create a Synthetics global variable.
    # @param body [SyntheticsGlobalVariable] Details of the global variable to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyntheticsGlobalVariable, Integer, Hash)>] SyntheticsGlobalVariable data, response status code and response headers
    def create_global_variable_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.create_global_variable ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SyntheticsApi.create_global_variable"
      end
      # resource path
      local_var_path = '/api/v1/synthetics/variables'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'SyntheticsGlobalVariable' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.create_global_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#create_global_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a test
    # Create a Synthetic test.
    # @param body [SyntheticsTestDetails] Details of the test to create.
    # @param [Hash] opts the optional parameters
    # @return [SyntheticsTestDetails]
    def create_test(body, opts = {})
      data, _status_code, _headers = create_test_with_http_info(body, opts)
      data
    end

    # Create a test
    # Create a Synthetic test.
    # @param body [SyntheticsTestDetails] Details of the test to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyntheticsTestDetails, Integer, Hash)>] SyntheticsTestDetails data, response status code and response headers
    def create_test_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.create_test ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SyntheticsApi.create_test"
      end
      # resource path
      local_var_path = '/api/v1/synthetics/tests'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'SyntheticsTestDetails' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.create_test",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#create_test\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a global variable
    # Delete a Synthetics global variable.
    # @param variable_id [String] The ID of the global variable.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_global_variable(variable_id, opts = {})
      delete_global_variable_with_http_info(variable_id, opts)
      nil
    end

    # Delete a global variable
    # Delete a Synthetics global variable.
    # @param variable_id [String] The ID of the global variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_global_variable_with_http_info(variable_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.delete_global_variable ...'
      end
      # verify the required parameter 'variable_id' is set
      if @api_client.config.client_side_validation && variable_id.nil?
        fail ArgumentError, "Missing the required parameter 'variable_id' when calling SyntheticsApi.delete_global_variable"
      end
      # resource path
      local_var_path = '/api/v1/synthetics/variables/{variable_id}'.sub('{' + 'variable_id' + '}', CGI.escape(variable_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.delete_global_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#delete_global_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete tests
    # Delete multiple Synthetic tests by ID.
    # @param body [SyntheticsDeleteTestsPayload] Public ID list of the Synthetic tests to be deleted.
    # @param [Hash] opts the optional parameters
    # @return [SyntheticsDeleteTestsResponse]
    def delete_tests(body, opts = {})
      data, _status_code, _headers = delete_tests_with_http_info(body, opts)
      data
    end

    # Delete tests
    # Delete multiple Synthetic tests by ID.
    # @param body [SyntheticsDeleteTestsPayload] Public ID list of the Synthetic tests to be deleted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyntheticsDeleteTestsResponse, Integer, Hash)>] SyntheticsDeleteTestsResponse data, response status code and response headers
    def delete_tests_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.delete_tests ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SyntheticsApi.delete_tests"
      end
      # resource path
      local_var_path = '/api/v1/synthetics/tests/delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'SyntheticsDeleteTestsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.delete_tests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#delete_tests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit a global variable
    # Edit a Synthetics global variable.
    # @param variable_id [String] The ID of the global variable.
    # @param body [SyntheticsGlobalVariable] Details of the global variable to update.
    # @param [Hash] opts the optional parameters
    # @return [SyntheticsGlobalVariable]
    def edit_global_variable(variable_id, body, opts = {})
      data, _status_code, _headers = edit_global_variable_with_http_info(variable_id, body, opts)
      data
    end

    # Edit a global variable
    # Edit a Synthetics global variable.
    # @param variable_id [String] The ID of the global variable.
    # @param body [SyntheticsGlobalVariable] Details of the global variable to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyntheticsGlobalVariable, Integer, Hash)>] SyntheticsGlobalVariable data, response status code and response headers
    def edit_global_variable_with_http_info(variable_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.edit_global_variable ...'
      end
      # verify the required parameter 'variable_id' is set
      if @api_client.config.client_side_validation && variable_id.nil?
        fail ArgumentError, "Missing the required parameter 'variable_id' when calling SyntheticsApi.edit_global_variable"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SyntheticsApi.edit_global_variable"
      end
      # resource path
      local_var_path = '/api/v1/synthetics/variables/{variable_id}'.sub('{' + 'variable_id' + '}', CGI.escape(variable_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'SyntheticsGlobalVariable' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.edit_global_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#edit_global_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the test's latest results summaries (API)
    # Get the last 50 test results summaries for a given Synthetics API test.
    # @param public_id [String] The public ID of the test for which to search results for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_ts Timestamp from which to start querying results.
    # @option opts [Integer] :to_ts Timestamp up to which to query results.
    # @option opts [Array<String>] :probe_dc Locations for which to query results.
    # @return [SyntheticsGetAPITestLatestResultsResponse]
    def get_api_test_latest_results(public_id, opts = {})
      data, _status_code, _headers = get_api_test_latest_results_with_http_info(public_id, opts)
      data
    end

    # Get the test&#39;s latest results summaries (API)
    # Get the last 50 test results summaries for a given Synthetics API test.
    # @param public_id [String] The public ID of the test for which to search results for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_ts Timestamp from which to start querying results.
    # @option opts [Integer] :to_ts Timestamp up to which to query results.
    # @option opts [Array<String>] :probe_dc Locations for which to query results.
    # @return [Array<(SyntheticsGetAPITestLatestResultsResponse, Integer, Hash)>] SyntheticsGetAPITestLatestResultsResponse data, response status code and response headers
    def get_api_test_latest_results_with_http_info(public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.get_api_test_latest_results ...'
      end
      # verify the required parameter 'public_id' is set
      if @api_client.config.client_side_validation && public_id.nil?
        fail ArgumentError, "Missing the required parameter 'public_id' when calling SyntheticsApi.get_api_test_latest_results"
      end
      # resource path
      local_var_path = '/api/v1/synthetics/tests/{public_id}/results'.sub('{' + 'public_id' + '}', CGI.escape(public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from_ts'] = opts[:'from_ts'] if !opts[:'from_ts'].nil?
      query_params[:'to_ts'] = opts[:'to_ts'] if !opts[:'to_ts'].nil?
      query_params[:'probe_dc'] = @api_client.build_collection_param(opts[:'probe_dc'], :multi) if !opts[:'probe_dc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SyntheticsGetAPITestLatestResultsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.get_api_test_latest_results",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#get_api_test_latest_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a test result (API)
    # Get a specific full result from a given (API) Synthetic test.
    # @param public_id [String] The public ID of the API test to which the target result belongs.
    # @param result_id [String] The ID of the result to get.
    # @param [Hash] opts the optional parameters
    # @return [SyntheticsAPITestResultFull]
    def get_api_test_result(public_id, result_id, opts = {})
      data, _status_code, _headers = get_api_test_result_with_http_info(public_id, result_id, opts)
      data
    end

    # Get a test result (API)
    # Get a specific full result from a given (API) Synthetic test.
    # @param public_id [String] The public ID of the API test to which the target result belongs.
    # @param result_id [String] The ID of the result to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyntheticsAPITestResultFull, Integer, Hash)>] SyntheticsAPITestResultFull data, response status code and response headers
    def get_api_test_result_with_http_info(public_id, result_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.get_api_test_result ...'
      end
      # verify the required parameter 'public_id' is set
      if @api_client.config.client_side_validation && public_id.nil?
        fail ArgumentError, "Missing the required parameter 'public_id' when calling SyntheticsApi.get_api_test_result"
      end
      # verify the required parameter 'result_id' is set
      if @api_client.config.client_side_validation && result_id.nil?
        fail ArgumentError, "Missing the required parameter 'result_id' when calling SyntheticsApi.get_api_test_result"
      end
      # resource path
      local_var_path = '/api/v1/synthetics/tests/{public_id}/results/{result_id}'.sub('{' + 'public_id' + '}', CGI.escape(public_id.to_s)).sub('{' + 'result_id' + '}', CGI.escape(result_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SyntheticsAPITestResultFull' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.get_api_test_result",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#get_api_test_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a test configuration (browser)
    # Get the detailed configuration (including steps) associated with a Synthetics browser test.
    # @param public_id [String] The public ID of the test to get details from.
    # @param [Hash] opts the optional parameters
    # @return [SyntheticsTestDetails]
    def get_browser_test(public_id, opts = {})
      data, _status_code, _headers = get_browser_test_with_http_info(public_id, opts)
      data
    end

    # Get a test configuration (browser)
    # Get the detailed configuration (including steps) associated with a Synthetics browser test.
    # @param public_id [String] The public ID of the test to get details from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyntheticsTestDetails, Integer, Hash)>] SyntheticsTestDetails data, response status code and response headers
    def get_browser_test_with_http_info(public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.get_browser_test ...'
      end
      # verify the required parameter 'public_id' is set
      if @api_client.config.client_side_validation && public_id.nil?
        fail ArgumentError, "Missing the required parameter 'public_id' when calling SyntheticsApi.get_browser_test"
      end
      # resource path
      local_var_path = '/api/v1/synthetics/tests/browser/{public_id}'.sub('{' + 'public_id' + '}', CGI.escape(public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SyntheticsTestDetails' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.get_browser_test",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#get_browser_test\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the test's latest results summaries (browser)
    # Get the last 50 test results summaries for a given Synthetics Browser test.
    # @param public_id [String] The public ID of the browser test for which to search results for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_ts Timestamp from which to start querying results.
    # @option opts [Integer] :to_ts Timestamp up to which to query results.
    # @option opts [Array<String>] :probe_dc Locations for which to query results.
    # @return [SyntheticsGetBrowserTestLatestResultsResponse]
    def get_browser_test_latest_results(public_id, opts = {})
      data, _status_code, _headers = get_browser_test_latest_results_with_http_info(public_id, opts)
      data
    end

    # Get the test&#39;s latest results summaries (browser)
    # Get the last 50 test results summaries for a given Synthetics Browser test.
    # @param public_id [String] The public ID of the browser test for which to search results for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :from_ts Timestamp from which to start querying results.
    # @option opts [Integer] :to_ts Timestamp up to which to query results.
    # @option opts [Array<String>] :probe_dc Locations for which to query results.
    # @return [Array<(SyntheticsGetBrowserTestLatestResultsResponse, Integer, Hash)>] SyntheticsGetBrowserTestLatestResultsResponse data, response status code and response headers
    def get_browser_test_latest_results_with_http_info(public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.get_browser_test_latest_results ...'
      end
      # verify the required parameter 'public_id' is set
      if @api_client.config.client_side_validation && public_id.nil?
        fail ArgumentError, "Missing the required parameter 'public_id' when calling SyntheticsApi.get_browser_test_latest_results"
      end
      # resource path
      local_var_path = '/api/v1/synthetics/tests/browser/{public_id}/results'.sub('{' + 'public_id' + '}', CGI.escape(public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'from_ts'] = opts[:'from_ts'] if !opts[:'from_ts'].nil?
      query_params[:'to_ts'] = opts[:'to_ts'] if !opts[:'to_ts'].nil?
      query_params[:'probe_dc'] = @api_client.build_collection_param(opts[:'probe_dc'], :multi) if !opts[:'probe_dc'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SyntheticsGetBrowserTestLatestResultsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.get_browser_test_latest_results",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#get_browser_test_latest_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a test result (browser)
    # Get a specific full result from a given (browser) Synthetic test.
    # @param public_id [String] The public ID of the browser test to which the target result belongs.
    # @param result_id [String] The ID of the result to get.
    # @param [Hash] opts the optional parameters
    # @return [SyntheticsBrowserTestResultFull]
    def get_browser_test_result(public_id, result_id, opts = {})
      data, _status_code, _headers = get_browser_test_result_with_http_info(public_id, result_id, opts)
      data
    end

    # Get a test result (browser)
    # Get a specific full result from a given (browser) Synthetic test.
    # @param public_id [String] The public ID of the browser test to which the target result belongs.
    # @param result_id [String] The ID of the result to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyntheticsBrowserTestResultFull, Integer, Hash)>] SyntheticsBrowserTestResultFull data, response status code and response headers
    def get_browser_test_result_with_http_info(public_id, result_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.get_browser_test_result ...'
      end
      # verify the required parameter 'public_id' is set
      if @api_client.config.client_side_validation && public_id.nil?
        fail ArgumentError, "Missing the required parameter 'public_id' when calling SyntheticsApi.get_browser_test_result"
      end
      # verify the required parameter 'result_id' is set
      if @api_client.config.client_side_validation && result_id.nil?
        fail ArgumentError, "Missing the required parameter 'result_id' when calling SyntheticsApi.get_browser_test_result"
      end
      # resource path
      local_var_path = '/api/v1/synthetics/tests/browser/{public_id}/results/{result_id}'.sub('{' + 'public_id' + '}', CGI.escape(public_id.to_s)).sub('{' + 'result_id' + '}', CGI.escape(result_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SyntheticsBrowserTestResultFull' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.get_browser_test_result",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#get_browser_test_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a test configuration (API)
    # Get the detailed configuration associated with a Synthetics test.
    # @param public_id [String] The public ID of the test to get details from.
    # @param [Hash] opts the optional parameters
    # @return [SyntheticsTestDetails]
    def get_test(public_id, opts = {})
      data, _status_code, _headers = get_test_with_http_info(public_id, opts)
      data
    end

    # Get a test configuration (API)
    # Get the detailed configuration associated with a Synthetics test.
    # @param public_id [String] The public ID of the test to get details from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyntheticsTestDetails, Integer, Hash)>] SyntheticsTestDetails data, response status code and response headers
    def get_test_with_http_info(public_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.get_test ...'
      end
      # verify the required parameter 'public_id' is set
      if @api_client.config.client_side_validation && public_id.nil?
        fail ArgumentError, "Missing the required parameter 'public_id' when calling SyntheticsApi.get_test"
      end
      # resource path
      local_var_path = '/api/v1/synthetics/tests/{public_id}'.sub('{' + 'public_id' + '}', CGI.escape(public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SyntheticsTestDetails' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.get_test",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#get_test\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all locations (public and private)
    # Get the list of public and private locations available for Synthetics tests. No arguments required.
    # @param [Hash] opts the optional parameters
    # @return [SyntheticsLocations]
    def list_locations(opts = {})
      data, _status_code, _headers = list_locations_with_http_info(opts)
      data
    end

    # Get all locations (public and private)
    # Get the list of public and private locations available for Synthetics tests. No arguments required.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyntheticsLocations, Integer, Hash)>] SyntheticsLocations data, response status code and response headers
    def list_locations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.list_locations ...'
      end
      # resource path
      local_var_path = '/api/v1/synthetics/locations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SyntheticsLocations' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.list_locations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#list_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of tests
    # Get the list of all Synthetic tests (can be filtered by type).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :check_type API or browser to filter the list by test type, undefined to get the unfiltered list.
    # @return [SyntheticsListTestsResponse]
    def list_tests(opts = {})
      data, _status_code, _headers = list_tests_with_http_info(opts)
      data
    end

    # Get a list of tests
    # Get the list of all Synthetic tests (can be filtered by type).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :check_type API or browser to filter the list by test type, undefined to get the unfiltered list.
    # @return [Array<(SyntheticsListTestsResponse, Integer, Hash)>] SyntheticsListTestsResponse data, response status code and response headers
    def list_tests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.list_tests ...'
      end
      # resource path
      local_var_path = '/api/v1/synthetics/tests'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'check_type'] = opts[:'check_type'] if !opts[:'check_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SyntheticsListTestsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.list_tests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#list_tests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Trigger some Synthetics tests for CI
    # Trigger a set of Synthetics tests for continuous integration
    # @param body [SyntheticsCITestBody] Details of the test to trigger.
    # @param [Hash] opts the optional parameters
    # @return [SyntheticsTriggerCITestsResponse]
    def trigger_ci_tests(body, opts = {})
      data, _status_code, _headers = trigger_ci_tests_with_http_info(body, opts)
      data
    end

    # Trigger some Synthetics tests for CI
    # Trigger a set of Synthetics tests for continuous integration
    # @param body [SyntheticsCITestBody] Details of the test to trigger.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyntheticsTriggerCITestsResponse, Integer, Hash)>] SyntheticsTriggerCITestsResponse data, response status code and response headers
    def trigger_ci_tests_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.trigger_ci_tests ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SyntheticsApi.trigger_ci_tests"
      end
      # resource path
      local_var_path = '/api/v1/synthetics/tests/trigger/ci'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'SyntheticsTriggerCITestsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.trigger_ci_tests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#trigger_ci_tests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit a test
    # Edit the configuration of a Synthetic test.
    # @param public_id [String] The public ID of the test to get details from.
    # @param body [SyntheticsTestDetails] New test details to be saved.
    # @param [Hash] opts the optional parameters
    # @return [SyntheticsTestDetails]
    def update_test(public_id, body, opts = {})
      data, _status_code, _headers = update_test_with_http_info(public_id, body, opts)
      data
    end

    # Edit a test
    # Edit the configuration of a Synthetic test.
    # @param public_id [String] The public ID of the test to get details from.
    # @param body [SyntheticsTestDetails] New test details to be saved.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyntheticsTestDetails, Integer, Hash)>] SyntheticsTestDetails data, response status code and response headers
    def update_test_with_http_info(public_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.update_test ...'
      end
      # verify the required parameter 'public_id' is set
      if @api_client.config.client_side_validation && public_id.nil?
        fail ArgumentError, "Missing the required parameter 'public_id' when calling SyntheticsApi.update_test"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SyntheticsApi.update_test"
      end
      # resource path
      local_var_path = '/api/v1/synthetics/tests/{public_id}'.sub('{' + 'public_id' + '}', CGI.escape(public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'SyntheticsTestDetails' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.update_test",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#update_test\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pause or start a test
    # Pause or start a Synthetics test by changing the status.
    # @param public_id [String] The public ID of the Synthetic test to update.
    # @param body [SyntheticsUpdateTestPauseStatusPayload] Status to set the given Synthetic test to.
    # @param [Hash] opts the optional parameters
    # @return [Boolean]
    def update_test_pause_status(public_id, body, opts = {})
      data, _status_code, _headers = update_test_pause_status_with_http_info(public_id, body, opts)
      data
    end

    # Pause or start a test
    # Pause or start a Synthetics test by changing the status.
    # @param public_id [String] The public ID of the Synthetic test to update.
    # @param body [SyntheticsUpdateTestPauseStatusPayload] Status to set the given Synthetic test to.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Boolean, Integer, Hash)>] Boolean data, response status code and response headers
    def update_test_pause_status_with_http_info(public_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyntheticsApi.update_test_pause_status ...'
      end
      # verify the required parameter 'public_id' is set
      if @api_client.config.client_side_validation && public_id.nil?
        fail ArgumentError, "Missing the required parameter 'public_id' when calling SyntheticsApi.update_test_pause_status"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SyntheticsApi.update_test_pause_status"
      end
      # resource path
      local_var_path = '/api/v1/synthetics/tests/{public_id}/status'.sub('{' + 'public_id' + '}', CGI.escape(public_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'Boolean' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"SyntheticsApi.update_test_pause_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyntheticsApi#update_test_pause_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
