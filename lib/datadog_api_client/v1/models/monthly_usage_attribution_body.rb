=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Usage Summary by tag for a given organization.
  class MonthlyUsageAttributionBody
    include BaseGenericModel

    # Whether the object has unparsed attributes
    # @!visibility private
    attr_accessor :_unparsed

    # Datetime in ISO-8601 format, UTC, precise to month: [YYYY-MM].
    attr_accessor :month

    # The name of the organization.
    attr_accessor :org_name

    # The organization public ID.
    attr_accessor :public_id

    # The source of the usage attribution tag configuration and the selected tags in the format `<source_org_name>:::<selected tag 1>///<selected tag 2>///<selected tag 3>`.
    attr_accessor :tag_config_source

    # Tag keys and values.
    #
    # A `null` value here means that the requested tag breakdown cannot be applied because it does not match the [tags
    # configured for usage attribution](https://docs.datadoghq.com/account_management/billing/usage_attribution/#getting-started).
    # In this scenario the API returns the total usage, not broken down by tags.
    attr_accessor :tags

    # Datetime of the most recent update to the usage values.
    attr_accessor :updated_at

    # Fields in Usage Summary by tag(s).
    attr_accessor :values

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'month' => :'month',
        :'org_name' => :'org_name',
        :'public_id' => :'public_id',
        :'tag_config_source' => :'tag_config_source',
        :'tags' => :'tags',
        :'updated_at' => :'updated_at',
        :'values' => :'values'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'month' => :'Time',
        :'org_name' => :'String',
        :'public_id' => :'String',
        :'tag_config_source' => :'String',
        :'tags' => :'Hash<String, Array<String>>',
        :'updated_at' => :'Time',
        :'values' => :'MonthlyUsageAttributionValues'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::MonthlyUsageAttributionBody` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V1::MonthlyUsageAttributionBody`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'month')
        self.month = attributes[:'month']
      end

      if attributes.key?(:'org_name')
        self.org_name = attributes[:'org_name']
      end

      if attributes.key?(:'public_id')
        self.public_id = attributes[:'public_id']
      end

      if attributes.key?(:'tag_config_source')
        self.tag_config_source = attributes[:'tag_config_source']
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'values')
        self.values = attributes[:'values']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          month == o.month &&
          org_name == o.org_name &&
          public_id == o.public_id &&
          tag_config_source == o.tag_config_source &&
          tags == o.tags &&
          updated_at == o.updated_at &&
          values == o.values
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [month, org_name, public_id, tag_config_source, tags, updated_at, values].hash
    end
  end
end
