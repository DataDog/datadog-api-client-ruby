=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Encapsulates all user choices about how to split a graph.
  class SplitConfig
    include BaseGenericModel

    # Maximum number of graphs to display in the widget.
    attr_reader :limit

    # Controls the order in which graphs appear in the split.
    attr_reader :sort

    # The dimension(s) on which to split the graph
    attr_reader :split_dimensions

    # Manual selection of tags making split graph widget static
    attr_reader :static_splits

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'limit' => :'limit',
        :'sort' => :'sort',
        :'split_dimensions' => :'split_dimensions',
        :'static_splits' => :'static_splits'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'limit' => :'Integer',
        :'sort' => :'SplitSort',
        :'split_dimensions' => :'Array<SplitDimension>',
        :'static_splits' => :'Array<Array<SplitVectorEntryItem>>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::SplitConfig` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'limit')
        self.limit = attributes[:'limit']
      end

      if attributes.key?(:'sort')
        self.sort = attributes[:'sort']
      end

      if attributes.key?(:'split_dimensions')
        if (value = attributes[:'split_dimensions']).is_a?(Array)
          self.split_dimensions = value
        end
      end

      if attributes.key?(:'static_splits')
        if (value = attributes[:'static_splits']).is_a?(Array)
          self.static_splits = value
        end
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @limit.nil?
      return false if @limit > 500
      return false if @limit < 1
      return false if @sort.nil?
      return false if @split_dimensions.nil?
      return false if @split_dimensions.length > 1
      return false if @split_dimensions.length < 1
      return false if !@static_splits.nil? && @static_splits.length > 500
      true
    end

    # Custom attribute writer method with validation
    # @param limit [Object] Object to be assigned
    # @!visibility private
    def limit=(limit)
      if limit.nil?
        fail ArgumentError, 'invalid value for "limit", limit cannot be nil.'
      end
      if limit > 500
        fail ArgumentError, 'invalid value for "limit", must be smaller than or equal to 500.'
      end
      if limit < 1
        fail ArgumentError, 'invalid value for "limit", must be greater than or equal to 1.'
      end
      @limit = limit
    end

    # Custom attribute writer method with validation
    # @param sort [Object] Object to be assigned
    # @!visibility private
    def sort=(sort)
      if sort.nil?
        fail ArgumentError, 'invalid value for "sort", sort cannot be nil.'
      end
      @sort = sort
    end

    # Custom attribute writer method with validation
    # @param split_dimensions [Object] Object to be assigned
    # @!visibility private
    def split_dimensions=(split_dimensions)
      if split_dimensions.nil?
        fail ArgumentError, 'invalid value for "split_dimensions", split_dimensions cannot be nil.'
      end
      if split_dimensions.length > 1
        fail ArgumentError, 'invalid value for "split_dimensions", number of items must be less than or equal to 1.'
      end
      if split_dimensions.length < 1
        fail ArgumentError, 'invalid value for "split_dimensions", number of items must be greater than or equal to 1.'
      end
      @split_dimensions = split_dimensions
    end

    # Custom attribute writer method with validation
    # @param static_splits [Object] Object to be assigned
    # @!visibility private
    def static_splits=(static_splits)
      if !static_splits.nil? && static_splits.length > 500
        fail ArgumentError, 'invalid value for "static_splits", number of items must be less than or equal to 500.'
      end
      @static_splits = static_splits
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          limit == o.limit &&
          sort == o.sort &&
          split_dimensions == o.split_dimensions &&
          static_splits == o.static_splits
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [limit, sort, split_dimensions, static_splits].hash
    end
  end
end
