=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Your Google Cloud Platform Account.
  class GCPAccount
    include BaseGenericModel

    # Whether the object has unparsed attributes
    # @!visibility private
    attr_accessor :_unparsed

    # Should be `https://www.googleapis.com/oauth2/v1/certs`.
    attr_accessor :auth_provider_x509_cert_url

    # Should be `https://accounts.google.com/o/oauth2/auth`.
    attr_accessor :auth_uri

    # Silence monitors for expected GCE instance shutdowns.
    attr_accessor :automute

    # Your email found in your JSON service account key.
    attr_accessor :client_email

    # Your ID found in your JSON service account key.
    attr_accessor :client_id

    # Should be `https://www.googleapis.com/robot/v1/metadata/x509/$CLIENT_EMAIL`
    # where `$CLIENT_EMAIL` is the email found in your JSON service account key.
    attr_accessor :client_x509_cert_url

    # An array of errors.
    attr_accessor :errors

    # Limit the GCE instances that are pulled into Datadog by using tags.
    # Only hosts that match one of the defined tags are imported into Datadog.
    attr_accessor :host_filters

    # Your private key name found in your JSON service account key.
    attr_accessor :private_key

    # Your private key ID found in your JSON service account key.
    attr_accessor :private_key_id

    # Your Google Cloud project ID found in your JSON service account key.
    attr_accessor :project_id

    # Should be `https://accounts.google.com/o/oauth2/token`.
    attr_accessor :token_uri

    # The value for service_account found in your JSON service account key.
    attr_accessor :type

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'auth_provider_x509_cert_url' => :'auth_provider_x509_cert_url',
        :'auth_uri' => :'auth_uri',
        :'automute' => :'automute',
        :'client_email' => :'client_email',
        :'client_id' => :'client_id',
        :'client_x509_cert_url' => :'client_x509_cert_url',
        :'errors' => :'errors',
        :'host_filters' => :'host_filters',
        :'private_key' => :'private_key',
        :'private_key_id' => :'private_key_id',
        :'project_id' => :'project_id',
        :'token_uri' => :'token_uri',
        :'type' => :'type'
      }
    end

    # Returns all the JSON keys this model knows about
    # @!visibility private
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'auth_provider_x509_cert_url' => :'String',
        :'auth_uri' => :'String',
        :'automute' => :'Boolean',
        :'client_email' => :'String',
        :'client_id' => :'String',
        :'client_x509_cert_url' => :'String',
        :'errors' => :'Array<String>',
        :'host_filters' => :'String',
        :'private_key' => :'String',
        :'private_key_id' => :'String',
        :'project_id' => :'String',
        :'token_uri' => :'String',
        :'type' => :'String'
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::GCPAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V1::GCPAccount`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'auth_provider_x509_cert_url')
        self.auth_provider_x509_cert_url = attributes[:'auth_provider_x509_cert_url']
      end

      if attributes.key?(:'auth_uri')
        self.auth_uri = attributes[:'auth_uri']
      end

      if attributes.key?(:'automute')
        self.automute = attributes[:'automute']
      end

      if attributes.key?(:'client_email')
        self.client_email = attributes[:'client_email']
      end

      if attributes.key?(:'client_id')
        self.client_id = attributes[:'client_id']
      end

      if attributes.key?(:'client_x509_cert_url')
        self.client_x509_cert_url = attributes[:'client_x509_cert_url']
      end

      if attributes.key?(:'errors')
        if (value = attributes[:'errors']).is_a?(Array)
          self.errors = value
        end
      end

      if attributes.key?(:'host_filters')
        self.host_filters = attributes[:'host_filters']
      end

      if attributes.key?(:'private_key')
        self.private_key = attributes[:'private_key']
      end

      if attributes.key?(:'private_key_id')
        self.private_key_id = attributes[:'private_key_id']
      end

      if attributes.key?(:'project_id')
        self.project_id = attributes[:'project_id']
      end

      if attributes.key?(:'token_uri')
        self.token_uri = attributes[:'token_uri']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    # @!visibility private
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auth_provider_x509_cert_url == o.auth_provider_x509_cert_url &&
          auth_uri == o.auth_uri &&
          automute == o.automute &&
          client_email == o.client_email &&
          client_id == o.client_id &&
          client_x509_cert_url == o.client_x509_cert_url &&
          errors == o.errors &&
          host_filters == o.host_filters &&
          private_key == o.private_key &&
          private_key_id == o.private_key_id &&
          project_id == o.project_id &&
          token_uri == o.token_uri &&
          type == o.type
    end

    # @see the `==` method
    # @param o [Object] Object to be compared
    # @!visibility private
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [auth_provider_x509_cert_url, auth_uri, automute, client_email, client_id, client_x509_cert_url, errors, host_filters, private_key, private_key_id, project_id, token_uri, type].hash
    end
  end
end
