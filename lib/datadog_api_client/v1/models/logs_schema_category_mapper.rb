=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Use the Schema Category Mapper to categorize log event into enum fields.
  # In the case of OCSF, they can be used to map sibling fields which are composed of an ID and a name.
  # 
  # **Notes**:
  # 
  # - The syntax of the query is the one of Logs Explorer search bar.
  #   The query can be done on any log attribute or tag, whether it is a facet or not.
  #   Wildcards can also be used inside your query.
  # - Categories are executed in order and processing stops at the first match.
  #   Make sure categories are properly ordered in case a log could match multiple queries.
  # - Sibling fields always have a numerical ID field and a human-readable string name.
  # - A fallback section handles cases where the name or ID value matches a specific value.
  #   If the name matches "Other" or the ID matches 99, the value of the sibling name field will be pulled from a source field from the original log.
  class LogsSchemaCategoryMapper
    include BaseGenericModel

    # Array of filters to match or not a log and their
    # corresponding `name` to assign a custom value to the log.
    attr_reader :categories

    # Used to override hardcoded category values with a value pulled from a source attribute on the log.
    attr_accessor :fallback

    # Name of the logs schema category mapper.
    attr_reader :name

    # Name of the target attributes which value is defined by the matching category.
    attr_reader :targets

    # Type of logs schema category mapper.
    attr_reader :type

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'categories' => :'categories',
        :'fallback' => :'fallback',
        :'name' => :'name',
        :'targets' => :'targets',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'categories' => :'Array<LogsSchemaCategoryMapperCategory>',
        :'fallback' => :'LogsSchemaCategoryMapperFallback',
        :'name' => :'String',
        :'targets' => :'LogsSchemaCategoryMapperTargets',
        :'type' => :'LogsSchemaCategoryMapperType'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::LogsSchemaCategoryMapper` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'categories')
        if (value = attributes[:'categories']).is_a?(Array)
          self.categories = value
        end
      end

      if attributes.key?(:'fallback')
        self.fallback = attributes[:'fallback']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'targets')
        self.targets = attributes[:'targets']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @categories.nil?
      return false if @name.nil?
      return false if @targets.nil?
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param categories [Object] Object to be assigned
    # @!visibility private
    def categories=(categories)
      if categories.nil?
        fail ArgumentError, 'invalid value for "categories", categories cannot be nil.'
      end
      @categories = categories
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Custom attribute writer method with validation
    # @param targets [Object] Object to be assigned
    # @!visibility private
    def targets=(targets)
      if targets.nil?
        fail ArgumentError, 'invalid value for "targets", targets cannot be nil.'
      end
      @targets = targets
    end

    # Custom attribute writer method with validation
    # @param type [Object] Object to be assigned
    # @!visibility private
    def type=(type)
      if type.nil?
        fail ArgumentError, 'invalid value for "type", type cannot be nil.'
      end
      @type = type
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          categories == o.categories &&
          fallback == o.fallback &&
          name == o.name &&
          targets == o.targets &&
          type == o.type &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [categories, fallback, name, targets, type, additional_properties].hash
    end
  end
end
