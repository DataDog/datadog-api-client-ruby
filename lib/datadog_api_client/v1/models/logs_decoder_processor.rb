=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # The decoder processor decodes any source attribute containing a
  # base64/base16-encoded UTF-8/ASCII string back to its original value, storing the
  # result in a target attribute.
  class LogsDecoderProcessor
    include BaseGenericModel
    # The encoding used to represent the binary data.
    attr_reader :binary_to_text_encoding
    # The original representation of input string.
    attr_reader :input_representation
    # Whether the processor is enabled.
    attr_accessor :is_enabled
    # Name of the processor.
    attr_accessor :name
    # Name of the log attribute with the encoded data.
    attr_reader :source
    # Name of the log attribute that contains the decoded data.
    attr_reader :target
    # Type of logs decoder processor.
    attr_reader :type

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'binary_to_text_encoding' => :'binary_to_text_encoding',
        :'input_representation' => :'input_representation',
        :'is_enabled' => :'is_enabled',
        :'name' => :'name',
        :'source' => :'source',
        :'target' => :'target',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'binary_to_text_encoding' => :'LogsDecoderProcessorBinaryToTextEncoding',
        :'input_representation' => :'LogsDecoderProcessorInputRepresentation',
        :'is_enabled' => :'Boolean',
        :'name' => :'String',
        :'source' => :'String',
        :'target' => :'String',
        :'type' => :'LogsDecoderProcessorType'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::LogsDecoderProcessor` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'binary_to_text_encoding')
        self.binary_to_text_encoding = attributes[:'binary_to_text_encoding']
      end

      if attributes.key?(:'input_representation')
        self.input_representation = attributes[:'input_representation']
      end

      if attributes.key?(:'is_enabled')
        self.is_enabled = attributes[:'is_enabled']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'target')
        self.target = attributes[:'target']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @binary_to_text_encoding.nil?
      return false if @input_representation.nil?
      return false if @source.nil?
      return false if @target.nil?
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param binary_to_text_encoding [Object] Object to be assigned
    # @!visibility private
    def binary_to_text_encoding=(binary_to_text_encoding)
      if binary_to_text_encoding.nil?
        fail ArgumentError, 'invalid value for "binary_to_text_encoding", binary_to_text_encoding cannot be nil.'
      end
      @binary_to_text_encoding = binary_to_text_encoding
    end

    # Custom attribute writer method with validation
    # @param input_representation [Object] Object to be assigned
    # @!visibility private
    def input_representation=(input_representation)
      if input_representation.nil?
        fail ArgumentError, 'invalid value for "input_representation", input_representation cannot be nil.'
      end
      @input_representation = input_representation
    end

    # Custom attribute writer method with validation
    # @param source [Object] Object to be assigned
    # @!visibility private
    def source=(source)
      if source.nil?
        fail ArgumentError, 'invalid value for "source", source cannot be nil.'
      end
      @source = source
    end

    # Custom attribute writer method with validation
    # @param target [Object] Object to be assigned
    # @!visibility private
    def target=(target)
      if target.nil?
        fail ArgumentError, 'invalid value for "target", target cannot be nil.'
      end
      @target = target
    end

    # Custom attribute writer method with validation
    # @param type [Object] Object to be assigned
    # @!visibility private
    def type=(type)
      if type.nil?
        fail ArgumentError, 'invalid value for "type", type cannot be nil.'
      end
      @type = type
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          binary_to_text_encoding == o.binary_to_text_encoding &&
          input_representation == o.input_representation &&
          is_enabled == o.is_enabled &&
          name == o.name &&
          source == o.source &&
          target == o.target &&
          type == o.type &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [binary_to_text_encoding, input_representation, is_enabled, name, source, target, type, additional_properties].hash
    end
  end
end
