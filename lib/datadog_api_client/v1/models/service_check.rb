=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # An object containing service check and status.
  class ServiceCheck
    include BaseGenericModel

    # The check.
    attr_reader :check

    # The host name correlated with the check.
    attr_reader :host_name

    # Message containing check status.
    attr_accessor :message

    # The status of a service check. Set to `0` for OK, `1` for warning, `2` for critical, and `3` for unknown.
    attr_reader :status

    # Tags related to a check.
    attr_reader :tags

    # Time of check.
    attr_accessor :timestamp

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'check' => :'check',
        :'host_name' => :'host_name',
        :'message' => :'message',
        :'status' => :'status',
        :'tags' => :'tags',
        :'timestamp' => :'timestamp'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'check' => :'String',
        :'host_name' => :'String',
        :'message' => :'String',
        :'status' => :'ServiceCheckStatus',
        :'tags' => :'Array<String>',
        :'timestamp' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::ServiceCheck` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'check')
        self.check = attributes[:'check']
      end

      if attributes.key?(:'host_name')
        self.host_name = attributes[:'host_name']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @check.nil?
      return false if @host_name.nil?
      return false if @status.nil?
      return false if @tags.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param check [Object] Object to be assigned
    # @!visibility private
    def check=(check)
      if check.nil?
        fail ArgumentError, 'invalid value for "check", check cannot be nil.'
      end
      @check = check
    end

    # Custom attribute writer method with validation
    # @param host_name [Object] Object to be assigned
    # @!visibility private
    def host_name=(host_name)
      if host_name.nil?
        fail ArgumentError, 'invalid value for "host_name", host_name cannot be nil.'
      end
      @host_name = host_name
    end

    # Custom attribute writer method with validation
    # @param status [Object] Object to be assigned
    # @!visibility private
    def status=(status)
      if status.nil?
        fail ArgumentError, 'invalid value for "status", status cannot be nil.'
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param tags [Object] Object to be assigned
    # @!visibility private
    def tags=(tags)
      if tags.nil?
        fail ArgumentError, 'invalid value for "tags", tags cannot be nil.'
      end
      @tags = tags
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          check == o.check &&
          host_name == o.host_name &&
          message == o.message &&
          status == o.status &&
          tags == o.tags &&
          timestamp == o.timestamp
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [check, host_name, message, status, tags, timestamp].hash
    end
  end
end
