=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Process query using formulas and functions.
  class FormulaAndFunctionProcessQueryDefinition
    include BaseGenericModel

    # Whether the object has unparsed attributes
    # @!visibility private
    attr_accessor :_unparsed

    # The aggregation methods available for metrics queries.
    attr_accessor :aggregator

    # Data sources that rely on the process backend.
    attr_reader :data_source

    # Whether to normalize the CPU percentages.
    attr_accessor :is_normalized_cpu

    # Number of hits to return.
    attr_accessor :limit

    # Process metric name.
    attr_reader :metric

    # Name of query for use in formulas.
    attr_reader :name

    # Direction of sort.
    attr_accessor :sort

    # An array of tags to filter by.
    attr_accessor :tag_filters

    # Text to use as filter.
    attr_accessor :text_filter

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'aggregator' => :'aggregator',
        :'data_source' => :'data_source',
        :'is_normalized_cpu' => :'is_normalized_cpu',
        :'limit' => :'limit',
        :'metric' => :'metric',
        :'name' => :'name',
        :'sort' => :'sort',
        :'tag_filters' => :'tag_filters',
        :'text_filter' => :'text_filter'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'aggregator' => :'FormulaAndFunctionMetricAggregation',
        :'data_source' => :'FormulaAndFunctionProcessQueryDataSource',
        :'is_normalized_cpu' => :'Boolean',
        :'limit' => :'Integer',
        :'metric' => :'String',
        :'name' => :'String',
        :'sort' => :'QuerySortOrder',
        :'tag_filters' => :'Array<String>',
        :'text_filter' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::FormulaAndFunctionProcessQueryDefinition` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V1::FormulaAndFunctionProcessQueryDefinition`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'aggregator')
        self.aggregator = attributes[:'aggregator']
      end

      if attributes.key?(:'data_source')
        self.data_source = attributes[:'data_source']
      end

      if attributes.key?(:'is_normalized_cpu')
        self.is_normalized_cpu = attributes[:'is_normalized_cpu']
      end

      if attributes.key?(:'limit')
        self.limit = attributes[:'limit']
      end

      if attributes.key?(:'metric')
        self.metric = attributes[:'metric']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'sort')
        self.sort = attributes[:'sort']
      end

      if attributes.key?(:'tag_filters')
        if (value = attributes[:'tag_filters']).is_a?(Array)
          self.tag_filters = value
        end
      end

      if attributes.key?(:'text_filter')
        self.text_filter = attributes[:'text_filter']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @data_source.nil?
      return false if @metric.nil?
      return false if @name.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param data_source [Object] Object to be assigned
    # @!visibility private
    def data_source=(data_source)
      if data_source.nil?
        fail ArgumentError, 'invalid value for "data_source", data_source cannot be nil.'
      end
      @data_source = data_source
    end

    # Custom attribute writer method with validation
    # @param metric [Object] Object to be assigned
    # @!visibility private
    def metric=(metric)
      if metric.nil?
        fail ArgumentError, 'invalid value for "metric", metric cannot be nil.'
      end
      @metric = metric
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aggregator == o.aggregator &&
          data_source == o.data_source &&
          is_normalized_cpu == o.is_normalized_cpu &&
          limit == o.limit &&
          metric == o.metric &&
          name == o.name &&
          sort == o.sort &&
          tag_filters == o.tag_filters &&
          text_filter == o.text_filter
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [aggregator, data_source, is_normalized_cpu, limit, metric, name, sort, tag_filters, text_filter].hash
    end
  end
end
