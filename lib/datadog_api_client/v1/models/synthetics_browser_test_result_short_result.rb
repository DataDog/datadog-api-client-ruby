=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Object with the result of the last browser test run.
  class SyntheticsBrowserTestResultShortResult
    include BaseGenericModel

    # Object describing the device used to perform the Synthetic test.
    attr_accessor :device

    # Length in milliseconds of the browser test run.
    attr_accessor :duration

    # Amount of errors collected for a single browser test run.
    attr_accessor :error_count

    # Amount of browser test steps completed before failing.
    attr_accessor :step_count_completed

    # Total amount of browser test steps.
    attr_accessor :step_count_total

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'device' => :'device',
        :'duration' => :'duration',
        :'error_count' => :'errorCount',
        :'step_count_completed' => :'stepCountCompleted',
        :'step_count_total' => :'stepCountTotal'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'device' => :'SyntheticsDevice',
        :'duration' => :'Float',
        :'error_count' => :'Integer',
        :'step_count_completed' => :'Integer',
        :'step_count_total' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::SyntheticsBrowserTestResultShortResult` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'device')
        self.device = attributes[:'device']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'error_count')
        self.error_count = attributes[:'error_count']
      end

      if attributes.key?(:'step_count_completed')
        self.step_count_completed = attributes[:'step_count_completed']
      end

      if attributes.key?(:'step_count_total')
        self.step_count_total = attributes[:'step_count_total']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          device == o.device &&
          duration == o.duration &&
          error_count == o.error_count &&
          step_count_completed == o.step_count_completed &&
          step_count_total == o.step_count_total
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [device, duration, error_count, step_count_completed, step_count_total].hash
    end
  end
end
