=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Object describing a file to be used as part of the request in the test.
  class SyntheticsTestRequestBodyFile
    include BaseGenericModel

    # Bucket key of the file.
    attr_accessor :bucket_key

    # Content of the file.
    attr_reader :content

    # Name of the file.
    attr_reader :name

    # Original name of the file.
    attr_reader :original_file_name

    # Size of the file.
    attr_reader :size

    # Type of the file.
    attr_reader :type

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'bucket_key' => :'bucketKey',
        :'content' => :'content',
        :'name' => :'name',
        :'original_file_name' => :'originalFileName',
        :'size' => :'size',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'bucket_key' => :'String',
        :'content' => :'String',
        :'name' => :'String',
        :'original_file_name' => :'String',
        :'size' => :'Integer',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::SyntheticsTestRequestBodyFile` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'bucket_key')
        self.bucket_key = attributes[:'bucket_key']
      end

      if attributes.key?(:'content')
        self.content = attributes[:'content']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'original_file_name')
        self.original_file_name = attributes[:'original_file_name']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if !@content.nil? && @content.to_s.length > 3145728
      return false if !@name.nil? && @name.to_s.length > 1500
      return false if !@original_file_name.nil? && @original_file_name.to_s.length > 1500
      return false if !@size.nil? && @size > 3145728
      return false if !@size.nil? && @size < 1
      return false if !@type.nil? && @type.to_s.length > 1500
      true
    end

    # Custom attribute writer method with validation
    # @param content [Object] Object to be assigned
    # @!visibility private
    def content=(content)
      if !content.nil? && content.to_s.length > 3145728
        fail ArgumentError, 'invalid value for "content", the character length must be smaller than or equal to 3145728.'
      end
      @content = content
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if !name.nil? && name.to_s.length > 1500
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 1500.'
      end
      @name = name
    end

    # Custom attribute writer method with validation
    # @param original_file_name [Object] Object to be assigned
    # @!visibility private
    def original_file_name=(original_file_name)
      if !original_file_name.nil? && original_file_name.to_s.length > 1500
        fail ArgumentError, 'invalid value for "original_file_name", the character length must be smaller than or equal to 1500.'
      end
      @original_file_name = original_file_name
    end

    # Custom attribute writer method with validation
    # @param size [Object] Object to be assigned
    # @!visibility private
    def size=(size)
      if !size.nil? && size > 3145728
        fail ArgumentError, 'invalid value for "size", must be smaller than or equal to 3145728.'
      end
      if !size.nil? && size < 1
        fail ArgumentError, 'invalid value for "size", must be greater than or equal to 1.'
      end
      @size = size
    end

    # Custom attribute writer method with validation
    # @param type [Object] Object to be assigned
    # @!visibility private
    def type=(type)
      if !type.nil? && type.to_s.length > 1500
        fail ArgumentError, 'invalid value for "type", the character length must be smaller than or equal to 1500.'
      end
      @type = type
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bucket_key == o.bucket_key &&
          content == o.content &&
          name == o.name &&
          original_file_name == o.original_file_name &&
          size == o.size &&
          type == o.type
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [bucket_key, content, name, original_file_name, size, type].hash
    end
  end
end
