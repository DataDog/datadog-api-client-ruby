=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Datadog-Azure integrations configured for your organization.
  class AzureAccount
    include BaseGenericModel

    # Limit the Azure app service plans that are pulled into Datadog using tags.
    # Only app service plans that match one of the defined tags are imported into Datadog.
    attr_accessor :app_service_plan_filters

    # Silence monitors for expected Azure VM shutdowns.
    attr_accessor :automute

    # Your Azure web application ID.
    attr_accessor :client_id

    # Your Azure web application secret key.
    attr_accessor :client_secret

    # Enable Cloud Security Management Misconfigurations for your organization.
    attr_accessor :cspm_enabled

    # Enable custom metrics for your organization.
    attr_accessor :custom_metrics_enabled

    # Errors in your configuration.
    attr_accessor :errors

    # Limit the Azure instances that are pulled into Datadog by using tags.
    # Only hosts that match one of the defined tags are imported into Datadog.
    attr_accessor :host_filters

    # Your New Azure web application ID.
    attr_accessor :new_client_id

    # Your New Azure Active Directory ID.
    attr_accessor :new_tenant_name

    # Your Azure Active Directory ID.
    attr_accessor :tenant_name

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'app_service_plan_filters' => :'app_service_plan_filters',
        :'automute' => :'automute',
        :'client_id' => :'client_id',
        :'client_secret' => :'client_secret',
        :'cspm_enabled' => :'cspm_enabled',
        :'custom_metrics_enabled' => :'custom_metrics_enabled',
        :'errors' => :'errors',
        :'host_filters' => :'host_filters',
        :'new_client_id' => :'new_client_id',
        :'new_tenant_name' => :'new_tenant_name',
        :'tenant_name' => :'tenant_name'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'app_service_plan_filters' => :'String',
        :'automute' => :'Boolean',
        :'client_id' => :'String',
        :'client_secret' => :'String',
        :'cspm_enabled' => :'Boolean',
        :'custom_metrics_enabled' => :'Boolean',
        :'errors' => :'Array<String>',
        :'host_filters' => :'String',
        :'new_client_id' => :'String',
        :'new_tenant_name' => :'String',
        :'tenant_name' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::AzureAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V1::AzureAccount`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'app_service_plan_filters')
        self.app_service_plan_filters = attributes[:'app_service_plan_filters']
      end

      if attributes.key?(:'automute')
        self.automute = attributes[:'automute']
      end

      if attributes.key?(:'client_id')
        self.client_id = attributes[:'client_id']
      end

      if attributes.key?(:'client_secret')
        self.client_secret = attributes[:'client_secret']
      end

      if attributes.key?(:'cspm_enabled')
        self.cspm_enabled = attributes[:'cspm_enabled']
      end

      if attributes.key?(:'custom_metrics_enabled')
        self.custom_metrics_enabled = attributes[:'custom_metrics_enabled']
      end

      if attributes.key?(:'errors')
        if (value = attributes[:'errors']).is_a?(Array)
          self.errors = value
        end
      end

      if attributes.key?(:'host_filters')
        self.host_filters = attributes[:'host_filters']
      end

      if attributes.key?(:'new_client_id')
        self.new_client_id = attributes[:'new_client_id']
      end

      if attributes.key?(:'new_tenant_name')
        self.new_tenant_name = attributes[:'new_tenant_name']
      end

      if attributes.key?(:'tenant_name')
        self.tenant_name = attributes[:'tenant_name']
      end
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          app_service_plan_filters == o.app_service_plan_filters &&
          automute == o.automute &&
          client_id == o.client_id &&
          client_secret == o.client_secret &&
          cspm_enabled == o.cspm_enabled &&
          custom_metrics_enabled == o.custom_metrics_enabled &&
          errors == o.errors &&
          host_filters == o.host_filters &&
          new_client_id == o.new_client_id &&
          new_tenant_name == o.new_tenant_name &&
          tenant_name == o.tenant_name
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [app_service_plan_filters, automute, client_id, client_secret, cspm_enabled, custom_metrics_enabled, errors, host_filters, new_client_id, new_tenant_name, tenant_name].hash
    end
  end
end
