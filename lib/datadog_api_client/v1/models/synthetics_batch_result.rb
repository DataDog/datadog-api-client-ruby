=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Object with the results of a Synthetic batch.
  class SyntheticsBatchResult
    include BaseGenericModel

    # The device ID.
    attr_accessor :device

    # Total duration in millisecond of the test.
    attr_accessor :duration

    # Execution rule for a Synthetic test.
    attr_accessor :execution_rule

    # Name of the location.
    attr_accessor :location

    # The ID of the result to get.
    attr_accessor :result_id

    # Number of times this result has been retried.
    attr_accessor :retries

    # Determines whether or not the batch has passed, failed, or is in progress.
    attr_accessor :status

    # Name of the test.
    attr_accessor :test_name

    # The public ID of the Synthetic test.
    attr_accessor :test_public_id

    # Type of the Synthetic test, either `api` or `browser`.
    attr_accessor :test_type

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'device' => :'device',
        :'duration' => :'duration',
        :'execution_rule' => :'execution_rule',
        :'location' => :'location',
        :'result_id' => :'result_id',
        :'retries' => :'retries',
        :'status' => :'status',
        :'test_name' => :'test_name',
        :'test_public_id' => :'test_public_id',
        :'test_type' => :'test_type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'device' => :'SyntheticsDeviceID',
        :'duration' => :'Float',
        :'execution_rule' => :'SyntheticsTestExecutionRule',
        :'location' => :'String',
        :'result_id' => :'String',
        :'retries' => :'Float',
        :'status' => :'SyntheticsStatus',
        :'test_name' => :'String',
        :'test_public_id' => :'String',
        :'test_type' => :'SyntheticsTestDetailsType'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::SyntheticsBatchResult` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'device')
        self.device = attributes[:'device']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'execution_rule')
        self.execution_rule = attributes[:'execution_rule']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'result_id')
        self.result_id = attributes[:'result_id']
      end

      if attributes.key?(:'retries')
        self.retries = attributes[:'retries']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'test_name')
        self.test_name = attributes[:'test_name']
      end

      if attributes.key?(:'test_public_id')
        self.test_public_id = attributes[:'test_public_id']
      end

      if attributes.key?(:'test_type')
        self.test_type = attributes[:'test_type']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          device == o.device &&
          duration == o.duration &&
          execution_rule == o.execution_rule &&
          location == o.location &&
          result_id == o.result_id &&
          retries == o.retries &&
          status == o.status &&
          test_name == o.test_name &&
          test_public_id == o.test_public_id &&
          test_type == o.test_type
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [device, duration, execution_rule, location, result_id, retries, status, test_name, test_public_id, test_type].hash
    end
  end
end
