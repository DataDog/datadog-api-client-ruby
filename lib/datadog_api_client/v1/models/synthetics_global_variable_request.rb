=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Details of the global variable to create.
  class SyntheticsGlobalVariableRequest
    include BaseGenericModel

    # Attributes of the global variable.
    attr_accessor :attributes

    # Description of the global variable.
    attr_reader :description

    # Unique identifier of the global variable.
    attr_accessor :id

    # Determines if the global variable is a FIDO variable.
    attr_accessor :is_fido

    # Determines if the global variable is a TOTP/MFA variable.
    attr_accessor :is_totp

    # Name of the global variable. Unique across Synthetic global variables.
    attr_reader :name

    # Parser options to use for retrieving a Synthetic global variable from a Synthetic test. Used in conjunction with `parse_test_public_id`.
    attr_accessor :parse_test_options

    # A Synthetic test ID to use as a test to generate the variable value.
    attr_accessor :parse_test_public_id

    # Tags of the global variable.
    attr_reader :tags

    # Value of the global variable.
    attr_accessor :value

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'attributes' => :'attributes',
        :'description' => :'description',
        :'id' => :'id',
        :'is_fido' => :'is_fido',
        :'is_totp' => :'is_totp',
        :'name' => :'name',
        :'parse_test_options' => :'parse_test_options',
        :'parse_test_public_id' => :'parse_test_public_id',
        :'tags' => :'tags',
        :'value' => :'value'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'attributes' => :'SyntheticsGlobalVariableAttributes',
        :'description' => :'String',
        :'id' => :'String',
        :'is_fido' => :'Boolean',
        :'is_totp' => :'Boolean',
        :'name' => :'String',
        :'parse_test_options' => :'SyntheticsGlobalVariableParseTestOptions',
        :'parse_test_public_id' => :'String',
        :'tags' => :'Array<String>',
        :'value' => :'SyntheticsGlobalVariableValue'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::SyntheticsGlobalVariableRequest` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'attributes')
        self.attributes = attributes[:'attributes']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'is_fido')
        self.is_fido = attributes[:'is_fido']
      end

      if attributes.key?(:'is_totp')
        self.is_totp = attributes[:'is_totp']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'parse_test_options')
        self.parse_test_options = attributes[:'parse_test_options']
      end

      if attributes.key?(:'parse_test_public_id')
        self.parse_test_public_id = attributes[:'parse_test_public_id']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @description.nil?
      return false if @name.nil?
      return false if @tags.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param description [Object] Object to be assigned
    # @!visibility private
    def description=(description)
      if description.nil?
        fail ArgumentError, 'invalid value for "description", description cannot be nil.'
      end
      @description = description
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Custom attribute writer method with validation
    # @param tags [Object] Object to be assigned
    # @!visibility private
    def tags=(tags)
      if tags.nil?
        fail ArgumentError, 'invalid value for "tags", tags cannot be nil.'
      end
      @tags = tags
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          attributes == o.attributes &&
          description == o.description &&
          id == o.id &&
          is_fido == o.is_fido &&
          is_totp == o.is_totp &&
          name == o.name &&
          parse_test_options == o.parse_test_options &&
          parse_test_public_id == o.parse_test_public_id &&
          tags == o.tags &&
          value == o.value
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [attributes, description, id, is_fido, is_totp, name, parse_test_options, parse_test_public_id, tags, value].hash
    end
  end
end
