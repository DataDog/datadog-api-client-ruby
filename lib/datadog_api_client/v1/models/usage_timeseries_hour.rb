=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # The hourly usage of timeseries.
  class UsageTimeseriesHour
    include BaseGenericModel

    # Whether the object has unparsed attributes
    # @!visibility private
    attr_accessor :_unparsed

    # The hour for the usage.
    attr_accessor :hour

    # Contains the number of custom metrics that are inputs for aggregations (metric configured is custom).
    attr_accessor :num_custom_input_timeseries

    # Contains the number of custom metrics that are outputs for aggregations (metric configured is custom).
    attr_accessor :num_custom_output_timeseries

    # Contains sum of non-aggregation custom metrics and custom metrics that are outputs for aggregations.
    attr_accessor :num_custom_timeseries

    # The organization name.
    attr_accessor :org_name

    # The organization public ID.
    attr_accessor :public_id

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'hour' => :'hour',
        :'num_custom_input_timeseries' => :'num_custom_input_timeseries',
        :'num_custom_output_timeseries' => :'num_custom_output_timeseries',
        :'num_custom_timeseries' => :'num_custom_timeseries',
        :'org_name' => :'org_name',
        :'public_id' => :'public_id'
      }
    end

    # Returns all the JSON keys this model knows about
    # @!visibility private
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'hour' => :'Time',
        :'num_custom_input_timeseries' => :'Integer',
        :'num_custom_output_timeseries' => :'Integer',
        :'num_custom_timeseries' => :'Integer',
        :'org_name' => :'String',
        :'public_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::UsageTimeseriesHour` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V1::UsageTimeseriesHour`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'hour')
        self.hour = attributes[:'hour']
      end

      if attributes.key?(:'num_custom_input_timeseries')
        self.num_custom_input_timeseries = attributes[:'num_custom_input_timeseries']
      end

      if attributes.key?(:'num_custom_output_timeseries')
        self.num_custom_output_timeseries = attributes[:'num_custom_output_timeseries']
      end

      if attributes.key?(:'num_custom_timeseries')
        self.num_custom_timeseries = attributes[:'num_custom_timeseries']
      end

      if attributes.key?(:'org_name')
        self.org_name = attributes[:'org_name']
      end

      if attributes.key?(:'public_id')
        self.public_id = attributes[:'public_id']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          hour == o.hour &&
          num_custom_input_timeseries == o.num_custom_input_timeseries &&
          num_custom_output_timeseries == o.num_custom_output_timeseries &&
          num_custom_timeseries == o.num_custom_timeseries &&
          org_name == o.org_name &&
          public_id == o.public_id
    end

    # @see the `==` method
    # @param o [Object] Object to be compared
    # @!visibility private
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [hour, num_custom_input_timeseries, num_custom_output_timeseries, num_custom_timeseries, org_name, public_id].hash
    end
  end
end
