=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # The powerpack widget allows you to keep similar graphs together on your timeboard. Each group has a custom header, can hold one to many graphs, and is collapsible.
  class PowerpackWidgetDefinition
    include BaseGenericModel

    # Background color of the powerpack title.
    attr_accessor :background_color

    # URL of image to display as a banner for the powerpack.
    attr_accessor :banner_img

    # UUID of the associated powerpack.
    attr_reader :powerpack_id

    # Whether to show the title or not.
    attr_accessor :show_title

    # Powerpack template variables.
    attr_accessor :template_variables

    # Title of the widget.
    attr_accessor :title

    # Type of the powerpack widget.
    attr_reader :type

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'background_color' => :'background_color',
        :'banner_img' => :'banner_img',
        :'powerpack_id' => :'powerpack_id',
        :'show_title' => :'show_title',
        :'template_variables' => :'template_variables',
        :'title' => :'title',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'background_color' => :'String',
        :'banner_img' => :'String',
        :'powerpack_id' => :'String',
        :'show_title' => :'Boolean',
        :'template_variables' => :'PowerpackTemplateVariables',
        :'title' => :'String',
        :'type' => :'PowerpackWidgetDefinitionType'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::PowerpackWidgetDefinition` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'background_color')
        self.background_color = attributes[:'background_color']
      end

      if attributes.key?(:'banner_img')
        self.banner_img = attributes[:'banner_img']
      end

      if attributes.key?(:'powerpack_id')
        self.powerpack_id = attributes[:'powerpack_id']
      end

      if attributes.key?(:'show_title')
        self.show_title = attributes[:'show_title']
      end

      if attributes.key?(:'template_variables')
        self.template_variables = attributes[:'template_variables']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @powerpack_id.nil?
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param powerpack_id [Object] Object to be assigned
    # @!visibility private
    def powerpack_id=(powerpack_id)
      if powerpack_id.nil?
        fail ArgumentError, 'invalid value for "powerpack_id", powerpack_id cannot be nil.'
      end
      @powerpack_id = powerpack_id
    end

    # Custom attribute writer method with validation
    # @param type [Object] Object to be assigned
    # @!visibility private
    def type=(type)
      if type.nil?
        fail ArgumentError, 'invalid value for "type", type cannot be nil.'
      end
      @type = type
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          background_color == o.background_color &&
          banner_img == o.banner_img &&
          powerpack_id == o.powerpack_id &&
          show_title == o.show_title &&
          template_variables == o.template_variables &&
          title == o.title &&
          type == o.type
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [background_color, banner_img, powerpack_id, show_title, template_variables, title, type].hash
    end
  end
end
