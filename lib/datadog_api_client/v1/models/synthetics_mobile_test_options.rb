=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Object describing the extra options for a Synthetic test.
  class SyntheticsMobileTestOptions
    include BaseGenericModel

    # A boolean to set if an application crash would mark the test as failed.
    attr_accessor :allow_application_crash

    # Array of bindings used for the mobile test.
    attr_accessor :bindings

    # CI/CD options for a Synthetic test.
    attr_accessor :ci

    # The default timeout for steps in the test (in seconds).
    attr_reader :default_step_timeout

    # For mobile test, array with the different device IDs used to run the test.
    attr_reader :device_ids

    # A boolean to disable auto accepting alerts.
    attr_accessor :disable_auto_accept_alert

    # Minimum amount of time in failure required to trigger an alert.
    attr_reader :min_failure_duration

    # Mobile application for mobile synthetics test.
    attr_reader :mobile_application

    # The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
    attr_accessor :monitor_name

    # Object containing the options for a Synthetic test as a monitor
    # (for example, renotification).
    attr_accessor :monitor_options

    # Integer from 1 (high) to 5 (low) indicating alert severity.
    attr_reader :monitor_priority

    # A boolean set to not take a screenshot for the step.
    attr_accessor :no_screenshot

    # A list of role identifiers that can be pulled from the Roles API, for restricting read and write access.
    attr_accessor :restricted_roles

    # Object describing the retry strategy to apply to a Synthetic test.
    attr_accessor :_retry

    # Object containing timeframes and timezone used for advanced scheduling.
    attr_accessor :scheduling

    # The frequency at which to run the Synthetic test (in seconds).
    attr_reader :tick_every

    # The level of verbosity for the mobile test.
    attr_reader :verbosity

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'allow_application_crash' => :'allowApplicationCrash',
        :'bindings' => :'bindings',
        :'ci' => :'ci',
        :'default_step_timeout' => :'defaultStepTimeout',
        :'device_ids' => :'device_ids',
        :'disable_auto_accept_alert' => :'disableAutoAcceptAlert',
        :'min_failure_duration' => :'min_failure_duration',
        :'mobile_application' => :'mobileApplication',
        :'monitor_name' => :'monitor_name',
        :'monitor_options' => :'monitor_options',
        :'monitor_priority' => :'monitor_priority',
        :'no_screenshot' => :'noScreenshot',
        :'restricted_roles' => :'restricted_roles',
        :'_retry' => :'retry',
        :'scheduling' => :'scheduling',
        :'tick_every' => :'tick_every',
        :'verbosity' => :'verbosity'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'allow_application_crash' => :'Boolean',
        :'bindings' => :'Array<SyntheticsTestRestrictionPolicyBinding>',
        :'ci' => :'SyntheticsTestCiOptions',
        :'default_step_timeout' => :'Integer',
        :'device_ids' => :'Array<String>',
        :'disable_auto_accept_alert' => :'Boolean',
        :'min_failure_duration' => :'Integer',
        :'mobile_application' => :'SyntheticsMobileTestsMobileApplication',
        :'monitor_name' => :'String',
        :'monitor_options' => :'SyntheticsTestOptionsMonitorOptions',
        :'monitor_priority' => :'Integer',
        :'no_screenshot' => :'Boolean',
        :'restricted_roles' => :'Array<String>',
        :'_retry' => :'SyntheticsTestOptionsRetry',
        :'scheduling' => :'SyntheticsTestOptionsScheduling',
        :'tick_every' => :'Integer',
        :'verbosity' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::SyntheticsMobileTestOptions` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'allow_application_crash')
        self.allow_application_crash = attributes[:'allow_application_crash']
      end

      if attributes.key?(:'bindings')
        if (value = attributes[:'bindings']).is_a?(Array)
          self.bindings = value
        end
      end

      if attributes.key?(:'ci')
        self.ci = attributes[:'ci']
      end

      if attributes.key?(:'default_step_timeout')
        self.default_step_timeout = attributes[:'default_step_timeout']
      end

      if attributes.key?(:'device_ids')
        if (value = attributes[:'device_ids']).is_a?(Array)
          self.device_ids = value
        end
      end

      if attributes.key?(:'disable_auto_accept_alert')
        self.disable_auto_accept_alert = attributes[:'disable_auto_accept_alert']
      end

      if attributes.key?(:'min_failure_duration')
        self.min_failure_duration = attributes[:'min_failure_duration']
      end

      if attributes.key?(:'mobile_application')
        self.mobile_application = attributes[:'mobile_application']
      end

      if attributes.key?(:'monitor_name')
        self.monitor_name = attributes[:'monitor_name']
      end

      if attributes.key?(:'monitor_options')
        self.monitor_options = attributes[:'monitor_options']
      end

      if attributes.key?(:'monitor_priority')
        self.monitor_priority = attributes[:'monitor_priority']
      end

      if attributes.key?(:'no_screenshot')
        self.no_screenshot = attributes[:'no_screenshot']
      end

      if attributes.key?(:'restricted_roles')
        if (value = attributes[:'restricted_roles']).is_a?(Array)
          self.restricted_roles = value
        end
      end

      if attributes.key?(:'_retry')
        self._retry = attributes[:'_retry']
      end

      if attributes.key?(:'scheduling')
        self.scheduling = attributes[:'scheduling']
      end

      if attributes.key?(:'tick_every')
        self.tick_every = attributes[:'tick_every']
      end

      if attributes.key?(:'verbosity')
        self.verbosity = attributes[:'verbosity']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if !@default_step_timeout.nil? && @default_step_timeout > 300
      return false if !@default_step_timeout.nil? && @default_step_timeout < 1
      return false if @device_ids.nil?
      return false if !@min_failure_duration.nil? && @min_failure_duration > 7200
      return false if !@min_failure_duration.nil? && @min_failure_duration < 0
      return false if @mobile_application.nil?
      return false if !@monitor_priority.nil? && @monitor_priority > 5
      return false if !@monitor_priority.nil? && @monitor_priority < 1
      return false if @tick_every.nil?
      return false if @tick_every > 604800
      return false if @tick_every < 300
      return false if !@verbosity.nil? && @verbosity > 5
      return false if !@verbosity.nil? && @verbosity < 0
      true
    end

    # Custom attribute writer method with validation
    # @param default_step_timeout [Object] Object to be assigned
    # @!visibility private
    def default_step_timeout=(default_step_timeout)
      if !default_step_timeout.nil? && default_step_timeout > 300
        fail ArgumentError, 'invalid value for "default_step_timeout", must be smaller than or equal to 300.'
      end
      if !default_step_timeout.nil? && default_step_timeout < 1
        fail ArgumentError, 'invalid value for "default_step_timeout", must be greater than or equal to 1.'
      end
      @default_step_timeout = default_step_timeout
    end

    # Custom attribute writer method with validation
    # @param device_ids [Object] Object to be assigned
    # @!visibility private
    def device_ids=(device_ids)
      if device_ids.nil?
        fail ArgumentError, 'invalid value for "device_ids", device_ids cannot be nil.'
      end
      @device_ids = device_ids
    end

    # Custom attribute writer method with validation
    # @param min_failure_duration [Object] Object to be assigned
    # @!visibility private
    def min_failure_duration=(min_failure_duration)
      if !min_failure_duration.nil? && min_failure_duration > 7200
        fail ArgumentError, 'invalid value for "min_failure_duration", must be smaller than or equal to 7200.'
      end
      if !min_failure_duration.nil? && min_failure_duration < 0
        fail ArgumentError, 'invalid value for "min_failure_duration", must be greater than or equal to 0.'
      end
      @min_failure_duration = min_failure_duration
    end

    # Custom attribute writer method with validation
    # @param mobile_application [Object] Object to be assigned
    # @!visibility private
    def mobile_application=(mobile_application)
      if mobile_application.nil?
        fail ArgumentError, 'invalid value for "mobile_application", mobile_application cannot be nil.'
      end
      @mobile_application = mobile_application
    end

    # Custom attribute writer method with validation
    # @param monitor_priority [Object] Object to be assigned
    # @!visibility private
    def monitor_priority=(monitor_priority)
      if !monitor_priority.nil? && monitor_priority > 5
        fail ArgumentError, 'invalid value for "monitor_priority", must be smaller than or equal to 5.'
      end
      if !monitor_priority.nil? && monitor_priority < 1
        fail ArgumentError, 'invalid value for "monitor_priority", must be greater than or equal to 1.'
      end
      @monitor_priority = monitor_priority
    end

    # Custom attribute writer method with validation
    # @param tick_every [Object] Object to be assigned
    # @!visibility private
    def tick_every=(tick_every)
      if tick_every.nil?
        fail ArgumentError, 'invalid value for "tick_every", tick_every cannot be nil.'
      end
      if tick_every > 604800
        fail ArgumentError, 'invalid value for "tick_every", must be smaller than or equal to 604800.'
      end
      if tick_every < 300
        fail ArgumentError, 'invalid value for "tick_every", must be greater than or equal to 300.'
      end
      @tick_every = tick_every
    end

    # Custom attribute writer method with validation
    # @param verbosity [Object] Object to be assigned
    # @!visibility private
    def verbosity=(verbosity)
      if !verbosity.nil? && verbosity > 5
        fail ArgumentError, 'invalid value for "verbosity", must be smaller than or equal to 5.'
      end
      if !verbosity.nil? && verbosity < 0
        fail ArgumentError, 'invalid value for "verbosity", must be greater than or equal to 0.'
      end
      @verbosity = verbosity
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allow_application_crash == o.allow_application_crash &&
          bindings == o.bindings &&
          ci == o.ci &&
          default_step_timeout == o.default_step_timeout &&
          device_ids == o.device_ids &&
          disable_auto_accept_alert == o.disable_auto_accept_alert &&
          min_failure_duration == o.min_failure_duration &&
          mobile_application == o.mobile_application &&
          monitor_name == o.monitor_name &&
          monitor_options == o.monitor_options &&
          monitor_priority == o.monitor_priority &&
          no_screenshot == o.no_screenshot &&
          restricted_roles == o.restricted_roles &&
          _retry == o._retry &&
          scheduling == o.scheduling &&
          tick_every == o.tick_every &&
          verbosity == o.verbosity
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [allow_application_crash, bindings, ci, default_step_timeout, device_ids, disable_auto_accept_alert, min_failure_duration, mobile_application, monitor_name, monitor_options, monitor_priority, no_screenshot, restricted_roles, _retry, scheduling, tick_every, verbosity].hash
    end
  end
end
