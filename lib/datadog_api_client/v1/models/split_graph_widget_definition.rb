=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # The split graph widget allows you to create repeating units of a graph - one for each value in a group (for example: one per service)
  class SplitGraphWidgetDefinition
    include BaseGenericModel

    # Normalize y axes across graphs
    attr_accessor :has_uniform_y_axes

    # Size of the individual graphs in the split.
    attr_reader :size

    # The original widget we are splitting on.
    attr_reader :source_widget_definition

    # Encapsulates all user choices about how to split a graph.
    attr_reader :split_config

    # Time setting for the widget.
    attr_accessor :time

    # Title of your widget.
    attr_accessor :title

    # Type of the split graph widget
    attr_reader :type

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'has_uniform_y_axes' => :'has_uniform_y_axes',
        :'size' => :'size',
        :'source_widget_definition' => :'source_widget_definition',
        :'split_config' => :'split_config',
        :'time' => :'time',
        :'title' => :'title',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'has_uniform_y_axes' => :'Boolean',
        :'size' => :'SplitGraphVizSize',
        :'source_widget_definition' => :'SplitGraphSourceWidgetDefinition',
        :'split_config' => :'SplitConfig',
        :'time' => :'WidgetTime',
        :'title' => :'String',
        :'type' => :'SplitGraphWidgetDefinitionType'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::SplitGraphWidgetDefinition` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'has_uniform_y_axes')
        self.has_uniform_y_axes = attributes[:'has_uniform_y_axes']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'source_widget_definition')
        self.source_widget_definition = attributes[:'source_widget_definition']
      end

      if attributes.key?(:'split_config')
        self.split_config = attributes[:'split_config']
      end

      if attributes.key?(:'time')
        self.time = attributes[:'time']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @size.nil?
      return false if @source_widget_definition.nil?
      return false if @split_config.nil?
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param size [Object] Object to be assigned
    # @!visibility private
    def size=(size)
      if size.nil?
        fail ArgumentError, 'invalid value for "size", size cannot be nil.'
      end
      @size = size
    end

    # Custom attribute writer method with validation
    # @param source_widget_definition [Object] Object to be assigned
    # @!visibility private
    def source_widget_definition=(source_widget_definition)
      if source_widget_definition.nil?
        fail ArgumentError, 'invalid value for "source_widget_definition", source_widget_definition cannot be nil.'
      end
      @source_widget_definition = source_widget_definition
    end

    # Custom attribute writer method with validation
    # @param split_config [Object] Object to be assigned
    # @!visibility private
    def split_config=(split_config)
      if split_config.nil?
        fail ArgumentError, 'invalid value for "split_config", split_config cannot be nil.'
      end
      @split_config = split_config
    end

    # Custom attribute writer method with validation
    # @param type [Object] Object to be assigned
    # @!visibility private
    def type=(type)
      if type.nil?
        fail ArgumentError, 'invalid value for "type", type cannot be nil.'
      end
      @type = type
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          has_uniform_y_axes == o.has_uniform_y_axes &&
          size == o.size &&
          source_widget_definition == o.source_widget_definition &&
          split_config == o.split_config &&
          time == o.time &&
          title == o.title &&
          type == o.type
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [has_uniform_y_axes, size, source_widget_definition, split_config, time, title, type].hash
    end
  end
end
