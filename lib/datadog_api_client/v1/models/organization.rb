=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Create, edit, and manage organizations.
  class Organization
    include BaseGenericModel

    # Whether the object has unparsed attributes
    # @!visibility private
    attr_accessor :_unparsed

    # A JSON array of billing type.
    attr_accessor :billing

    # Date of the organization creation.
    attr_accessor :created

    # Description of the organization.
    attr_accessor :description

    # The name of the new child-organization, limited to 32 characters.
    attr_reader :name

    # The `public_id` of the organization you are operating within.
    attr_accessor :public_id

    # A JSON array of settings.
    attr_accessor :settings

    # Subscription definition.
    attr_accessor :subscription

    # Only available for MSP customers. Allows child organizations to be created on a trial plan.
    attr_accessor :trial

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'billing' => :'billing',
        :'created' => :'created',
        :'description' => :'description',
        :'name' => :'name',
        :'public_id' => :'public_id',
        :'settings' => :'settings',
        :'subscription' => :'subscription',
        :'trial' => :'trial'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'billing' => :'OrganizationBilling',
        :'created' => :'String',
        :'description' => :'String',
        :'name' => :'String',
        :'public_id' => :'String',
        :'settings' => :'OrganizationSettings',
        :'subscription' => :'OrganizationSubscription',
        :'trial' => :'Boolean'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::Organization` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V1::Organization`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'billing')
        self.billing = attributes[:'billing']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'public_id')
        self.public_id = attributes[:'public_id']
      end

      if attributes.key?(:'settings')
        self.settings = attributes[:'settings']
      end

      if attributes.key?(:'subscription')
        self.subscription = attributes[:'subscription']
      end

      if attributes.key?(:'trial')
        self.trial = attributes[:'trial']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if !@name.nil? && @name.to_s.length > 32
      true
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if !name.nil? && name.to_s.length > 32
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 32.'
      end
      @name = name
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          billing == o.billing &&
          created == o.created &&
          description == o.description &&
          name == o.name &&
          public_id == o.public_id &&
          settings == o.settings &&
          subscription == o.subscription &&
          trial == o.trial
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [billing, created, description, name, public_id, settings, subscription, trial].hash
    end
  end
end
