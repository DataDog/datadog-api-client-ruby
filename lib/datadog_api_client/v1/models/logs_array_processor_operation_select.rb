=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Operation that finds an object in a `source` array using a `filter`, and then extracts a specific value into the `target` attribute.
  class LogsArrayProcessorOperationSelect
    include BaseGenericModel

    # Filter condition expressed as `key:value` used to find the matching element.
    attr_reader :filter

    # Attribute path of the array to search into.
    attr_reader :source

    # Attribute that receives the extracted value.
    attr_reader :target

    # Operation type.
    attr_reader :type

    # Key of the value to extract from the matching element.
    attr_reader :value_to_extract

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'filter' => :'filter',
        :'source' => :'source',
        :'target' => :'target',
        :'type' => :'type',
        :'value_to_extract' => :'value_to_extract'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'filter' => :'String',
        :'source' => :'String',
        :'target' => :'String',
        :'type' => :'LogsArrayProcessorOperationSelectType',
        :'value_to_extract' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::LogsArrayProcessorOperationSelect` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'filter')
        self.filter = attributes[:'filter']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'target')
        self.target = attributes[:'target']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'value_to_extract')
        self.value_to_extract = attributes[:'value_to_extract']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @filter.nil?
      return false if @source.nil?
      return false if @target.nil?
      return false if @type.nil?
      return false if @value_to_extract.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param filter [Object] Object to be assigned
    # @!visibility private
    def filter=(filter)
      if filter.nil?
        fail ArgumentError, 'invalid value for "filter", filter cannot be nil.'
      end
      @filter = filter
    end

    # Custom attribute writer method with validation
    # @param source [Object] Object to be assigned
    # @!visibility private
    def source=(source)
      if source.nil?
        fail ArgumentError, 'invalid value for "source", source cannot be nil.'
      end
      @source = source
    end

    # Custom attribute writer method with validation
    # @param target [Object] Object to be assigned
    # @!visibility private
    def target=(target)
      if target.nil?
        fail ArgumentError, 'invalid value for "target", target cannot be nil.'
      end
      @target = target
    end

    # Custom attribute writer method with validation
    # @param type [Object] Object to be assigned
    # @!visibility private
    def type=(type)
      if type.nil?
        fail ArgumentError, 'invalid value for "type", type cannot be nil.'
      end
      @type = type
    end

    # Custom attribute writer method with validation
    # @param value_to_extract [Object] Object to be assigned
    # @!visibility private
    def value_to_extract=(value_to_extract)
      if value_to_extract.nil?
        fail ArgumentError, 'invalid value for "value_to_extract", value_to_extract cannot be nil.'
      end
      @value_to_extract = value_to_extract
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          filter == o.filter &&
          source == o.source &&
          target == o.target &&
          type == o.type &&
          value_to_extract == o.value_to_extract &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [filter, source, target, type, value_to_extract, additional_properties].hash
    end
  end
end
