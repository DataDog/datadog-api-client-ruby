=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Configuration options for the evaluation window. If `hour_starts` is set, no other fields may be set. Otherwise, `day_starts` and `month_starts` must be set together.
  class MonitorOptionsSchedulingOptionsEvaluationWindow
    include BaseGenericModel

    # The time of the day at which a one day cumulative evaluation window starts. Must be defined in UTC time in `HH:mm` format.
    attr_accessor :day_starts

    # The minute of the hour at which a one hour cumulative evaluation window starts.
    attr_reader :hour_starts

    # The day of the month at which a one month cumulative evaluation window starts.
    attr_reader :month_starts

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'day_starts' => :'day_starts',
        :'hour_starts' => :'hour_starts',
        :'month_starts' => :'month_starts'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'day_starts' => :'String',
        :'hour_starts' => :'Integer',
        :'month_starts' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::MonitorOptionsSchedulingOptionsEvaluationWindow` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'day_starts')
        self.day_starts = attributes[:'day_starts']
      end

      if attributes.key?(:'hour_starts')
        self.hour_starts = attributes[:'hour_starts']
      end

      if attributes.key?(:'month_starts')
        self.month_starts = attributes[:'month_starts']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if !@hour_starts.nil? && @hour_starts > 59
      return false if !@hour_starts.nil? && @hour_starts < 0
      return false if !@month_starts.nil? && @month_starts > 1
      return false if !@month_starts.nil? && @month_starts < 1
      true
    end

    # Custom attribute writer method with validation
    # @param hour_starts [Object] Object to be assigned
    # @!visibility private
    def hour_starts=(hour_starts)
      if !hour_starts.nil? && hour_starts > 59
        fail ArgumentError, 'invalid value for "hour_starts", must be smaller than or equal to 59.'
      end
      if !hour_starts.nil? && hour_starts < 0
        fail ArgumentError, 'invalid value for "hour_starts", must be greater than or equal to 0.'
      end
      @hour_starts = hour_starts
    end

    # Custom attribute writer method with validation
    # @param month_starts [Object] Object to be assigned
    # @!visibility private
    def month_starts=(month_starts)
      if !month_starts.nil? && month_starts > 1
        fail ArgumentError, 'invalid value for "month_starts", must be smaller than or equal to 1.'
      end
      if !month_starts.nil? && month_starts < 1
        fail ArgumentError, 'invalid value for "month_starts", must be greater than or equal to 1.'
      end
      @month_starts = month_starts
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          day_starts == o.day_starts &&
          hour_starts == o.hour_starts &&
          month_starts == o.month_starts
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [day_starts, hour_starts, month_starts].hash
    end
  end
end
