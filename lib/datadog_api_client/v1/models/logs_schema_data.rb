=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Configuration of the schema data to use.
  class LogsSchemaData
    include BaseGenericModel

    # Class name of the schema to use.
    attr_reader :class_name

    # Class UID of the schema to use.
    attr_reader :class_uid

    # Optional list of profiles to modify the schema.
    attr_accessor :profiles

    # Type of schema to use.
    attr_reader :schema_type

    # Version of the schema to use.
    attr_reader :version

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'class_name' => :'class_name',
        :'class_uid' => :'class_uid',
        :'profiles' => :'profiles',
        :'schema_type' => :'schema_type',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'class_name' => :'String',
        :'class_uid' => :'Integer',
        :'profiles' => :'Array<String>',
        :'schema_type' => :'String',
        :'version' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::LogsSchemaData` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'class_name')
        self.class_name = attributes[:'class_name']
      end

      if attributes.key?(:'class_uid')
        self.class_uid = attributes[:'class_uid']
      end

      if attributes.key?(:'profiles')
        if (value = attributes[:'profiles']).is_a?(Array)
          self.profiles = value
        end
      end

      if attributes.key?(:'schema_type')
        self.schema_type = attributes[:'schema_type']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @class_name.nil?
      return false if @class_uid.nil?
      return false if @schema_type.nil?
      return false if @version.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param class_name [Object] Object to be assigned
    # @!visibility private
    def class_name=(class_name)
      if class_name.nil?
        fail ArgumentError, 'invalid value for "class_name", class_name cannot be nil.'
      end
      @class_name = class_name
    end

    # Custom attribute writer method with validation
    # @param class_uid [Object] Object to be assigned
    # @!visibility private
    def class_uid=(class_uid)
      if class_uid.nil?
        fail ArgumentError, 'invalid value for "class_uid", class_uid cannot be nil.'
      end
      @class_uid = class_uid
    end

    # Custom attribute writer method with validation
    # @param schema_type [Object] Object to be assigned
    # @!visibility private
    def schema_type=(schema_type)
      if schema_type.nil?
        fail ArgumentError, 'invalid value for "schema_type", schema_type cannot be nil.'
      end
      @schema_type = schema_type
    end

    # Custom attribute writer method with validation
    # @param version [Object] Object to be assigned
    # @!visibility private
    def version=(version)
      if version.nil?
        fail ArgumentError, 'invalid value for "version", version cannot be nil.'
      end
      @version = version
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          class_name == o.class_name &&
          class_uid == o.class_uid &&
          profiles == o.profiles &&
          schema_type == o.schema_type &&
          version == o.version &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [class_name, class_uid, profiles, schema_type, version, additional_properties].hash
    end
  end
end
