=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Update a shared dashboard's settings.
  class SharedDashboardUpdateRequest
    include BaseGenericModel
    # The `SharedDashboard` `embeddable_domains`.
    attr_accessor :embeddable_domains
    # The time when an OPEN shared dashboard becomes publicly unavailable.
    attr_accessor :expiration
    # Timeframe setting for the shared dashboard.
    attr_accessor :global_time
    # Whether to allow viewers to select a different global time setting for the shared dashboard.
    attr_accessor :global_time_selectable_enabled
    # The `SharedDashboard` `invitees`.
    attr_accessor :invitees
    # List of objects representing template variables on the shared dashboard which can have selectable values.
    attr_accessor :selectable_template_vars
    # List of email addresses that can be given access to the shared dashboard.
    attr_accessor :share_list
    # Type of sharing access (either open to anyone who has the public URL or invite-only).
    attr_accessor :share_type
    # Active means the dashboard is publicly available. Paused means the dashboard is not publicly available.
    attr_accessor :status
    # Title of the shared dashboard.
    attr_accessor :title
    # The viewing preferences for a shared dashboard.
    attr_accessor :viewing_preferences

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'embeddable_domains' => :'embeddable_domains',
        :'expiration' => :'expiration',
        :'global_time' => :'global_time',
        :'global_time_selectable_enabled' => :'global_time_selectable_enabled',
        :'invitees' => :'invitees',
        :'selectable_template_vars' => :'selectable_template_vars',
        :'share_list' => :'share_list',
        :'share_type' => :'share_type',
        :'status' => :'status',
        :'title' => :'title',
        :'viewing_preferences' => :'viewing_preferences'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'embeddable_domains' => :'Array<String>',
        :'expiration' => :'Time',
        :'global_time' => :'SharedDashboardUpdateRequestGlobalTime',
        :'global_time_selectable_enabled' => :'Boolean',
        :'invitees' => :'Array<SharedDashboardInviteesItems>',
        :'selectable_template_vars' => :'Array<SelectableTemplateVariableItems>',
        :'share_list' => :'Array<String>',
        :'share_type' => :'DashboardShareType',
        :'status' => :'SharedDashboardStatus',
        :'title' => :'String',
        :'viewing_preferences' => :'ViewingPreferences'
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
        :'expiration',
        :'global_time',
        :'global_time_selectable_enabled',
        :'selectable_template_vars',
        :'share_list',
        :'share_type',
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::SharedDashboardUpdateRequest` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'embeddable_domains')
        if (value = attributes[:'embeddable_domains']).is_a?(Array)
          self.embeddable_domains = value
        end
      end

      if attributes.key?(:'expiration')
        self.expiration = attributes[:'expiration']
      end

      if attributes.key?(:'global_time')
        self.global_time = attributes[:'global_time']
      end

      if attributes.key?(:'global_time_selectable_enabled')
        self.global_time_selectable_enabled = attributes[:'global_time_selectable_enabled']
      end

      if attributes.key?(:'invitees')
        if (value = attributes[:'invitees']).is_a?(Array)
          self.invitees = value
        end
      end

      if attributes.key?(:'selectable_template_vars')
        if (value = attributes[:'selectable_template_vars']).is_a?(Array)
          self.selectable_template_vars = value
        end
      end

      if attributes.key?(:'share_list')
        if (value = attributes[:'share_list']).is_a?(Array)
          self.share_list = value
        end
      end

      if attributes.key?(:'share_type')
        self.share_type = attributes[:'share_type']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'viewing_preferences')
        self.viewing_preferences = attributes[:'viewing_preferences']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          embeddable_domains == o.embeddable_domains &&
          expiration == o.expiration &&
          global_time == o.global_time &&
          global_time_selectable_enabled == o.global_time_selectable_enabled &&
          invitees == o.invitees &&
          selectable_template_vars == o.selectable_template_vars &&
          share_list == o.share_list &&
          share_type == o.share_type &&
          status == o.status &&
          title == o.title &&
          viewing_preferences == o.viewing_preferences &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [embeddable_domains, expiration, global_time, global_time_selectable_enabled, invitees, selectable_template_vars, share_list, share_type, status, title, viewing_preferences, additional_properties].hash
    end
  end
end
