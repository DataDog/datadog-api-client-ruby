=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Metadata associated with your host.
  class HostMeta
    include BaseGenericModel

    # A list of Agent checks running on the host.
    attr_accessor :agent_checks

    # The Datadog Agent version.
    attr_accessor :agent_version

    # The number of cores.
    attr_accessor :cpu_cores

    # An array of Mac versions.
    attr_accessor :fbsd_v

    # JSON string containing system information.
    attr_accessor :gohai

    # Agent install method.
    attr_accessor :install_method

    # An array of Mac versions.
    attr_accessor :mac_v

    # The machine architecture.
    attr_accessor :machine

    # Array of Unix versions.
    attr_accessor :nix_v

    # The OS platform.
    attr_accessor :platform

    # The processor.
    attr_accessor :processor

    # The Python version.
    attr_accessor :python_v

    # The socket fqdn.
    attr_accessor :socket_fqdn

    # The socket hostname.
    attr_accessor :socket_hostname

    # An array of Windows versions.
    attr_accessor :win_v

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'agent_checks' => :'agent_checks',
        :'agent_version' => :'agent_version',
        :'cpu_cores' => :'cpuCores',
        :'fbsd_v' => :'fbsdV',
        :'gohai' => :'gohai',
        :'install_method' => :'install_method',
        :'mac_v' => :'macV',
        :'machine' => :'machine',
        :'nix_v' => :'nixV',
        :'platform' => :'platform',
        :'processor' => :'processor',
        :'python_v' => :'pythonV',
        :'socket_fqdn' => :'socket-fqdn',
        :'socket_hostname' => :'socket-hostname',
        :'win_v' => :'winV'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'agent_checks' => :'Array<Array<Object>>',
        :'agent_version' => :'String',
        :'cpu_cores' => :'Integer',
        :'fbsd_v' => :'Array<Object>',
        :'gohai' => :'String',
        :'install_method' => :'HostMetaInstallMethod',
        :'mac_v' => :'Array<Object>',
        :'machine' => :'String',
        :'nix_v' => :'Array<Object>',
        :'platform' => :'String',
        :'processor' => :'String',
        :'python_v' => :'String',
        :'socket_fqdn' => :'String',
        :'socket_hostname' => :'String',
        :'win_v' => :'Array<Object>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::HostMeta` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'agent_checks')
        if (value = attributes[:'agent_checks']).is_a?(Array)
          self.agent_checks = value
        end
      end

      if attributes.key?(:'agent_version')
        self.agent_version = attributes[:'agent_version']
      end

      if attributes.key?(:'cpu_cores')
        self.cpu_cores = attributes[:'cpu_cores']
      end

      if attributes.key?(:'fbsd_v')
        if (value = attributes[:'fbsd_v']).is_a?(Array)
          self.fbsd_v = value
        end
      end

      if attributes.key?(:'gohai')
        self.gohai = attributes[:'gohai']
      end

      if attributes.key?(:'install_method')
        self.install_method = attributes[:'install_method']
      end

      if attributes.key?(:'mac_v')
        if (value = attributes[:'mac_v']).is_a?(Array)
          self.mac_v = value
        end
      end

      if attributes.key?(:'machine')
        self.machine = attributes[:'machine']
      end

      if attributes.key?(:'nix_v')
        if (value = attributes[:'nix_v']).is_a?(Array)
          self.nix_v = value
        end
      end

      if attributes.key?(:'platform')
        self.platform = attributes[:'platform']
      end

      if attributes.key?(:'processor')
        self.processor = attributes[:'processor']
      end

      if attributes.key?(:'python_v')
        self.python_v = attributes[:'python_v']
      end

      if attributes.key?(:'socket_fqdn')
        self.socket_fqdn = attributes[:'socket_fqdn']
      end

      if attributes.key?(:'socket_hostname')
        self.socket_hostname = attributes[:'socket_hostname']
      end

      if attributes.key?(:'win_v')
        if (value = attributes[:'win_v']).is_a?(Array)
          self.win_v = value
        end
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          agent_checks == o.agent_checks &&
          agent_version == o.agent_version &&
          cpu_cores == o.cpu_cores &&
          fbsd_v == o.fbsd_v &&
          gohai == o.gohai &&
          install_method == o.install_method &&
          mac_v == o.mac_v &&
          machine == o.machine &&
          nix_v == o.nix_v &&
          platform == o.platform &&
          processor == o.processor &&
          python_v == o.python_v &&
          socket_fqdn == o.socket_fqdn &&
          socket_hostname == o.socket_hostname &&
          win_v == o.win_v
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [agent_checks, agent_version, cpu_cores, fbsd_v, gohai, install_method, mac_v, machine, nix_v, platform, processor, python_v, socket_fqdn, socket_hostname, win_v].hash
    end
  end
end
