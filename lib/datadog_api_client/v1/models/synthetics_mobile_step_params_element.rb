=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Information about the element used for a step.
  class SyntheticsMobileStepParamsElement
    include BaseGenericModel

    # Context of the element.
    attr_accessor :context

    # Type of the context that the element is in.
    attr_accessor :context_type

    # Description of the element.
    attr_accessor :element_description

    # Multi-locator to find the element.
    attr_accessor :multi_locator

    # Position of the action relative to the element.
    attr_accessor :relative_position

    # Text content of the element.
    attr_accessor :text_content

    # User locator to find the element.
    attr_accessor :user_locator

    # Name of the view of the element.
    attr_accessor :view_name

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'context' => :'context',
        :'context_type' => :'contextType',
        :'element_description' => :'elementDescription',
        :'multi_locator' => :'multiLocator',
        :'relative_position' => :'relativePosition',
        :'text_content' => :'textContent',
        :'user_locator' => :'userLocator',
        :'view_name' => :'viewName'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'context' => :'String',
        :'context_type' => :'SyntheticsMobileStepParamsElementContextType',
        :'element_description' => :'String',
        :'multi_locator' => :'Object',
        :'relative_position' => :'SyntheticsMobileStepParamsElementRelativePosition',
        :'text_content' => :'String',
        :'user_locator' => :'SyntheticsMobileStepParamsElementUserLocator',
        :'view_name' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::SyntheticsMobileStepParamsElement` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'context')
        self.context = attributes[:'context']
      end

      if attributes.key?(:'context_type')
        self.context_type = attributes[:'context_type']
      end

      if attributes.key?(:'element_description')
        self.element_description = attributes[:'element_description']
      end

      if attributes.key?(:'multi_locator')
        self.multi_locator = attributes[:'multi_locator']
      end

      if attributes.key?(:'relative_position')
        self.relative_position = attributes[:'relative_position']
      end

      if attributes.key?(:'text_content')
        self.text_content = attributes[:'text_content']
      end

      if attributes.key?(:'user_locator')
        self.user_locator = attributes[:'user_locator']
      end

      if attributes.key?(:'view_name')
        self.view_name = attributes[:'view_name']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          context == o.context &&
          context_type == o.context_type &&
          element_description == o.element_description &&
          multi_locator == o.multi_locator &&
          relative_position == o.relative_position &&
          text_content == o.text_content &&
          user_locator == o.user_locator &&
          view_name == o.view_name
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [context, context_type, element_description, multi_locator, relative_position, text_content, user_locator, view_name].hash
    end
  end
end
