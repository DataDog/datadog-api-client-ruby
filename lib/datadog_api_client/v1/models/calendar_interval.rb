=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Calendar interval options for compute.
  # Fields `interval` (numeric interval) and `rollup` (calendar interval) are mutually exclusive.
  # 
  # For instance:
  # - { type: 'day', alignment: '1pm', timezone: 'Europe/Paris' }
  # - { type: 'week', alignment: 'tuesday', quantity: 2 }
  # - { type: 'month', alignment: '15th' }
  # - { type: 'year', alignment: 'april' }
  class CalendarInterval
    include BaseGenericModel

    # Optional alignment to define period start.
    # Its possible values depend on the type field:
    #
    # - day: start hour of day as 12 or 24-hr format (for instance: 11pm, 3am, 15)
    # - week: first day of the week (for instance: tuesday, note the lowercase)
    # - month: first day of month (for instance: 1th, 2nd, 23th)
    # - year: first month of the year (for instance: april, note the lowercase)
    attr_accessor :alignment

    # Optional integer to specify how many units to group together.
    attr_accessor :quantity

    # Optional timezone to define the calendar interval.
    attr_accessor :timezone

    # Type of calendar interval (day, week, etc.).
    attr_reader :type

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'alignment' => :'alignment',
        :'quantity' => :'quantity',
        :'timezone' => :'timezone',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'alignment' => :'String',
        :'quantity' => :'Integer',
        :'timezone' => :'String',
        :'type' => :'CalendarIntervalType'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::CalendarInterval` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V1::CalendarInterval`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'alignment')
        self.alignment = attributes[:'alignment']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param type [Object] Object to be assigned
    # @!visibility private
    def type=(type)
      if type.nil?
        fail ArgumentError, 'invalid value for "type", type cannot be nil.'
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          alignment == o.alignment &&
          quantity == o.quantity &&
          timezone == o.timezone &&
          type == o.type
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [alignment, quantity, timezone, type].hash
    end
  end
end
