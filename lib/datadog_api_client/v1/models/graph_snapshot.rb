=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Object representing a graph snapshot.
  class GraphSnapshot
    include BaseGenericModel

    # A JSON document defining the graph. `graph_def` can be used instead of `metric_query`.
    # The JSON document uses the [grammar defined here](https://docs.datadoghq.com/graphing/graphing_json/#grammar)
    # and should be formatted to a single line then URL encoded.
    attr_accessor :graph_def

    # The metric query. One of `metric_query` or `graph_def` is required.
    attr_accessor :metric_query

    # URL of your [graph snapshot](https://docs.datadoghq.com/metrics/explorer/#snapshot).
    attr_accessor :snapshot_url

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'graph_def' => :'graph_def',
        :'metric_query' => :'metric_query',
        :'snapshot_url' => :'snapshot_url'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'graph_def' => :'String',
        :'metric_query' => :'String',
        :'snapshot_url' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::GraphSnapshot` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'graph_def')
        self.graph_def = attributes[:'graph_def']
      end

      if attributes.key?(:'metric_query')
        self.metric_query = attributes[:'metric_query']
      end

      if attributes.key?(:'snapshot_url')
        self.snapshot_url = attributes[:'snapshot_url']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          graph_def == o.graph_def &&
          metric_query == o.metric_query &&
          snapshot_url == o.snapshot_url
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [graph_def, metric_query, snapshot_url].hash
    end
  end
end
