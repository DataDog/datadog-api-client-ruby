=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Object with all metric related metadata.
  class MetricMetadata
    include BaseGenericModel

    # Metric description.
    attr_accessor :description

    # Name of the integration that sent the metric if applicable.
    attr_accessor :integration

    # Per unit of the metric such as `second` in `bytes per second`.
    attr_accessor :per_unit

    # A more human-readable and abbreviated version of the metric name.
    attr_accessor :short_name

    # StatsD flush interval of the metric in seconds if applicable.
    attr_accessor :statsd_interval

    # Metric type such as `gauge` or `rate`.
    attr_accessor :type

    # Primary unit of the metric such as `byte` or `operation`.
    attr_accessor :unit

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'description' => :'description',
        :'integration' => :'integration',
        :'per_unit' => :'per_unit',
        :'short_name' => :'short_name',
        :'statsd_interval' => :'statsd_interval',
        :'type' => :'type',
        :'unit' => :'unit'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'description' => :'String',
        :'integration' => :'String',
        :'per_unit' => :'String',
        :'short_name' => :'String',
        :'statsd_interval' => :'Integer',
        :'type' => :'String',
        :'unit' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::MetricMetadata` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'integration')
        self.integration = attributes[:'integration']
      end

      if attributes.key?(:'per_unit')
        self.per_unit = attributes[:'per_unit']
      end

      if attributes.key?(:'short_name')
        self.short_name = attributes[:'short_name']
      end

      if attributes.key?(:'statsd_interval')
        self.statsd_interval = attributes[:'statsd_interval']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'unit')
        self.unit = attributes[:'unit']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          description == o.description &&
          integration == o.integration &&
          per_unit == o.per_unit &&
          short_name == o.short_name &&
          statsd_interval == o.statsd_interval &&
          type == o.type &&
          unit == o.unit
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [description, integration, per_unit, short_name, statsd_interval, type, unit].hash
    end
  end
end
