=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Object describing a step for a Synthetic test.
  class SyntheticsStepDetail
    include BaseGenericModel

    # Array of errors collected for a browser test.
    attr_accessor :browser_errors

    # Type of assertion to apply in an API test.
    attr_accessor :check_type

    # Description of the test.
    attr_accessor :description

    # Total duration in millisecond of the test.
    attr_accessor :duration

    # Error returned by the test.
    attr_accessor :error

    # Navigate between different tabs for your browser test.
    attr_accessor :playing_tab

    # Whether or not screenshots where collected by the test.
    attr_accessor :screenshot_bucket_key

    # Whether or not to skip this step.
    attr_accessor :skipped

    # Whether or not snapshots where collected by the test.
    attr_accessor :snapshot_bucket_key

    # The step ID.
    attr_accessor :step_id

    # If this step includes a sub-test.
    # [Subtests documentation](https://docs.datadoghq.com/synthetics/browser_tests/advanced_options/#subtests).
    attr_accessor :sub_test_step_details

    # Time before starting the step.
    attr_accessor :time_to_interactive

    # Step type used in your Synthetic test.
    attr_accessor :type

    # URL to perform the step against.
    attr_accessor :url

    # Value for the step.
    attr_accessor :value

    # Array of Core Web Vitals metrics for the step.
    attr_accessor :vitals_metrics

    # Warning collected that didn't failed the step.
    attr_accessor :warnings

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'browser_errors' => :'browserErrors',
        :'check_type' => :'checkType',
        :'description' => :'description',
        :'duration' => :'duration',
        :'error' => :'error',
        :'playing_tab' => :'playingTab',
        :'screenshot_bucket_key' => :'screenshotBucketKey',
        :'skipped' => :'skipped',
        :'snapshot_bucket_key' => :'snapshotBucketKey',
        :'step_id' => :'stepId',
        :'sub_test_step_details' => :'subTestStepDetails',
        :'time_to_interactive' => :'timeToInteractive',
        :'type' => :'type',
        :'url' => :'url',
        :'value' => :'value',
        :'vitals_metrics' => :'vitalsMetrics',
        :'warnings' => :'warnings'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'browser_errors' => :'Array<SyntheticsBrowserError>',
        :'check_type' => :'SyntheticsCheckType',
        :'description' => :'String',
        :'duration' => :'Float',
        :'error' => :'String',
        :'playing_tab' => :'SyntheticsPlayingTab',
        :'screenshot_bucket_key' => :'Boolean',
        :'skipped' => :'Boolean',
        :'snapshot_bucket_key' => :'Boolean',
        :'step_id' => :'Integer',
        :'sub_test_step_details' => :'Array<SyntheticsStepDetail>',
        :'time_to_interactive' => :'Float',
        :'type' => :'SyntheticsStepType',
        :'url' => :'String',
        :'value' => :'Object',
        :'vitals_metrics' => :'Array<SyntheticsCoreWebVitals>',
        :'warnings' => :'Array<SyntheticsStepDetailWarning>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::SyntheticsStepDetail` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'browser_errors')
        if (value = attributes[:'browser_errors']).is_a?(Array)
          self.browser_errors = value
        end
      end

      if attributes.key?(:'check_type')
        self.check_type = attributes[:'check_type']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.key?(:'playing_tab')
        self.playing_tab = attributes[:'playing_tab']
      end

      if attributes.key?(:'screenshot_bucket_key')
        self.screenshot_bucket_key = attributes[:'screenshot_bucket_key']
      end

      if attributes.key?(:'skipped')
        self.skipped = attributes[:'skipped']
      end

      if attributes.key?(:'snapshot_bucket_key')
        self.snapshot_bucket_key = attributes[:'snapshot_bucket_key']
      end

      if attributes.key?(:'step_id')
        self.step_id = attributes[:'step_id']
      end

      if attributes.key?(:'sub_test_step_details')
        if (value = attributes[:'sub_test_step_details']).is_a?(Array)
          self.sub_test_step_details = value
        end
      end

      if attributes.key?(:'time_to_interactive')
        self.time_to_interactive = attributes[:'time_to_interactive']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'vitals_metrics')
        if (value = attributes[:'vitals_metrics']).is_a?(Array)
          self.vitals_metrics = value
        end
      end

      if attributes.key?(:'warnings')
        if (value = attributes[:'warnings']).is_a?(Array)
          self.warnings = value
        end
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          browser_errors == o.browser_errors &&
          check_type == o.check_type &&
          description == o.description &&
          duration == o.duration &&
          error == o.error &&
          playing_tab == o.playing_tab &&
          screenshot_bucket_key == o.screenshot_bucket_key &&
          skipped == o.skipped &&
          snapshot_bucket_key == o.snapshot_bucket_key &&
          step_id == o.step_id &&
          sub_test_step_details == o.sub_test_step_details &&
          time_to_interactive == o.time_to_interactive &&
          type == o.type &&
          url == o.url &&
          value == o.value &&
          vitals_metrics == o.vitals_metrics &&
          warnings == o.warnings
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [browser_errors, check_type, description, duration, error, playing_tab, screenshot_bucket_key, skipped, snapshot_bucket_key, step_id, sub_test_step_details, time_to_interactive, type, url, value, vitals_metrics, warnings].hash
    end
  end
end
