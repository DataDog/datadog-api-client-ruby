=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class RumAudienceManagementAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Create connection.
    #
    # @see #create_connection_with_http_info
    def create_connection(entity, body, opts = {})
      create_connection_with_http_info(entity, body, opts)
      nil
    end

    # Create connection.
    #
    # Create a new data connection and its fields for an entity
    #
    # @param entity [String] The entity for which to create the connection
    # @param body [CreateConnectionRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_connection_with_http_info(entity, body, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.create_connection".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.create_connection")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.create_connection"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RumAudienceManagementAPI.create_connection ...'
      end
      # verify the required parameter 'entity' is set
      if @api_client.config.client_side_validation && entity.nil?
        fail ArgumentError, "Missing the required parameter 'entity' when calling RumAudienceManagementAPI.create_connection"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RumAudienceManagementAPI.create_connection"
      end
      # resource path
      local_var_path = '/api/v2/product-analytics/{entity}/mapping/connection'.sub('{entity}', CGI.escape(entity.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :create_connection,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RumAudienceManagementAPI#create_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete connection.
    #
    # @see #delete_connection_with_http_info
    def delete_connection(id, entity, opts = {})
      delete_connection_with_http_info(id, entity, opts)
      nil
    end

    # Delete connection.
    #
    # Delete an existing data connection for an entity
    #
    # @param id [String] The connection ID to delete
    # @param entity [String] The entity for which to delete the connection
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_connection_with_http_info(id, entity, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.delete_connection".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.delete_connection")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.delete_connection"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RumAudienceManagementAPI.delete_connection ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RumAudienceManagementAPI.delete_connection"
      end
      # verify the required parameter 'entity' is set
      if @api_client.config.client_side_validation && entity.nil?
        fail ArgumentError, "Missing the required parameter 'entity' when calling RumAudienceManagementAPI.delete_connection"
      end
      # resource path
      local_var_path = '/api/v2/product-analytics/{entity}/mapping/connection/{id}'.sub('{id}', CGI.escape(id.to_s).gsub('%2F', '/')).sub('{entity}', CGI.escape(entity.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_connection,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RumAudienceManagementAPI#delete_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get account facet info.
    #
    # @see #get_account_facet_info_with_http_info
    def get_account_facet_info(body, opts = {})
      data, _status_code, _headers = get_account_facet_info_with_http_info(body, opts)
      data
    end

    # Get account facet info.
    #
    # Get facet information for account attributes including possible values and counts
    #
    # @param body [FacetInfoRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(FacetInfoResponse, Integer, Hash)>] FacetInfoResponse data, response status code and response headers
    def get_account_facet_info_with_http_info(body, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.get_account_facet_info".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.get_account_facet_info")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.get_account_facet_info"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RumAudienceManagementAPI.get_account_facet_info ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RumAudienceManagementAPI.get_account_facet_info"
      end
      # resource path
      local_var_path = '/api/v2/product-analytics/accounts/facet_info'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FacetInfoResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_account_facet_info,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RumAudienceManagementAPI#get_account_facet_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mapping.
    #
    # @see #get_mapping_with_http_info
    def get_mapping(entity, opts = {})
      data, _status_code, _headers = get_mapping_with_http_info(entity, opts)
      data
    end

    # Get mapping.
    #
    # Get entity mapping configuration including all available attributes and their properties
    #
    # @param entity [String] The entity for which to get the mapping
    # @param opts [Hash] the optional parameters
    # @return [Array<(GetMappingResponse, Integer, Hash)>] GetMappingResponse data, response status code and response headers
    def get_mapping_with_http_info(entity, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.get_mapping".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.get_mapping")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.get_mapping"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RumAudienceManagementAPI.get_mapping ...'
      end
      # verify the required parameter 'entity' is set
      if @api_client.config.client_side_validation && entity.nil?
        fail ArgumentError, "Missing the required parameter 'entity' when calling RumAudienceManagementAPI.get_mapping"
      end
      # resource path
      local_var_path = '/api/v2/product-analytics/{entity}/mapping'.sub('{entity}', CGI.escape(entity.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMappingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_mapping,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RumAudienceManagementAPI#get_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user facet info.
    #
    # @see #get_user_facet_info_with_http_info
    def get_user_facet_info(body, opts = {})
      data, _status_code, _headers = get_user_facet_info_with_http_info(body, opts)
      data
    end

    # Get user facet info.
    #
    # Get facet information for user attributes including possible values and counts
    #
    # @param body [FacetInfoRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(FacetInfoResponse, Integer, Hash)>] FacetInfoResponse data, response status code and response headers
    def get_user_facet_info_with_http_info(body, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.get_user_facet_info".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.get_user_facet_info")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.get_user_facet_info"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RumAudienceManagementAPI.get_user_facet_info ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RumAudienceManagementAPI.get_user_facet_info"
      end
      # resource path
      local_var_path = '/api/v2/product-analytics/users/facet_info'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FacetInfoResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_user_facet_info,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RumAudienceManagementAPI#get_user_facet_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List connections.
    #
    # @see #list_connections_with_http_info
    def list_connections(entity, opts = {})
      data, _status_code, _headers = list_connections_with_http_info(entity, opts)
      data
    end

    # List connections.
    #
    # List all data connections for an entity
    #
    # @param entity [String] The entity for which to list connections
    # @param opts [Hash] the optional parameters
    # @return [Array<(ListConnectionsResponse, Integer, Hash)>] ListConnectionsResponse data, response status code and response headers
    def list_connections_with_http_info(entity, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.list_connections".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.list_connections")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.list_connections"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RumAudienceManagementAPI.list_connections ...'
      end
      # verify the required parameter 'entity' is set
      if @api_client.config.client_side_validation && entity.nil?
        fail ArgumentError, "Missing the required parameter 'entity' when calling RumAudienceManagementAPI.list_connections"
      end
      # resource path
      local_var_path = '/api/v2/product-analytics/{entity}/mapping/connections'.sub('{entity}', CGI.escape(entity.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListConnectionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :list_connections,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RumAudienceManagementAPI#list_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query accounts.
    #
    # @see #query_accounts_with_http_info
    def query_accounts(body, opts = {})
      data, _status_code, _headers = query_accounts_with_http_info(body, opts)
      data
    end

    # Query accounts.
    #
    # Query accounts with flexible filtering by account properties
    #
    # @param body [QueryAccountRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(QueryResponse, Integer, Hash)>] QueryResponse data, response status code and response headers
    def query_accounts_with_http_info(body, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.query_accounts".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.query_accounts")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.query_accounts"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RumAudienceManagementAPI.query_accounts ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RumAudienceManagementAPI.query_accounts"
      end
      # resource path
      local_var_path = '/api/v2/product-analytics/accounts/query'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'QueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :query_accounts,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RumAudienceManagementAPI#query_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query event filtered users.
    #
    # @see #query_event_filtered_users_with_http_info
    def query_event_filtered_users(body, opts = {})
      data, _status_code, _headers = query_event_filtered_users_with_http_info(body, opts)
      data
    end

    # Query event filtered users.
    #
    # Query users filtered by both user properties and event platform data
    #
    # @param body [QueryEventFilteredUsersRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(QueryResponse, Integer, Hash)>] QueryResponse data, response status code and response headers
    def query_event_filtered_users_with_http_info(body, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.query_event_filtered_users".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.query_event_filtered_users")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.query_event_filtered_users"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RumAudienceManagementAPI.query_event_filtered_users ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RumAudienceManagementAPI.query_event_filtered_users"
      end
      # resource path
      local_var_path = '/api/v2/product-analytics/users/event_filtered_query'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'QueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :query_event_filtered_users,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RumAudienceManagementAPI#query_event_filtered_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query users.
    #
    # @see #query_users_with_http_info
    def query_users(body, opts = {})
      data, _status_code, _headers = query_users_with_http_info(body, opts)
      data
    end

    # Query users.
    #
    # Query users with flexible filtering by user properties, with optional wildcard search
    #
    # @param body [QueryUsersRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(QueryResponse, Integer, Hash)>] QueryResponse data, response status code and response headers
    def query_users_with_http_info(body, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.query_users".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.query_users")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.query_users"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RumAudienceManagementAPI.query_users ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RumAudienceManagementAPI.query_users"
      end
      # resource path
      local_var_path = '/api/v2/product-analytics/users/query'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'QueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :query_users,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RumAudienceManagementAPI#query_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update connection.
    #
    # @see #update_connection_with_http_info
    def update_connection(entity, body, opts = {})
      update_connection_with_http_info(entity, body, opts)
      nil
    end

    # Update connection.
    #
    # Update an existing data connection by adding, updating, or deleting fields
    #
    # @param entity [String] The entity for which to update the connection
    # @param body [UpdateConnectionRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_connection_with_http_info(entity, body, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.update_connection".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.update_connection")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.update_connection"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RumAudienceManagementAPI.update_connection ...'
      end
      # verify the required parameter 'entity' is set
      if @api_client.config.client_side_validation && entity.nil?
        fail ArgumentError, "Missing the required parameter 'entity' when calling RumAudienceManagementAPI.update_connection"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RumAudienceManagementAPI.update_connection"
      end
      # resource path
      local_var_path = '/api/v2/product-analytics/{entity}/mapping/connection'.sub('{entity}', CGI.escape(entity.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_connection,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Put, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RumAudienceManagementAPI#update_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
