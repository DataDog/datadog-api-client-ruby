=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class CSMThreatsAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Create a Workload Protection agent rule (US1-FED).
    #
    # @see #create_cloud_workload_security_agent_rule_with_http_info
    def create_cloud_workload_security_agent_rule(body, opts = {})
      data, _status_code, _headers = create_cloud_workload_security_agent_rule_with_http_info(body, opts)
      data
    end

    # Create a Workload Protection agent rule (US1-FED).
    #
    # Create a new agent rule with the given parameters.
    #
    # **Note**: This endpoint should only be used for the Government (US1-FED) site.
    #
    # @param body [CloudWorkloadSecurityAgentRuleCreateRequest] The definition of the new agent rule
    # @param opts [Hash] the optional parameters
    # @return [Array<(CloudWorkloadSecurityAgentRuleResponse, Integer, Hash)>] CloudWorkloadSecurityAgentRuleResponse data, response status code and response headers
    def create_cloud_workload_security_agent_rule_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.create_cloud_workload_security_agent_rule ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CSMThreatsAPI.create_cloud_workload_security_agent_rule"
      end
      # resource path
      local_var_path = '/api/v2/security_monitoring/cloud_workload_security/agent_rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CloudWorkloadSecurityAgentRuleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :create_cloud_workload_security_agent_rule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#create_cloud_workload_security_agent_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Workload Protection policy.
    #
    # @see #create_csm_threats_agent_policy_with_http_info
    def create_csm_threats_agent_policy(body, opts = {})
      data, _status_code, _headers = create_csm_threats_agent_policy_with_http_info(body, opts)
      data
    end

    # Create a Workload Protection policy.
    #
    # Create a new Workload Protection policy with the given parameters.
    #
    # **Note**: This endpoint is not available for the Government (US1-FED) site. Please reference the (US1-FED) specific resource below.
    #
    # @param body [CloudWorkloadSecurityAgentPolicyCreateRequest] The definition of the new Agent policy
    # @param opts [Hash] the optional parameters
    # @return [Array<(CloudWorkloadSecurityAgentPolicyResponse, Integer, Hash)>] CloudWorkloadSecurityAgentPolicyResponse data, response status code and response headers
    def create_csm_threats_agent_policy_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.create_csm_threats_agent_policy ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CSMThreatsAPI.create_csm_threats_agent_policy"
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/cws/policy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CloudWorkloadSecurityAgentPolicyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :create_csm_threats_agent_policy,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#create_csm_threats_agent_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Workload Protection agent rule.
    #
    # @see #create_csm_threats_agent_rule_with_http_info
    def create_csm_threats_agent_rule(body, opts = {})
      data, _status_code, _headers = create_csm_threats_agent_rule_with_http_info(body, opts)
      data
    end

    # Create a Workload Protection agent rule.
    #
    # Create a new Workload Protection agent rule with the given parameters.
    #
    # **Note**: This endpoint is not available for the Government (US1-FED) site. Please reference the (US1-FED) specific resource below.
    #
    # @param body [CloudWorkloadSecurityAgentRuleCreateRequest] The definition of the new agent rule
    # @param opts [Hash] the optional parameters
    # @return [Array<(CloudWorkloadSecurityAgentRuleResponse, Integer, Hash)>] CloudWorkloadSecurityAgentRuleResponse data, response status code and response headers
    def create_csm_threats_agent_rule_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.create_csm_threats_agent_rule ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CSMThreatsAPI.create_csm_threats_agent_rule"
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/cws/agent_rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CloudWorkloadSecurityAgentRuleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :create_csm_threats_agent_rule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#create_csm_threats_agent_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Workload Protection agent rule (US1-FED).
    #
    # @see #delete_cloud_workload_security_agent_rule_with_http_info
    def delete_cloud_workload_security_agent_rule(agent_rule_id, opts = {})
      delete_cloud_workload_security_agent_rule_with_http_info(agent_rule_id, opts)
      nil
    end

    # Delete a Workload Protection agent rule (US1-FED).
    #
    # Delete a specific agent rule.
    #
    # **Note**: This endpoint should only be used for the Government (US1-FED) site.
    #
    # @param agent_rule_id [String] The ID of the Agent rule
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_cloud_workload_security_agent_rule_with_http_info(agent_rule_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.delete_cloud_workload_security_agent_rule ...'
      end
      # verify the required parameter 'agent_rule_id' is set
      if @api_client.config.client_side_validation && agent_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'agent_rule_id' when calling CSMThreatsAPI.delete_cloud_workload_security_agent_rule"
      end
      # resource path
      local_var_path = '/api/v2/security_monitoring/cloud_workload_security/agent_rules/{agent_rule_id}'.sub('{agent_rule_id}', CGI.escape(agent_rule_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :delete_cloud_workload_security_agent_rule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#delete_cloud_workload_security_agent_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Workload Protection policy.
    #
    # @see #delete_csm_threats_agent_policy_with_http_info
    def delete_csm_threats_agent_policy(policy_id, opts = {})
      delete_csm_threats_agent_policy_with_http_info(policy_id, opts)
      nil
    end

    # Delete a Workload Protection policy.
    #
    # Delete a specific Workload Protection policy.
    #
    # **Note**: This endpoint is not available for the Government (US1-FED) site. Please reference the (US1-FED) specific resource below.
    #
    # @param policy_id [String] The ID of the Agent policy
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_csm_threats_agent_policy_with_http_info(policy_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.delete_csm_threats_agent_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling CSMThreatsAPI.delete_csm_threats_agent_policy"
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/cws/policy/{policy_id}'.sub('{policy_id}', CGI.escape(policy_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :delete_csm_threats_agent_policy,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#delete_csm_threats_agent_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Workload Protection agent rule.
    #
    # @see #delete_csm_threats_agent_rule_with_http_info
    def delete_csm_threats_agent_rule(agent_rule_id, opts = {})
      delete_csm_threats_agent_rule_with_http_info(agent_rule_id, opts)
      nil
    end

    # Delete a Workload Protection agent rule.
    #
    # Delete a specific Workload Protection agent rule.
    #
    # **Note**: This endpoint is not available for the Government (US1-FED) site. Please reference the (US1-FED) specific resource below.
    #
    # @param agent_rule_id [String] The ID of the Agent rule
    # @param opts [Hash] the optional parameters
    # @option opts [String] :policy_id The ID of the Agent policy
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_csm_threats_agent_rule_with_http_info(agent_rule_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.delete_csm_threats_agent_rule ...'
      end
      # verify the required parameter 'agent_rule_id' is set
      if @api_client.config.client_side_validation && agent_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'agent_rule_id' when calling CSMThreatsAPI.delete_csm_threats_agent_rule"
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/cws/agent_rules/{agent_rule_id}'.sub('{agent_rule_id}', CGI.escape(agent_rule_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'policy_id'] = opts[:'policy_id'] if !opts[:'policy_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :delete_csm_threats_agent_rule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#delete_csm_threats_agent_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download the Workload Protection policy (US1-FED).
    #
    # @see #download_cloud_workload_policy_file_with_http_info
    def download_cloud_workload_policy_file(opts = {})
      data, _status_code, _headers = download_cloud_workload_policy_file_with_http_info(opts)
      data
    end

    # Download the Workload Protection policy (US1-FED).
    #
    # The download endpoint generates a Workload Protection policy file from your currently active
    # Workload Protection agent rules, and downloads them as a `.policy` file. This file can then be deployed to
    # your agents to update the policy running in your environment.
    #
    # **Note**: This endpoint should only be used for the Government (US1-FED) site.
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def download_cloud_workload_policy_file_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.download_cloud_workload_policy_file ...'
      end
      # resource path
      local_var_path = '/api/v2/security/cloud_workload/policy/download'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/yaml', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :download_cloud_workload_policy_file,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#download_cloud_workload_policy_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download the Workload Protection policy.
    #
    # @see #download_csm_threats_policy_with_http_info
    def download_csm_threats_policy(opts = {})
      data, _status_code, _headers = download_csm_threats_policy_with_http_info(opts)
      data
    end

    # Download the Workload Protection policy.
    #
    # The download endpoint generates a Workload Protection policy file from your currently active
    # Workload Protection agent rules, and downloads them as a `.policy` file. This file can then be deployed to
    # your agents to update the policy running in your environment.
    #
    # **Note**: This endpoint is not available for the Government (US1-FED) site. Please reference the (US1-FED) specific resource below.
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def download_csm_threats_policy_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.download_csm_threats_policy ...'
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/cws/policy/download'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :download_csm_threats_policy,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#download_csm_threats_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Workload Protection agent rule (US1-FED).
    #
    # @see #get_cloud_workload_security_agent_rule_with_http_info
    def get_cloud_workload_security_agent_rule(agent_rule_id, opts = {})
      data, _status_code, _headers = get_cloud_workload_security_agent_rule_with_http_info(agent_rule_id, opts)
      data
    end

    # Get a Workload Protection agent rule (US1-FED).
    #
    # Get the details of a specific agent rule.
    #
    # **Note**: This endpoint should only be used for the Government (US1-FED) site.
    #
    # @param agent_rule_id [String] The ID of the Agent rule
    # @param opts [Hash] the optional parameters
    # @return [Array<(CloudWorkloadSecurityAgentRuleResponse, Integer, Hash)>] CloudWorkloadSecurityAgentRuleResponse data, response status code and response headers
    def get_cloud_workload_security_agent_rule_with_http_info(agent_rule_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.get_cloud_workload_security_agent_rule ...'
      end
      # verify the required parameter 'agent_rule_id' is set
      if @api_client.config.client_side_validation && agent_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'agent_rule_id' when calling CSMThreatsAPI.get_cloud_workload_security_agent_rule"
      end
      # resource path
      local_var_path = '/api/v2/security_monitoring/cloud_workload_security/agent_rules/{agent_rule_id}'.sub('{agent_rule_id}', CGI.escape(agent_rule_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudWorkloadSecurityAgentRuleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :get_cloud_workload_security_agent_rule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#get_cloud_workload_security_agent_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Workload Protection policy.
    #
    # @see #get_csm_threats_agent_policy_with_http_info
    def get_csm_threats_agent_policy(policy_id, opts = {})
      data, _status_code, _headers = get_csm_threats_agent_policy_with_http_info(policy_id, opts)
      data
    end

    # Get a Workload Protection policy.
    #
    # Get the details of a specific Workload Protection policy.
    #
    # **Note**: This endpoint is not available for the Government (US1-FED) site. Please reference the (US1-FED) specific resource below.
    #
    # @param policy_id [String] The ID of the Agent policy
    # @param opts [Hash] the optional parameters
    # @return [Array<(CloudWorkloadSecurityAgentPolicyResponse, Integer, Hash)>] CloudWorkloadSecurityAgentPolicyResponse data, response status code and response headers
    def get_csm_threats_agent_policy_with_http_info(policy_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.get_csm_threats_agent_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling CSMThreatsAPI.get_csm_threats_agent_policy"
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/cws/policy/{policy_id}'.sub('{policy_id}', CGI.escape(policy_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudWorkloadSecurityAgentPolicyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :get_csm_threats_agent_policy,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#get_csm_threats_agent_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Workload Protection agent rule.
    #
    # @see #get_csm_threats_agent_rule_with_http_info
    def get_csm_threats_agent_rule(agent_rule_id, opts = {})
      data, _status_code, _headers = get_csm_threats_agent_rule_with_http_info(agent_rule_id, opts)
      data
    end

    # Get a Workload Protection agent rule.
    #
    # Get the details of a specific Workload Protection agent rule.
    #
    # **Note**: This endpoint is not available for the Government (US1-FED) site. Please reference the (US1-FED) specific resource below.
    #
    # @param agent_rule_id [String] The ID of the Agent rule
    # @param opts [Hash] the optional parameters
    # @option opts [String] :policy_id The ID of the Agent policy
    # @return [Array<(CloudWorkloadSecurityAgentRuleResponse, Integer, Hash)>] CloudWorkloadSecurityAgentRuleResponse data, response status code and response headers
    def get_csm_threats_agent_rule_with_http_info(agent_rule_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.get_csm_threats_agent_rule ...'
      end
      # verify the required parameter 'agent_rule_id' is set
      if @api_client.config.client_side_validation && agent_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'agent_rule_id' when calling CSMThreatsAPI.get_csm_threats_agent_rule"
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/cws/agent_rules/{agent_rule_id}'.sub('{agent_rule_id}', CGI.escape(agent_rule_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'policy_id'] = opts[:'policy_id'] if !opts[:'policy_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudWorkloadSecurityAgentRuleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :get_csm_threats_agent_rule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#get_csm_threats_agent_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Workload Protection agent rules (US1-FED).
    #
    # @see #list_cloud_workload_security_agent_rules_with_http_info
    def list_cloud_workload_security_agent_rules(opts = {})
      data, _status_code, _headers = list_cloud_workload_security_agent_rules_with_http_info(opts)
      data
    end

    # Get all Workload Protection agent rules (US1-FED).
    #
    # Get the list of agent rules.
    #
    # **Note**: This endpoint should only be used for the Government (US1-FED) site.
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(CloudWorkloadSecurityAgentRulesListResponse, Integer, Hash)>] CloudWorkloadSecurityAgentRulesListResponse data, response status code and response headers
    def list_cloud_workload_security_agent_rules_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.list_cloud_workload_security_agent_rules ...'
      end
      # resource path
      local_var_path = '/api/v2/security_monitoring/cloud_workload_security/agent_rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudWorkloadSecurityAgentRulesListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :list_cloud_workload_security_agent_rules,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#list_cloud_workload_security_agent_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Workload Protection policies.
    #
    # @see #list_csm_threats_agent_policies_with_http_info
    def list_csm_threats_agent_policies(opts = {})
      data, _status_code, _headers = list_csm_threats_agent_policies_with_http_info(opts)
      data
    end

    # Get all Workload Protection policies.
    #
    # Get the list of Workload Protection policies.
    #
    # **Note**: This endpoint is not available for the Government (US1-FED) site. Please reference the (US1-FED) specific resource below.
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(CloudWorkloadSecurityAgentPoliciesListResponse, Integer, Hash)>] CloudWorkloadSecurityAgentPoliciesListResponse data, response status code and response headers
    def list_csm_threats_agent_policies_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.list_csm_threats_agent_policies ...'
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/cws/policy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudWorkloadSecurityAgentPoliciesListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :list_csm_threats_agent_policies,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#list_csm_threats_agent_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Workload Protection agent rules.
    #
    # @see #list_csm_threats_agent_rules_with_http_info
    def list_csm_threats_agent_rules(opts = {})
      data, _status_code, _headers = list_csm_threats_agent_rules_with_http_info(opts)
      data
    end

    # Get all Workload Protection agent rules.
    #
    # Get the list of Workload Protection agent rules.
    #
    # **Note**: This endpoint is not available for the Government (US1-FED) site. Please reference the (US1-FED) specific resource below.
    #
    # @param opts [Hash] the optional parameters
    # @option opts [String] :policy_id The ID of the Agent policy
    # @return [Array<(CloudWorkloadSecurityAgentRulesListResponse, Integer, Hash)>] CloudWorkloadSecurityAgentRulesListResponse data, response status code and response headers
    def list_csm_threats_agent_rules_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.list_csm_threats_agent_rules ...'
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/cws/agent_rules'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'policy_id'] = opts[:'policy_id'] if !opts[:'policy_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudWorkloadSecurityAgentRulesListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :list_csm_threats_agent_rules,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#list_csm_threats_agent_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Workload Protection agent rule (US1-FED).
    #
    # @see #update_cloud_workload_security_agent_rule_with_http_info
    def update_cloud_workload_security_agent_rule(agent_rule_id, body, opts = {})
      data, _status_code, _headers = update_cloud_workload_security_agent_rule_with_http_info(agent_rule_id, body, opts)
      data
    end

    # Update a Workload Protection agent rule (US1-FED).
    #
    # Update a specific agent rule.
    # Returns the agent rule object when the request is successful.
    #
    # **Note**: This endpoint should only be used for the Government (US1-FED) site.
    #
    # @param agent_rule_id [String] The ID of the Agent rule
    # @param body [CloudWorkloadSecurityAgentRuleUpdateRequest] New definition of the agent rule
    # @param opts [Hash] the optional parameters
    # @return [Array<(CloudWorkloadSecurityAgentRuleResponse, Integer, Hash)>] CloudWorkloadSecurityAgentRuleResponse data, response status code and response headers
    def update_cloud_workload_security_agent_rule_with_http_info(agent_rule_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.update_cloud_workload_security_agent_rule ...'
      end
      # verify the required parameter 'agent_rule_id' is set
      if @api_client.config.client_side_validation && agent_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'agent_rule_id' when calling CSMThreatsAPI.update_cloud_workload_security_agent_rule"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CSMThreatsAPI.update_cloud_workload_security_agent_rule"
      end
      # resource path
      local_var_path = '/api/v2/security_monitoring/cloud_workload_security/agent_rules/{agent_rule_id}'.sub('{agent_rule_id}', CGI.escape(agent_rule_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CloudWorkloadSecurityAgentRuleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :update_cloud_workload_security_agent_rule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#update_cloud_workload_security_agent_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Workload Protection policy.
    #
    # @see #update_csm_threats_agent_policy_with_http_info
    def update_csm_threats_agent_policy(policy_id, body, opts = {})
      data, _status_code, _headers = update_csm_threats_agent_policy_with_http_info(policy_id, body, opts)
      data
    end

    # Update a Workload Protection policy.
    #
    # Update a specific Workload Protection policy.
    # Returns the policy object when the request is successful.
    #
    # **Note**: This endpoint is not available for the Government (US1-FED) site. Please reference the (US1-FED) specific resource below.
    #
    # @param policy_id [String] The ID of the Agent policy
    # @param body [CloudWorkloadSecurityAgentPolicyUpdateRequest] New definition of the Agent policy
    # @param opts [Hash] the optional parameters
    # @return [Array<(CloudWorkloadSecurityAgentPolicyResponse, Integer, Hash)>] CloudWorkloadSecurityAgentPolicyResponse data, response status code and response headers
    def update_csm_threats_agent_policy_with_http_info(policy_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.update_csm_threats_agent_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling CSMThreatsAPI.update_csm_threats_agent_policy"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CSMThreatsAPI.update_csm_threats_agent_policy"
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/cws/policy/{policy_id}'.sub('{policy_id}', CGI.escape(policy_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CloudWorkloadSecurityAgentPolicyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :update_csm_threats_agent_policy,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#update_csm_threats_agent_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Workload Protection agent rule.
    #
    # @see #update_csm_threats_agent_rule_with_http_info
    def update_csm_threats_agent_rule(agent_rule_id, body, opts = {})
      data, _status_code, _headers = update_csm_threats_agent_rule_with_http_info(agent_rule_id, body, opts)
      data
    end

    # Update a Workload Protection agent rule.
    #
    # Update a specific Workload Protection Agent rule.
    # Returns the agent rule object when the request is successful.
    #
    # **Note**: This endpoint is not available for the Government (US1-FED) site. Please reference the (US1-FED) specific resource below.
    #
    # @param agent_rule_id [String] The ID of the Agent rule
    # @param body [CloudWorkloadSecurityAgentRuleUpdateRequest] New definition of the agent rule
    # @param opts [Hash] the optional parameters
    # @option opts [String] :policy_id The ID of the Agent policy
    # @return [Array<(CloudWorkloadSecurityAgentRuleResponse, Integer, Hash)>] CloudWorkloadSecurityAgentRuleResponse data, response status code and response headers
    def update_csm_threats_agent_rule_with_http_info(agent_rule_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CSMThreatsAPI.update_csm_threats_agent_rule ...'
      end
      # verify the required parameter 'agent_rule_id' is set
      if @api_client.config.client_side_validation && agent_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'agent_rule_id' when calling CSMThreatsAPI.update_csm_threats_agent_rule"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CSMThreatsAPI.update_csm_threats_agent_rule"
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/cws/agent_rules/{agent_rule_id}'.sub('{agent_rule_id}', CGI.escape(agent_rule_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'policy_id'] = opts[:'policy_id'] if !opts[:'policy_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CloudWorkloadSecurityAgentRuleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :update_csm_threats_agent_rule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CSMThreatsAPI#update_csm_threats_agent_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
