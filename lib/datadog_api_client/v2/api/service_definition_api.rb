=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class ServiceDefinitionAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Create or update service definition.
    #
    # @see #create_or_update_service_definitions_with_http_info
    def create_or_update_service_definitions(body, opts = {})
      data, _status_code, _headers = create_or_update_service_definitions_with_http_info(body, opts)
      data
    end

    # Create or update service definition.
    #
    # Create or update service definition in the Datadog Service Catalog.
    #
    # @param body [ServiceDefinitionsCreateRequest] Service Definition YAML/JSON.
    # @param opts [Hash] the optional parameters
    # @return [Array<(ServiceDefinitionCreateResponse, Integer, Hash)>] ServiceDefinitionCreateResponse data, response status code and response headers
    def create_or_update_service_definitions_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDefinitionAPI.create_or_update_service_definitions ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServiceDefinitionAPI.create_or_update_service_definitions"
      end
      # resource path
      local_var_path = '/api/v2/services/definitions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDefinitionCreateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :create_or_update_service_definitions,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDefinitionAPI#create_or_update_service_definitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a single service definition.
    #
    # @see #delete_service_definition_with_http_info
    def delete_service_definition(service_name, opts = {})
      delete_service_definition_with_http_info(service_name, opts)
      nil
    end

    # Delete a single service definition.
    #
    # Delete a single service definition in the Datadog Service Catalog.
    #
    # @param service_name [String] The name of the service.
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_service_definition_with_http_info(service_name, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDefinitionAPI.delete_service_definition ...'
      end
      # verify the required parameter 'service_name' is set
      if @api_client.config.client_side_validation && service_name.nil?
        fail ArgumentError, "Missing the required parameter 'service_name' when calling ServiceDefinitionAPI.delete_service_definition"
      end
      # resource path
      local_var_path = '/api/v2/services/definitions/{service_name}'.sub('{service_name}', CGI.escape(service_name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_service_definition,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDefinitionAPI#delete_service_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a single service definition.
    #
    # @see #get_service_definition_with_http_info
    def get_service_definition(service_name, opts = {})
      data, _status_code, _headers = get_service_definition_with_http_info(service_name, opts)
      data
    end

    # Get a single service definition.
    #
    # Get a single service definition from the Datadog Service Catalog.
    #
    # @param service_name [String] The name of the service.
    # @param opts [Hash] the optional parameters
    # @option opts [ServiceDefinitionSchemaVersions] :schema_version The schema version desired in the response.
    # @return [Array<(ServiceDefinitionGetResponse, Integer, Hash)>] ServiceDefinitionGetResponse data, response status code and response headers
    def get_service_definition_with_http_info(service_name, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDefinitionAPI.get_service_definition ...'
      end
      # verify the required parameter 'service_name' is set
      if @api_client.config.client_side_validation && service_name.nil?
        fail ArgumentError, "Missing the required parameter 'service_name' when calling ServiceDefinitionAPI.get_service_definition"
      end
      allowable_values = ['v1', 'v2', 'v2.1', 'v2.2']
      if @api_client.config.client_side_validation && opts[:'schema_version'] && !allowable_values.include?(opts[:'schema_version'])
        fail ArgumentError, "invalid value for \"schema_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v2/services/definitions/{service_name}'.sub('{service_name}', CGI.escape(service_name.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'schema_version'] = opts[:'schema_version'] if !opts[:'schema_version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDefinitionGetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_service_definition,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDefinitionAPI#get_service_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all service definitions.
    #
    # @see #list_service_definitions_with_http_info
    def list_service_definitions(opts = {})
      data, _status_code, _headers = list_service_definitions_with_http_info(opts)
      data
    end

    # Get all service definitions.
    #
    # Get a list of all service definitions from the Datadog Service Catalog.
    #
    # @param opts [Hash] the optional parameters
    # @option opts [Integer] :page_size Size for a given page. The maximum allowed value is 100.
    # @option opts [Integer] :page_number Specific page number to return.
    # @option opts [ServiceDefinitionSchemaVersions] :schema_version The schema version desired in the response.
    # @return [Array<(ServiceDefinitionsListResponse, Integer, Hash)>] ServiceDefinitionsListResponse data, response status code and response headers
    def list_service_definitions_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceDefinitionAPI.list_service_definitions ...'
      end
      allowable_values = ['v1', 'v2', 'v2.1', 'v2.2']
      if @api_client.config.client_side_validation && opts[:'schema_version'] && !allowable_values.include?(opts[:'schema_version'])
        fail ArgumentError, "invalid value for \"schema_version\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v2/services/definitions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page[size]'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page[number]'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'schema_version'] = opts[:'schema_version'] if !opts[:'schema_version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServiceDefinitionsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :list_service_definitions,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceDefinitionAPI#list_service_definitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all service definitions.
    #
    # Provide a paginated version of {#list_service_definitions}, returning all items.
    #
    # To use it you need to use a block: list_service_definitions_with_pagination { |item| p item }
    #
    # @yield [ServiceDefinitionData] Paginated items
    def list_service_definitions_with_pagination(opts = {})
        api_version = "V2"
        page_size = @api_client.get_attribute_from_path(opts, "page_size", 10)
        @api_client.set_attribute_from_path(api_version, opts, "page_size", Integer, page_size)
        @api_client.set_attribute_from_path(api_version, opts, "page_number", Integer, 0)
        while true do
            response = list_service_definitions(opts)
            @api_client.get_attribute_from_path(response, "data").each { |item| yield(item) }
            if @api_client.get_attribute_from_path(response, "data").length < page_size
              break
            end
            @api_client.set_attribute_from_path(api_version, opts, "page_number", Integer, @api_client.get_attribute_from_path(opts, "page_number", 0) + 1)
        end
    end
  end
end
