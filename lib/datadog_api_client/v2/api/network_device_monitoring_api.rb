=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class NetworkDeviceMonitoringAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Get the device details.
    #
    # @see #get_device_with_http_info
    def get_device(device_id, opts = {})
      data, _status_code, _headers = get_device_with_http_info(device_id, opts)
      data
    end

    # Get the device details.
    #
    # Get the device details.
    #
    # @param device_id [String] The id of the device to fetch.
    # @param opts [Hash] the optional parameters
    # @return [Array<(GetDeviceResponse, Integer, Hash)>] GetDeviceResponse data, response status code and response headers
    def get_device_with_http_info(device_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkDeviceMonitoringAPI.get_device ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling NetworkDeviceMonitoringAPI.get_device"
      end
      # resource path
      local_var_path = '/api/v2/ndm/devices/{device_id}'.sub('{device_id}', CGI.escape(device_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDeviceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :get_device,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkDeviceMonitoringAPI#get_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of interfaces of the device.
    #
    # @see #get_interfaces_with_http_info
    def get_interfaces(device_id, opts = {})
      data, _status_code, _headers = get_interfaces_with_http_info(device_id, opts)
      data
    end

    # Get the list of interfaces of the device.
    #
    # Get the list of interfaces of the device.
    #
    # @param device_id [String] The ID of the device to get interfaces from.
    # @param opts [Hash] the optional parameters
    # @return [Array<(GetInterfacesResponse, Integer, Hash)>] GetInterfacesResponse data, response status code and response headers
    def get_interfaces_with_http_info(device_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkDeviceMonitoringAPI.get_interfaces ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling NetworkDeviceMonitoringAPI.get_interfaces"
      end
      # resource path
      local_var_path = '/api/v2/ndm/interfaces'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'device_id'] = device_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetInterfacesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :get_interfaces,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkDeviceMonitoringAPI#get_interfaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of devices.
    #
    # @see #list_devices_with_http_info
    def list_devices(opts = {})
      data, _status_code, _headers = list_devices_with_http_info(opts)
      data
    end

    # Get the list of devices.
    #
    # Get the list of devices.
    #
    # @param opts [Hash] the optional parameters
    # @option opts [Integer] :page_number The page number to fetch.
    # @option opts [Integer] :page_size The number of devices to return per page.
    # @option opts [String] :sort The field to sort the devices by.
    # @option opts [String] :filter_tag Filter devices by tag.
    # @return [Array<(ListDevicesResponse, Integer, Hash)>] ListDevicesResponse data, response status code and response headers
    def list_devices_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkDeviceMonitoringAPI.list_devices ...'
      end
      # resource path
      local_var_path = '/api/v2/ndm/devices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page[number]'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'page[size]'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter[tag]'] = opts[:'filter_tag'] if !opts[:'filter_tag'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListDevicesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :list_devices,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkDeviceMonitoringAPI#list_devices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of tags for a device.
    #
    # @see #list_device_user_tags_with_http_info
    def list_device_user_tags(device_id, opts = {})
      data, _status_code, _headers = list_device_user_tags_with_http_info(device_id, opts)
      data
    end

    # Get the list of tags for a device.
    #
    # Get the list of tags for a device.
    #
    # @param device_id [String] The id of the device to fetch tags for.
    # @param opts [Hash] the optional parameters
    # @return [Array<(ListTagsResponse, Integer, Hash)>] ListTagsResponse data, response status code and response headers
    def list_device_user_tags_with_http_info(device_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkDeviceMonitoringAPI.list_device_user_tags ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling NetworkDeviceMonitoringAPI.list_device_user_tags"
      end
      # resource path
      local_var_path = '/api/v2/ndm/tags/devices/{device_id}'.sub('{device_id}', CGI.escape(device_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListTagsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :list_device_user_tags,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkDeviceMonitoringAPI#list_device_user_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the tags for a device.
    #
    # @see #update_device_user_tags_with_http_info
    def update_device_user_tags(device_id, body, opts = {})
      data, _status_code, _headers = update_device_user_tags_with_http_info(device_id, body, opts)
      data
    end

    # Update the tags for a device.
    #
    # Update the tags for a device.
    #
    # @param device_id [String] The id of the device to update tags for.
    # @param body [ListTagsResponse] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(ListTagsResponse, Integer, Hash)>] ListTagsResponse data, response status code and response headers
    def update_device_user_tags_with_http_info(device_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NetworkDeviceMonitoringAPI.update_device_user_tags ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling NetworkDeviceMonitoringAPI.update_device_user_tags"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NetworkDeviceMonitoringAPI.update_device_user_tags"
      end
      # resource path
      local_var_path = '/api/v2/ndm/tags/devices/{device_id}'.sub('{device_id}', CGI.escape(device_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ListTagsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :update_device_user_tags,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NetworkDeviceMonitoringAPI#update_device_user_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
