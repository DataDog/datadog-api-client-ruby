=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class SpaAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Get SPA Recommendations.
    #
    # @see #get_spa_recommendations_with_http_info
    def get_spa_recommendations(shard, service, opts = {})
      data, _status_code, _headers = get_spa_recommendations_with_http_info(shard, service, opts)
      data
    end

    # Get SPA Recommendations.
    #
    # Retrieve resource recommendations for a Spark job. The caller (Spark Gateway or DJM UI) provides a service name and shard identifier, and SPA returns structured recommendations for driver and executor resources.
    #
    # @param shard [String] The shard tag for a spark job, which differentiates jobs within the same service that have different resource needs
    # @param service [String] The service name for a spark job
    # @param opts [Hash] the optional parameters
    # @return [Array<(RecommendationDocument, Integer, Hash)>] RecommendationDocument data, response status code and response headers
    def get_spa_recommendations_with_http_info(shard, service, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.get_spa_recommendations".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.get_spa_recommendations")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.get_spa_recommendations"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpaAPI.get_spa_recommendations ...'
      end
      # verify the required parameter 'shard' is set
      if @api_client.config.client_side_validation && shard.nil?
        fail ArgumentError, "Missing the required parameter 'shard' when calling SpaAPI.get_spa_recommendations"
      end
      # verify the required parameter 'service' is set
      if @api_client.config.client_side_validation && service.nil?
        fail ArgumentError, "Missing the required parameter 'service' when calling SpaAPI.get_spa_recommendations"
      end
      # resource path
      local_var_path = '/api/v2/spa/recommendations/{service}/{shard}'.sub('{shard}', CGI.escape(shard.to_s).gsub('%2F', '/')).sub('{service}', CGI.escape(service.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RecommendationDocument'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :get_spa_recommendations,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpaAPI#get_spa_recommendations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
