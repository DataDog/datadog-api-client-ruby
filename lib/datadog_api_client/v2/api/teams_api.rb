=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module DatadogAPIClient::V2
  class TeamsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new team
    # Creates a new team.
    # @param body [TeamCreateRequest] Teams Payload.
    # @param [Hash] opts the optional parameters
    # @return [TeamResponse]
    def create_team(body, opts = {})
      data, _status_code, _headers = create_team_with_http_info(body, opts)
      data
    end

    # Create a new team
    # Creates a new team.
    # @param body [TeamCreateRequest] Teams Payload.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamResponse, Integer, Hash)>] TeamResponse data, response status code and response headers
    def create_team_with_http_info(body, opts = {})

      if @api_client.config.unstable_operations.has_key?(:create_team)
        unstable_enabled = @api_client.config.unstable_operations[:create_team]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "create_team")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "create_team"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.create_team ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TeamsApi.create_team"
      end
      # resource path
      local_var_path = '/api/v2/teams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:return_type] || 'TeamResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"TeamsApi.create_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#create_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing team
    # Deletes an existing team.
    # @param team_id [String] The ID of the team.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_team(team_id, opts = {})
      delete_team_with_http_info(team_id, opts)
      nil
    end

    # Delete an existing team
    # Deletes an existing team.
    # @param team_id [String] The ID of the team.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_team_with_http_info(team_id, opts = {})

      if @api_client.config.unstable_operations.has_key?(:delete_team)
        unstable_enabled = @api_client.config.unstable_operations[:delete_team]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "delete_team")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "delete_team"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.delete_team ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.delete_team"
      end
      # resource path
      local_var_path = '/api/v2/teams/{team_id}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}
      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"TeamsApi.delete_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => nil,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#delete_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a team
    # Get details of a team. If the `include[users]` query parameter is provided, the included attribute will contain the users related to these teams.
    # @param team_id [String] The ID of the team.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Specifies which types of related objects should be included in the response.
    # @return [TeamResponse]
    def get_team(team_id, opts = {})
      data, _status_code, _headers = get_team_with_http_info(team_id, opts)
      data
    end

    # Get details of a team
    # Get details of a team. If the &#x60;include[users]&#x60; query parameter is provided, the included attribute will contain the users related to these teams.
    # @param team_id [String] The ID of the team.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Specifies which types of related objects should be included in the response.
    # @return [Array<(TeamResponse, Integer, Hash)>] TeamResponse data, response status code and response headers
    def get_team_with_http_info(team_id, opts = {})

      if @api_client.config.unstable_operations.has_key?(:get_team)
        unstable_enabled = @api_client.config.unstable_operations[:get_team]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "get_team")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "get_team"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.get_team ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.get_team"
      end
      allowable_values = ["users"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v2/teams/{team_id}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}
      # return_type
      return_type = opts[:return_type] || 'TeamResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"TeamsApi.get_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => nil,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all teams
    # Get all teams for the requesting user's organization. If the `include[users]` query parameter is provided, the included attribute will contain the users related to these teams.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Specifies which types of related objects should be included in the response.
    # @option opts [Integer] :page_size Size for a given page. (default to 10)
    # @option opts [Integer] :page_offset Specific offset to use as the beginning of the returned page. (default to 0)
    # @return [TeamsResponse]
    def get_teams(opts = {})
      data, _status_code, _headers = get_teams_with_http_info(opts)
      data
    end

    # Get a list of all teams
    # Get all teams for the requesting user&#39;s organization. If the &#x60;include[users]&#x60; query parameter is provided, the included attribute will contain the users related to these teams.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Specifies which types of related objects should be included in the response.
    # @option opts [Integer] :page_size Size for a given page.
    # @option opts [Integer] :page_offset Specific offset to use as the beginning of the returned page.
    # @return [Array<(TeamsResponse, Integer, Hash)>] TeamsResponse data, response status code and response headers
    def get_teams_with_http_info(opts = {})

      if @api_client.config.unstable_operations.has_key?(:get_teams)
        unstable_enabled = @api_client.config.unstable_operations[:get_teams]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "get_teams")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "get_teams"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.get_teams ...'
      end
      allowable_values = ["users"]
      if @api_client.config.client_side_validation && opts[:'include'] && !allowable_values.include?(opts[:'include'])
        fail ArgumentError, "invalid value for \"include\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v2/teams'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'page[size]'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page[offset]'] = opts[:'page_offset'] if !opts[:'page_offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}
      # return_type
      return_type = opts[:return_type] || 'TeamsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"TeamsApi.get_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => nil,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing team
    # Updates an existing team. Only provide the attributes which should be updated as this request is a partial update.
    # @param team_id [String] The ID of the team.
    # @param body [TeamUpdateRequest] Teams Payload.
    # @param [Hash] opts the optional parameters
    # @return [TeamResponse]
    def update_team(team_id, body, opts = {})
      data, _status_code, _headers = update_team_with_http_info(team_id, body, opts)
      data
    end

    # Update an existing team
    # Updates an existing team. Only provide the attributes which should be updated as this request is a partial update.
    # @param team_id [String] The ID of the team.
    # @param body [TeamUpdateRequest] Teams Payload.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamResponse, Integer, Hash)>] TeamResponse data, response status code and response headers
    def update_team_with_http_info(team_id, body, opts = {})

      if @api_client.config.unstable_operations.has_key?(:update_team)
        unstable_enabled = @api_client.config.unstable_operations[:update_team]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "update_team")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "update_team"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamsApi.update_team ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.update_team"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TeamsApi.update_team"
      end
      # resource path
      local_var_path = '/api/v2/teams/{team_id}'.sub('{' + 'team_id' + '}', CGI.escape(team_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:return_type] || 'TeamResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"TeamsApi.update_team",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#update_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
