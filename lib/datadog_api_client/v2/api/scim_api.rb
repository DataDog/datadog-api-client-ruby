=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class ScimAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Create SCIM group.
    #
    # @see #create_scim_group_with_http_info
    def create_scim_group(opts = {})
      data, _status_code, _headers = create_scim_group_with_http_info(opts)
      data
    end

    # Create SCIM group.
    # @param opts [Hash] the optional parameters
    # @option opts [ExternalUserGroup] :body 
    # @return [Array<(ExternalUserGroup, Integer, Hash)>] ExternalUserGroup data, response status code and response headers
    def create_scim_group_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScimAPI.create_scim_group ...'
      end
      # resource path
      local_var_path = '/api/v2/scim/Groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalUserGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :create_scim_group,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScimAPI#create_scim_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete SCIM group.
    #
    # @see #delete_scim_group_with_http_info
    def delete_scim_group(group_id, opts = {})
      delete_scim_group_with_http_info(group_id, opts)
      nil
    end

    # Delete SCIM group.
    # @param group_id [String] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_scim_group_with_http_info(group_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScimAPI.delete_scim_group ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ScimAPI.delete_scim_group"
      end
      # resource path
      local_var_path = '/api/v2/scim/Groups/{group_id}'.sub('{group_id}', CGI.escape(group_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_scim_group,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScimAPI#delete_scim_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SCIM group.
    #
    # @see #get_scim_group_with_http_info
    def get_scim_group(group_id, opts = {})
      data, _status_code, _headers = get_scim_group_with_http_info(group_id, opts)
      data
    end

    # Get SCIM group.
    # @param group_id [String] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(ExternalUserGroup, Integer, Hash)>] ExternalUserGroup data, response status code and response headers
    def get_scim_group_with_http_info(group_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScimAPI.get_scim_group ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ScimAPI.get_scim_group"
      end
      # resource path
      local_var_path = '/api/v2/scim/Groups/{group_id}'.sub('{group_id}', CGI.escape(group_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalUserGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_scim_group,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScimAPI#get_scim_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List SCIM groups.
    #
    # @see #list_scim_groups_with_http_info
    def list_scim_groups(opts = {})
      data, _status_code, _headers = list_scim_groups_with_http_info(opts)
      data
    end

    # List SCIM groups.
    #
    # List SCIM groups in the organization.
    # Results are paginated by `startIndex` and `count` parameters.
    # Results can be narrowed down by the `filter` parameter.
    #
    # @param opts [Hash] the optional parameters
    # @option opts [Integer] :start_index Specifies the start index to fetch the results (1-indexed).
    # @option opts [Integer] :count Specifies the number of groups to be returned.
    # @option opts [String] :filter Specifies the url encoded filter to use to narrow down the results. Filters can be in the form of `displayName eq <group name>` or `externalId eq <external id of group>` or `id eq <group id> and members eq <user uuid>` or `members eq <user uuid> and id eq <group id>`.
    # @return [Array<(ListExternalUserGroupResponse, Integer, Hash)>] ListExternalUserGroupResponse data, response status code and response headers
    def list_scim_groups_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScimAPI.list_scim_groups ...'
      end
      # resource path
      local_var_path = '/api/v2/scim/Groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startIndex'] = opts[:'start_index'] if !opts[:'start_index'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListExternalUserGroupResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :list_scim_groups,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScimAPI#list_scim_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch SCIM group.
    #
    # @see #patch_scim_group_with_http_info
    def patch_scim_group(group_id, opts = {})
      data, _status_code, _headers = patch_scim_group_with_http_info(group_id, opts)
      data
    end

    # Patch SCIM group.
    # @param group_id [String] 
    # @param opts [Hash] the optional parameters
    # @option opts [ExternalUserGroupPatchRequest] :body 
    # @return [Array<(ExternalUserGroup, Integer, Hash)>] ExternalUserGroup data, response status code and response headers
    def patch_scim_group_with_http_info(group_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScimAPI.patch_scim_group ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ScimAPI.patch_scim_group"
      end
      # resource path
      local_var_path = '/api/v2/scim/Groups/{group_id}'.sub('{group_id}', CGI.escape(group_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalUserGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :patch_scim_group,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScimAPI#patch_scim_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update SCIM group.
    #
    # @see #update_scim_group_with_http_info
    def update_scim_group(group_id, opts = {})
      data, _status_code, _headers = update_scim_group_with_http_info(group_id, opts)
      data
    end

    # Update SCIM group.
    # @param group_id [String] 
    # @param opts [Hash] the optional parameters
    # @option opts [ExternalUserGroup] :body 
    # @return [Array<(ExternalUserGroup, Integer, Hash)>] ExternalUserGroup data, response status code and response headers
    def update_scim_group_with_http_info(group_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScimAPI.update_scim_group ...'
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling ScimAPI.update_scim_group"
      end
      # resource path
      local_var_path = '/api/v2/scim/Groups/{group_id}'.sub('{group_id}', CGI.escape(group_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ExternalUserGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_scim_group,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Put, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScimAPI#update_scim_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
