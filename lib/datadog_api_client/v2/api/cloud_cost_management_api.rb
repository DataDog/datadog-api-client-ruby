=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class CloudCostManagementAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Create Cloud Cost Management AWS CUR config.
    #
    # @see #create_cost_awscur_config_with_http_info
    def create_cost_awscur_config(body, opts = {})
      data, _status_code, _headers = create_cost_awscur_config_with_http_info(body, opts)
      data
    end

    # Create Cloud Cost Management AWS CUR config.
    #
    # Create a Cloud Cost Management account for an AWS CUR config.
    #
    # @param body [AwsCURConfigPostRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(AwsCurConfigResponse, Integer, Hash)>] AwsCurConfigResponse data, response status code and response headers
    def create_cost_awscur_config_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.create_cost_awscur_config ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.create_cost_awscur_config"
      end
      # resource path
      local_var_path = '/api/v2/cost/aws_cur_config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AwsCurConfigResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :create_cost_awscur_config,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#create_cost_awscur_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Cloud Cost Management Azure configs.
    #
    # @see #create_cost_azure_uc_configs_with_http_info
    def create_cost_azure_uc_configs(body, opts = {})
      data, _status_code, _headers = create_cost_azure_uc_configs_with_http_info(body, opts)
      data
    end

    # Create Cloud Cost Management Azure configs.
    #
    # Create a Cloud Cost Management account for an Azure config.
    #
    # @param body [AzureUCConfigPostRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(AzureUCConfigPairsResponse, Integer, Hash)>] AzureUCConfigPairsResponse data, response status code and response headers
    def create_cost_azure_uc_configs_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.create_cost_azure_uc_configs ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.create_cost_azure_uc_configs"
      end
      # resource path
      local_var_path = '/api/v2/cost/azure_uc_config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AzureUCConfigPairsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :create_cost_azure_uc_configs,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#create_cost_azure_uc_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Google Cloud Usage Cost config.
    #
    # @see #create_cost_gcp_usage_cost_config_with_http_info
    def create_cost_gcp_usage_cost_config(body, opts = {})
      data, _status_code, _headers = create_cost_gcp_usage_cost_config_with_http_info(body, opts)
      data
    end

    # Create Google Cloud Usage Cost config.
    #
    # Create a Cloud Cost Management account for an Google Cloud Usage Cost config.
    #
    # @param body [GCPUsageCostConfigPostRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(GCPUsageCostConfigResponse, Integer, Hash)>] GCPUsageCostConfigResponse data, response status code and response headers
    def create_cost_gcp_usage_cost_config_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.create_cost_gcp_usage_cost_config ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.create_cost_gcp_usage_cost_config"
      end
      # resource path
      local_var_path = '/api/v2/cost/gcp_uc_config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GCPUsageCostConfigResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :create_cost_gcp_usage_cost_config,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#create_cost_gcp_usage_cost_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create custom allocation rule.
    #
    # @see #create_custom_allocation_rule_with_http_info
    def create_custom_allocation_rule(body, opts = {})
      data, _status_code, _headers = create_custom_allocation_rule_with_http_info(body, opts)
      data
    end

    # Create custom allocation rule.
    #
    # Create a new custom allocation rule with the specified filters and allocation strategy.
    #
    # **Strategy Methods:**
    # - **PROPORTIONAL/EVEN**: Allocates costs proportionally/evenly based on existing costs. Requires: granularity, allocated_by_tag_keys. Optional: based_on_costs, allocated_by_filters, evaluate_grouped_by_tag_keys, evaluate_grouped_by_filters.
    # - **PROPORTIONAL_TIMESERIES/EVEN_TIMESERIES**: Allocates based on timeseries data. Requires: granularity, based_on_timeseries. Optional: evaluate_grouped_by_tag_keys.
    # - **PERCENT**: Allocates fixed percentages to specific tags. Requires: allocated_by (array of percentage allocations).
    #
    # **Filter Conditions:**
    # - Use **value** for single-value conditions: "is", "is not", "contains", "does not contain", "=", "!=", "like", "not like", "is all values", "is untagged"
    # - Use **values** for multi-value conditions: "in", "not in"
    # - Cannot use both value and values simultaneously.
    #
    # **Supported operators**: is, is not, is all values, is untagged, contains, does not contain, in, not in, =, !=, like, not like
    #
    # @param body [ArbitraryCostUpsertRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(ArbitraryRuleResponse, Integer, Hash)>] ArbitraryRuleResponse data, response status code and response headers
    def create_custom_allocation_rule_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.create_custom_allocation_rule ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.create_custom_allocation_rule"
      end
      # resource path
      local_var_path = '/api/v2/cost/arbitrary_rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ArbitraryRuleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :create_custom_allocation_rule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#create_custom_allocation_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create tag pipeline ruleset.
    #
    # @see #create_tag_pipelines_ruleset_with_http_info
    def create_tag_pipelines_ruleset(body, opts = {})
      data, _status_code, _headers = create_tag_pipelines_ruleset_with_http_info(body, opts)
      data
    end

    # Create tag pipeline ruleset.
    #
    # Create a new tag pipeline ruleset with the specified rules and configuration
    #
    # @param body [CreateRulesetRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(RulesetResp, Integer, Hash)>] RulesetResp data, response status code and response headers
    def create_tag_pipelines_ruleset_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.create_tag_pipelines_ruleset ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.create_tag_pipelines_ruleset"
      end
      # resource path
      local_var_path = '/api/v2/tags/enrichment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RulesetResp'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :create_tag_pipelines_ruleset,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#create_tag_pipelines_ruleset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a budget.
    #
    # @see #delete_budget_with_http_info
    def delete_budget(budget_id, opts = {})
      delete_budget_with_http_info(budget_id, opts)
      nil
    end

    # Delete a budget.
    #
    # Delete a budget.
    #
    # @param budget_id [String] Budget id.
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_budget_with_http_info(budget_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.delete_budget ...'
      end
      # verify the required parameter 'budget_id' is set
      if @api_client.config.client_side_validation && budget_id.nil?
        fail ArgumentError, "Missing the required parameter 'budget_id' when calling CloudCostManagementAPI.delete_budget"
      end
      # resource path
      local_var_path = '/api/v2/cost/budget/{budget_id}'.sub('{budget_id}', CGI.escape(budget_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_budget,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#delete_budget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Cloud Cost Management AWS CUR config.
    #
    # @see #delete_cost_awscur_config_with_http_info
    def delete_cost_awscur_config(cloud_account_id, opts = {})
      delete_cost_awscur_config_with_http_info(cloud_account_id, opts)
      nil
    end

    # Delete Cloud Cost Management AWS CUR config.
    #
    # Archive a Cloud Cost Management Account.
    #
    # @param cloud_account_id [Integer] Cloud Account id.
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_cost_awscur_config_with_http_info(cloud_account_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.delete_cost_awscur_config ...'
      end
      # verify the required parameter 'cloud_account_id' is set
      if @api_client.config.client_side_validation && cloud_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_account_id' when calling CloudCostManagementAPI.delete_cost_awscur_config"
      end
      # resource path
      local_var_path = '/api/v2/cost/aws_cur_config/{cloud_account_id}'.sub('{cloud_account_id}', CGI.escape(cloud_account_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_cost_awscur_config,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#delete_cost_awscur_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Cloud Cost Management Azure config.
    #
    # @see #delete_cost_azure_uc_config_with_http_info
    def delete_cost_azure_uc_config(cloud_account_id, opts = {})
      delete_cost_azure_uc_config_with_http_info(cloud_account_id, opts)
      nil
    end

    # Delete Cloud Cost Management Azure config.
    #
    # Archive a Cloud Cost Management Account.
    #
    # @param cloud_account_id [Integer] Cloud Account id.
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_cost_azure_uc_config_with_http_info(cloud_account_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.delete_cost_azure_uc_config ...'
      end
      # verify the required parameter 'cloud_account_id' is set
      if @api_client.config.client_side_validation && cloud_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_account_id' when calling CloudCostManagementAPI.delete_cost_azure_uc_config"
      end
      # resource path
      local_var_path = '/api/v2/cost/azure_uc_config/{cloud_account_id}'.sub('{cloud_account_id}', CGI.escape(cloud_account_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_cost_azure_uc_config,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#delete_cost_azure_uc_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Google Cloud Usage Cost config.
    #
    # @see #delete_cost_gcp_usage_cost_config_with_http_info
    def delete_cost_gcp_usage_cost_config(cloud_account_id, opts = {})
      delete_cost_gcp_usage_cost_config_with_http_info(cloud_account_id, opts)
      nil
    end

    # Delete Google Cloud Usage Cost config.
    #
    # Archive a Cloud Cost Management account.
    #
    # @param cloud_account_id [Integer] Cloud Account id.
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_cost_gcp_usage_cost_config_with_http_info(cloud_account_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.delete_cost_gcp_usage_cost_config ...'
      end
      # verify the required parameter 'cloud_account_id' is set
      if @api_client.config.client_side_validation && cloud_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_account_id' when calling CloudCostManagementAPI.delete_cost_gcp_usage_cost_config"
      end
      # resource path
      local_var_path = '/api/v2/cost/gcp_uc_config/{cloud_account_id}'.sub('{cloud_account_id}', CGI.escape(cloud_account_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_cost_gcp_usage_cost_config,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#delete_cost_gcp_usage_cost_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete custom allocation rule.
    #
    # @see #delete_custom_allocation_rule_with_http_info
    def delete_custom_allocation_rule(rule_id, opts = {})
      delete_custom_allocation_rule_with_http_info(rule_id, opts)
      nil
    end

    # Delete custom allocation rule.
    #
    # Delete a custom allocation rule - Delete an existing custom allocation rule by its ID
    #
    # @param rule_id [Integer] The unique identifier of the custom allocation rule
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_custom_allocation_rule_with_http_info(rule_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.delete_custom_allocation_rule ...'
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling CloudCostManagementAPI.delete_custom_allocation_rule"
      end
      # resource path
      local_var_path = '/api/v2/cost/arbitrary_rule/{rule_id}'.sub('{rule_id}', CGI.escape(rule_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_custom_allocation_rule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#delete_custom_allocation_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Custom Costs file.
    #
    # @see #delete_custom_costs_file_with_http_info
    def delete_custom_costs_file(file_id, opts = {})
      delete_custom_costs_file_with_http_info(file_id, opts)
      nil
    end

    # Delete Custom Costs file.
    #
    # Delete the specified Custom Costs file.
    #
    # @param file_id [String] File ID.
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_custom_costs_file_with_http_info(file_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.delete_custom_costs_file ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling CloudCostManagementAPI.delete_custom_costs_file"
      end
      # resource path
      local_var_path = '/api/v2/cost/custom_costs/{file_id}'.sub('{file_id}', CGI.escape(file_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_custom_costs_file,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#delete_custom_costs_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete tag pipeline ruleset.
    #
    # @see #delete_tag_pipelines_ruleset_with_http_info
    def delete_tag_pipelines_ruleset(ruleset_id, opts = {})
      delete_tag_pipelines_ruleset_with_http_info(ruleset_id, opts)
      nil
    end

    # Delete tag pipeline ruleset.
    #
    # Delete a tag pipeline ruleset - Delete an existing tag pipeline ruleset by its ID
    #
    # @param ruleset_id [String] The unique identifier of the ruleset
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_tag_pipelines_ruleset_with_http_info(ruleset_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.delete_tag_pipelines_ruleset ...'
      end
      # verify the required parameter 'ruleset_id' is set
      if @api_client.config.client_side_validation && ruleset_id.nil?
        fail ArgumentError, "Missing the required parameter 'ruleset_id' when calling CloudCostManagementAPI.delete_tag_pipelines_ruleset"
      end
      # resource path
      local_var_path = '/api/v2/tags/enrichment/{ruleset_id}'.sub('{ruleset_id}', CGI.escape(ruleset_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_tag_pipelines_ruleset,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#delete_tag_pipelines_ruleset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a budget.
    #
    # @see #get_budget_with_http_info
    def get_budget(budget_id, opts = {})
      data, _status_code, _headers = get_budget_with_http_info(budget_id, opts)
      data
    end

    # Get a budget.
    #
    # Get a budget.
    #
    # @param budget_id [String] Budget id.
    # @param opts [Hash] the optional parameters
    # @return [Array<(BudgetWithEntries, Integer, Hash)>] BudgetWithEntries data, response status code and response headers
    def get_budget_with_http_info(budget_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.get_budget ...'
      end
      # verify the required parameter 'budget_id' is set
      if @api_client.config.client_side_validation && budget_id.nil?
        fail ArgumentError, "Missing the required parameter 'budget_id' when calling CloudCostManagementAPI.get_budget"
      end
      # resource path
      local_var_path = '/api/v2/cost/budget/{budget_id}'.sub('{budget_id}', CGI.escape(budget_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BudgetWithEntries'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_budget,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#get_budget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get cost AWS CUR config.
    #
    # @see #get_cost_awscur_config_with_http_info
    def get_cost_awscur_config(cloud_account_id, opts = {})
      data, _status_code, _headers = get_cost_awscur_config_with_http_info(cloud_account_id, opts)
      data
    end

    # Get cost AWS CUR config.
    #
    # Get a specific AWS CUR config.
    #
    # @param cloud_account_id [Integer] The unique identifier of the cloud account
    # @param opts [Hash] the optional parameters
    # @return [Array<(AwsCurConfigResponse, Integer, Hash)>] AwsCurConfigResponse data, response status code and response headers
    def get_cost_awscur_config_with_http_info(cloud_account_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.get_cost_awscur_config ...'
      end
      # verify the required parameter 'cloud_account_id' is set
      if @api_client.config.client_side_validation && cloud_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_account_id' when calling CloudCostManagementAPI.get_cost_awscur_config"
      end
      # resource path
      local_var_path = '/api/v2/cost/aws_cur_config/{cloud_account_id}'.sub('{cloud_account_id}', CGI.escape(cloud_account_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AwsCurConfigResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_cost_awscur_config,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#get_cost_awscur_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get cost Azure UC config.
    #
    # @see #get_cost_azure_uc_config_with_http_info
    def get_cost_azure_uc_config(cloud_account_id, opts = {})
      data, _status_code, _headers = get_cost_azure_uc_config_with_http_info(cloud_account_id, opts)
      data
    end

    # Get cost Azure UC config.
    #
    # Get a specific Azure config.
    #
    # @param cloud_account_id [Integer] The unique identifier of the cloud account
    # @param opts [Hash] the optional parameters
    # @return [Array<(UCConfigPair, Integer, Hash)>] UCConfigPair data, response status code and response headers
    def get_cost_azure_uc_config_with_http_info(cloud_account_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.get_cost_azure_uc_config ...'
      end
      # verify the required parameter 'cloud_account_id' is set
      if @api_client.config.client_side_validation && cloud_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_account_id' when calling CloudCostManagementAPI.get_cost_azure_uc_config"
      end
      # resource path
      local_var_path = '/api/v2/cost/azure_uc_config/{cloud_account_id}'.sub('{cloud_account_id}', CGI.escape(cloud_account_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UCConfigPair'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_cost_azure_uc_config,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#get_cost_azure_uc_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Google Cloud Usage Cost config.
    #
    # @see #get_cost_gcp_usage_cost_config_with_http_info
    def get_cost_gcp_usage_cost_config(cloud_account_id, opts = {})
      data, _status_code, _headers = get_cost_gcp_usage_cost_config_with_http_info(cloud_account_id, opts)
      data
    end

    # Get Google Cloud Usage Cost config.
    #
    # Get a specific Google Cloud Usage Cost config.
    #
    # @param cloud_account_id [Integer] The unique identifier of the cloud account
    # @param opts [Hash] the optional parameters
    # @return [Array<(GcpUcConfigResponse, Integer, Hash)>] GcpUcConfigResponse data, response status code and response headers
    def get_cost_gcp_usage_cost_config_with_http_info(cloud_account_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.get_cost_gcp_usage_cost_config ...'
      end
      # verify the required parameter 'cloud_account_id' is set
      if @api_client.config.client_side_validation && cloud_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_account_id' when calling CloudCostManagementAPI.get_cost_gcp_usage_cost_config"
      end
      # resource path
      local_var_path = '/api/v2/cost/gcp_uc_config/{cloud_account_id}'.sub('{cloud_account_id}', CGI.escape(cloud_account_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GcpUcConfigResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_cost_gcp_usage_cost_config,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#get_cost_gcp_usage_cost_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get custom allocation rule.
    #
    # @see #get_custom_allocation_rule_with_http_info
    def get_custom_allocation_rule(rule_id, opts = {})
      data, _status_code, _headers = get_custom_allocation_rule_with_http_info(rule_id, opts)
      data
    end

    # Get custom allocation rule.
    #
    # Get a specific custom allocation rule - Retrieve a specific custom allocation rule by its ID
    #
    # @param rule_id [Integer] The unique identifier of the custom allocation rule
    # @param opts [Hash] the optional parameters
    # @return [Array<(ArbitraryRuleResponse, Integer, Hash)>] ArbitraryRuleResponse data, response status code and response headers
    def get_custom_allocation_rule_with_http_info(rule_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.get_custom_allocation_rule ...'
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling CloudCostManagementAPI.get_custom_allocation_rule"
      end
      # resource path
      local_var_path = '/api/v2/cost/arbitrary_rule/{rule_id}'.sub('{rule_id}', CGI.escape(rule_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ArbitraryRuleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_custom_allocation_rule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#get_custom_allocation_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Custom Costs file.
    #
    # @see #get_custom_costs_file_with_http_info
    def get_custom_costs_file(file_id, opts = {})
      data, _status_code, _headers = get_custom_costs_file_with_http_info(file_id, opts)
      data
    end

    # Get Custom Costs file.
    #
    # Fetch the specified Custom Costs file.
    #
    # @param file_id [String] File ID.
    # @param opts [Hash] the optional parameters
    # @return [Array<(CustomCostsFileGetResponse, Integer, Hash)>] CustomCostsFileGetResponse data, response status code and response headers
    def get_custom_costs_file_with_http_info(file_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.get_custom_costs_file ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling CloudCostManagementAPI.get_custom_costs_file"
      end
      # resource path
      local_var_path = '/api/v2/cost/custom_costs/{file_id}'.sub('{file_id}', CGI.escape(file_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomCostsFileGetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_custom_costs_file,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#get_custom_costs_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a tag pipeline ruleset.
    #
    # @see #get_tag_pipelines_ruleset_with_http_info
    def get_tag_pipelines_ruleset(ruleset_id, opts = {})
      data, _status_code, _headers = get_tag_pipelines_ruleset_with_http_info(ruleset_id, opts)
      data
    end

    # Get a tag pipeline ruleset.
    #
    # Get a specific tag pipeline ruleset - Retrieve a specific tag pipeline ruleset by its ID
    #
    # @param ruleset_id [String] The unique identifier of the ruleset
    # @param opts [Hash] the optional parameters
    # @return [Array<(RulesetResp, Integer, Hash)>] RulesetResp data, response status code and response headers
    def get_tag_pipelines_ruleset_with_http_info(ruleset_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.get_tag_pipelines_ruleset ...'
      end
      # verify the required parameter 'ruleset_id' is set
      if @api_client.config.client_side_validation && ruleset_id.nil?
        fail ArgumentError, "Missing the required parameter 'ruleset_id' when calling CloudCostManagementAPI.get_tag_pipelines_ruleset"
      end
      # resource path
      local_var_path = '/api/v2/tags/enrichment/{ruleset_id}'.sub('{ruleset_id}', CGI.escape(ruleset_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RulesetResp'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_tag_pipelines_ruleset,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#get_tag_pipelines_ruleset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List budgets.
    #
    # @see #list_budgets_with_http_info
    def list_budgets(opts = {})
      data, _status_code, _headers = list_budgets_with_http_info(opts)
      data
    end

    # List budgets.
    #
    # List budgets.
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(BudgetArray, Integer, Hash)>] BudgetArray data, response status code and response headers
    def list_budgets_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.list_budgets ...'
      end
      # resource path
      local_var_path = '/api/v2/cost/budgets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BudgetArray'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :list_budgets,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#list_budgets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Cloud Cost Management AWS CUR configs.
    #
    # @see #list_cost_awscur_configs_with_http_info
    def list_cost_awscur_configs(opts = {})
      data, _status_code, _headers = list_cost_awscur_configs_with_http_info(opts)
      data
    end

    # List Cloud Cost Management AWS CUR configs.
    #
    # List the AWS CUR configs.
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(AwsCURConfigsResponse, Integer, Hash)>] AwsCURConfigsResponse data, response status code and response headers
    def list_cost_awscur_configs_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.list_cost_awscur_configs ...'
      end
      # resource path
      local_var_path = '/api/v2/cost/aws_cur_config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AwsCURConfigsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :list_cost_awscur_configs,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#list_cost_awscur_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Cloud Cost Management Azure configs.
    #
    # @see #list_cost_azure_uc_configs_with_http_info
    def list_cost_azure_uc_configs(opts = {})
      data, _status_code, _headers = list_cost_azure_uc_configs_with_http_info(opts)
      data
    end

    # List Cloud Cost Management Azure configs.
    #
    # List the Azure configs.
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(AzureUCConfigsResponse, Integer, Hash)>] AzureUCConfigsResponse data, response status code and response headers
    def list_cost_azure_uc_configs_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.list_cost_azure_uc_configs ...'
      end
      # resource path
      local_var_path = '/api/v2/cost/azure_uc_config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AzureUCConfigsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :list_cost_azure_uc_configs,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#list_cost_azure_uc_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Google Cloud Usage Cost configs.
    #
    # @see #list_cost_gcp_usage_cost_configs_with_http_info
    def list_cost_gcp_usage_cost_configs(opts = {})
      data, _status_code, _headers = list_cost_gcp_usage_cost_configs_with_http_info(opts)
      data
    end

    # List Google Cloud Usage Cost configs.
    #
    # List the Google Cloud Usage Cost configs.
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(GCPUsageCostConfigsResponse, Integer, Hash)>] GCPUsageCostConfigsResponse data, response status code and response headers
    def list_cost_gcp_usage_cost_configs_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.list_cost_gcp_usage_cost_configs ...'
      end
      # resource path
      local_var_path = '/api/v2/cost/gcp_uc_config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GCPUsageCostConfigsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :list_cost_gcp_usage_cost_configs,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#list_cost_gcp_usage_cost_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List custom allocation rules.
    #
    # @see #list_custom_allocation_rules_with_http_info
    def list_custom_allocation_rules(opts = {})
      data, _status_code, _headers = list_custom_allocation_rules_with_http_info(opts)
      data
    end

    # List custom allocation rules.
    #
    # List all custom allocation rules - Retrieve a list of all custom allocation rules for the organization
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(ArbitraryRuleResponseArray, Integer, Hash)>] ArbitraryRuleResponseArray data, response status code and response headers
    def list_custom_allocation_rules_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.list_custom_allocation_rules ...'
      end
      # resource path
      local_var_path = '/api/v2/cost/arbitrary_rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ArbitraryRuleResponseArray'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :list_custom_allocation_rules,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#list_custom_allocation_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Custom Costs files.
    #
    # @see #list_custom_costs_files_with_http_info
    def list_custom_costs_files(opts = {})
      data, _status_code, _headers = list_custom_costs_files_with_http_info(opts)
      data
    end

    # List Custom Costs files.
    #
    # List the Custom Costs files.
    #
    # @param opts [Hash] the optional parameters
    # @option opts [Integer] :page_number Page number for pagination
    # @option opts [Integer] :page_size Page size for pagination
    # @option opts [String] :filter_status Filter by file status
    # @option opts [String] :sort Sort key with optional descending prefix
    # @return [Array<(CustomCostsFileListResponse, Integer, Hash)>] CustomCostsFileListResponse data, response status code and response headers
    def list_custom_costs_files_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.list_custom_costs_files ...'
      end
      # resource path
      local_var_path = '/api/v2/cost/custom_costs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page[number]'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'page[size]'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'filter[status]'] = opts[:'filter_status'] if !opts[:'filter_status'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomCostsFileListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :list_custom_costs_files,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#list_custom_costs_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List tag pipeline rulesets.
    #
    # @see #list_tag_pipelines_rulesets_with_http_info
    def list_tag_pipelines_rulesets(opts = {})
      data, _status_code, _headers = list_tag_pipelines_rulesets_with_http_info(opts)
      data
    end

    # List tag pipeline rulesets.
    #
    # List all tag pipeline rulesets - Retrieve a list of all tag pipeline rulesets for the organization
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(RulesetRespArray, Integer, Hash)>] RulesetRespArray data, response status code and response headers
    def list_tag_pipelines_rulesets_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.list_tag_pipelines_rulesets ...'
      end
      # resource path
      local_var_path = '/api/v2/tags/enrichment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RulesetRespArray'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :list_tag_pipelines_rulesets,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#list_tag_pipelines_rulesets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reorder custom allocation rules.
    #
    # @see #reorder_custom_allocation_rules_with_http_info
    def reorder_custom_allocation_rules(body, opts = {})
      reorder_custom_allocation_rules_with_http_info(body, opts)
      nil
    end

    # Reorder custom allocation rules.
    #
    # Reorder custom allocation rules - Change the execution order of custom allocation rules.
    #
    # **Important**: You must provide the **complete list** of all rule IDs in the desired execution order. The API will reorder ALL rules according to the provided sequence.
    #
    # Rules are executed in the order specified, with lower indices (earlier in the array) having higher priority.
    #
    # **Example**: If you have rules with IDs [123, 456, 789] and want to change order from 123→456→789 to 456→123→789, send: [{"id": "456"}, {"id": "123"}, {"id": "789"}]
    #
    # @param body [ReorderRuleResourceArray] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reorder_custom_allocation_rules_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.reorder_custom_allocation_rules ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.reorder_custom_allocation_rules"
      end
      # resource path
      local_var_path = '/api/v2/cost/arbitrary_rule/reorder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :reorder_custom_allocation_rules,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#reorder_custom_allocation_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reorder tag pipeline rulesets.
    #
    # @see #reorder_tag_pipelines_rulesets_with_http_info
    def reorder_tag_pipelines_rulesets(body, opts = {})
      reorder_tag_pipelines_rulesets_with_http_info(body, opts)
      nil
    end

    # Reorder tag pipeline rulesets.
    #
    # Reorder tag pipeline rulesets - Change the execution order of tag pipeline rulesets
    #
    # @param body [ReorderRulesetResourceArray] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reorder_tag_pipelines_rulesets_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.reorder_tag_pipelines_rulesets ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.reorder_tag_pipelines_rulesets"
      end
      # resource path
      local_var_path = '/api/v2/tags/enrichment/reorder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :reorder_tag_pipelines_rulesets,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#reorder_tag_pipelines_rulesets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Cloud Cost Management AWS CUR config.
    #
    # @see #update_cost_awscur_config_with_http_info
    def update_cost_awscur_config(cloud_account_id, body, opts = {})
      data, _status_code, _headers = update_cost_awscur_config_with_http_info(cloud_account_id, body, opts)
      data
    end

    # Update Cloud Cost Management AWS CUR config.
    #
    # Update the status (active/archived) and/or account filtering configuration of an AWS CUR config.
    #
    # @param cloud_account_id [Integer] Cloud Account id.
    # @param body [AwsCURConfigPatchRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(AwsCURConfigsResponse, Integer, Hash)>] AwsCURConfigsResponse data, response status code and response headers
    def update_cost_awscur_config_with_http_info(cloud_account_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.update_cost_awscur_config ...'
      end
      # verify the required parameter 'cloud_account_id' is set
      if @api_client.config.client_side_validation && cloud_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_account_id' when calling CloudCostManagementAPI.update_cost_awscur_config"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.update_cost_awscur_config"
      end
      # resource path
      local_var_path = '/api/v2/cost/aws_cur_config/{cloud_account_id}'.sub('{cloud_account_id}', CGI.escape(cloud_account_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AwsCURConfigsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_cost_awscur_config,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#update_cost_awscur_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Cloud Cost Management Azure config.
    #
    # @see #update_cost_azure_uc_configs_with_http_info
    def update_cost_azure_uc_configs(cloud_account_id, body, opts = {})
      data, _status_code, _headers = update_cost_azure_uc_configs_with_http_info(cloud_account_id, body, opts)
      data
    end

    # Update Cloud Cost Management Azure config.
    #
    # Update the status of an  Azure config (active/archived).
    #
    # @param cloud_account_id [Integer] Cloud Account id.
    # @param body [AzureUCConfigPatchRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(AzureUCConfigPairsResponse, Integer, Hash)>] AzureUCConfigPairsResponse data, response status code and response headers
    def update_cost_azure_uc_configs_with_http_info(cloud_account_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.update_cost_azure_uc_configs ...'
      end
      # verify the required parameter 'cloud_account_id' is set
      if @api_client.config.client_side_validation && cloud_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_account_id' when calling CloudCostManagementAPI.update_cost_azure_uc_configs"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.update_cost_azure_uc_configs"
      end
      # resource path
      local_var_path = '/api/v2/cost/azure_uc_config/{cloud_account_id}'.sub('{cloud_account_id}', CGI.escape(cloud_account_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AzureUCConfigPairsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_cost_azure_uc_configs,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#update_cost_azure_uc_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Google Cloud Usage Cost config.
    #
    # @see #update_cost_gcp_usage_cost_config_with_http_info
    def update_cost_gcp_usage_cost_config(cloud_account_id, body, opts = {})
      data, _status_code, _headers = update_cost_gcp_usage_cost_config_with_http_info(cloud_account_id, body, opts)
      data
    end

    # Update Google Cloud Usage Cost config.
    #
    # Update the status of an Google Cloud Usage Cost config (active/archived).
    #
    # @param cloud_account_id [Integer] Cloud Account id.
    # @param body [GCPUsageCostConfigPatchRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(GCPUsageCostConfigResponse, Integer, Hash)>] GCPUsageCostConfigResponse data, response status code and response headers
    def update_cost_gcp_usage_cost_config_with_http_info(cloud_account_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.update_cost_gcp_usage_cost_config ...'
      end
      # verify the required parameter 'cloud_account_id' is set
      if @api_client.config.client_side_validation && cloud_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_account_id' when calling CloudCostManagementAPI.update_cost_gcp_usage_cost_config"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.update_cost_gcp_usage_cost_config"
      end
      # resource path
      local_var_path = '/api/v2/cost/gcp_uc_config/{cloud_account_id}'.sub('{cloud_account_id}', CGI.escape(cloud_account_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GCPUsageCostConfigResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_cost_gcp_usage_cost_config,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#update_cost_gcp_usage_cost_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update custom allocation rule.
    #
    # @see #update_custom_allocation_rule_with_http_info
    def update_custom_allocation_rule(rule_id, body, opts = {})
      data, _status_code, _headers = update_custom_allocation_rule_with_http_info(rule_id, body, opts)
      data
    end

    # Update custom allocation rule.
    #
    # Update an existing custom allocation rule with new filters and allocation strategy.
    #
    # **Strategy Methods:**
    # - **PROPORTIONAL/EVEN**: Allocates costs proportionally/evenly based on existing costs. Requires: granularity, allocated_by_tag_keys. Optional: based_on_costs, allocated_by_filters, evaluate_grouped_by_tag_keys, evaluate_grouped_by_filters.
    # - **PROPORTIONAL_TIMESERIES/EVEN_TIMESERIES**: Allocates based on timeseries data. Requires: granularity, based_on_timeseries. Optional: evaluate_grouped_by_tag_keys.
    # - **PERCENT**: Allocates fixed percentages to specific tags. Requires: allocated_by (array of percentage allocations).
    # - **USAGE_METRIC**: Allocates based on usage metrics (implementation varies).
    #
    # **Filter Conditions:**
    # - Use **value** for single-value conditions: "is", "is not", "contains", "does not contain", "=", "!=", "like", "not like", "is all values", "is untagged"
    # - Use **values** for multi-value conditions: "in", "not in"
    # - Cannot use both value and values simultaneously.
    #
    # **Supported operators**: is, is not, is all values, is untagged, contains, does not contain, in, not in, =, !=, like, not like
    #
    # @param rule_id [Integer] The unique identifier of the custom allocation rule
    # @param body [ArbitraryCostUpsertRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(ArbitraryRuleResponse, Integer, Hash)>] ArbitraryRuleResponse data, response status code and response headers
    def update_custom_allocation_rule_with_http_info(rule_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.update_custom_allocation_rule ...'
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling CloudCostManagementAPI.update_custom_allocation_rule"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.update_custom_allocation_rule"
      end
      # resource path
      local_var_path = '/api/v2/cost/arbitrary_rule/{rule_id}'.sub('{rule_id}', CGI.escape(rule_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ArbitraryRuleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_custom_allocation_rule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#update_custom_allocation_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update tag pipeline ruleset.
    #
    # @see #update_tag_pipelines_ruleset_with_http_info
    def update_tag_pipelines_ruleset(ruleset_id, body, opts = {})
      data, _status_code, _headers = update_tag_pipelines_ruleset_with_http_info(ruleset_id, body, opts)
      data
    end

    # Update tag pipeline ruleset.
    #
    # Update a tag pipeline ruleset - Update an existing tag pipeline ruleset with new rules and configuration
    #
    # @param ruleset_id [String] The unique identifier of the ruleset
    # @param body [UpdateRulesetRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(RulesetResp, Integer, Hash)>] RulesetResp data, response status code and response headers
    def update_tag_pipelines_ruleset_with_http_info(ruleset_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.update_tag_pipelines_ruleset ...'
      end
      # verify the required parameter 'ruleset_id' is set
      if @api_client.config.client_side_validation && ruleset_id.nil?
        fail ArgumentError, "Missing the required parameter 'ruleset_id' when calling CloudCostManagementAPI.update_tag_pipelines_ruleset"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.update_tag_pipelines_ruleset"
      end
      # resource path
      local_var_path = '/api/v2/tags/enrichment/{ruleset_id}'.sub('{ruleset_id}', CGI.escape(ruleset_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RulesetResp'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_tag_pipelines_ruleset,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#update_tag_pipelines_ruleset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload Custom Costs file.
    #
    # @see #upload_custom_costs_file_with_http_info
    def upload_custom_costs_file(body, opts = {})
      data, _status_code, _headers = upload_custom_costs_file_with_http_info(body, opts)
      data
    end

    # Upload Custom Costs file.
    #
    # Upload a Custom Costs file.
    #
    # @param body [Array<CustomCostsFileLineItem>] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(CustomCostsFileUploadResponse, Integer, Hash)>] CustomCostsFileUploadResponse data, response status code and response headers
    def upload_custom_costs_file_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.upload_custom_costs_file ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.upload_custom_costs_file"
      end
      # resource path
      local_var_path = '/api/v2/cost/custom_costs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomCostsFileUploadResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :upload_custom_costs_file,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Put, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#upload_custom_costs_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or update a budget.
    #
    # @see #upsert_budget_with_http_info
    def upsert_budget(body, opts = {})
      data, _status_code, _headers = upsert_budget_with_http_info(body, opts)
      data
    end

    # Create or update a budget.
    #
    # Create a new budget or update an existing one.
    #
    # @param body [BudgetWithEntries] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(BudgetWithEntries, Integer, Hash)>] BudgetWithEntries data, response status code and response headers
    def upsert_budget_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.upsert_budget ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.upsert_budget"
      end
      # resource path
      local_var_path = '/api/v2/cost/budget'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'BudgetWithEntries'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :upsert_budget,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Put, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#upsert_budget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate query.
    #
    # @see #validate_query_with_http_info
    def validate_query(body, opts = {})
      data, _status_code, _headers = validate_query_with_http_info(body, opts)
      data
    end

    # Validate query.
    #
    # Validate a tag pipeline query - Validate the syntax and structure of a tag pipeline query
    #
    # @param body [RulesValidateQueryRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(RulesValidateQueryResponse, Integer, Hash)>] RulesValidateQueryResponse data, response status code and response headers
    def validate_query_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudCostManagementAPI.validate_query ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CloudCostManagementAPI.validate_query"
      end
      # resource path
      local_var_path = '/api/v2/tags/enrichment/validate-query'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RulesValidateQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :validate_query,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudCostManagementAPI#validate_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
