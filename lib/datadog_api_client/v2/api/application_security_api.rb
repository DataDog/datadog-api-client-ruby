=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class ApplicationSecurityAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Create an Application Security exclusion filter.
    #
    # @see #create_application_security_exclusion_filter_with_http_info
    def create_application_security_exclusion_filter(body, opts = {})
      data, _status_code, _headers = create_application_security_exclusion_filter_with_http_info(body, opts)
      data
    end

    # Create an Application Security exclusion filter.
    #
    # Create a new Application Security exclusion filter with the given parameters.
    #
    # A request matched by an exclusion filter will be ignored by the Application Security product.
    # Go to https://app.datadoghq.com/security/appsec/passlist to review existing exclusion filters (also called passlist entries).
    #
    # @param body [ApplicationSecurityExclusionFilterRequest] The definition of the new exclusion filter.
    # @param opts [Hash] the optional parameters
    # @return [Array<(ApplicationSecurityExclusionFilterResponse, Integer, Hash)>] ApplicationSecurityExclusionFilterResponse data, response status code and response headers
    def create_application_security_exclusion_filter_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationSecurityAPI.create_application_security_exclusion_filter ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ApplicationSecurityAPI.create_application_security_exclusion_filter"
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/asm/waf/exclusion_filters'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationSecurityExclusionFilterResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :create_application_security_exclusion_filter,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationSecurityAPI#create_application_security_exclusion_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Application Security exclusion filter.
    #
    # @see #delete_application_security_exclusion_filter_with_http_info
    def delete_application_security_exclusion_filter(exclusion_filter_id, opts = {})
      delete_application_security_exclusion_filter_with_http_info(exclusion_filter_id, opts)
      nil
    end

    # Delete an Application Security exclusion filter.
    #
    # Delete a specific Application Security exclusion filter using its identifier.
    #
    # @param exclusion_filter_id [String] The identifier of the exclusion filter.
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_application_security_exclusion_filter_with_http_info(exclusion_filter_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationSecurityAPI.delete_application_security_exclusion_filter ...'
      end
      # verify the required parameter 'exclusion_filter_id' is set
      if @api_client.config.client_side_validation && exclusion_filter_id.nil?
        fail ArgumentError, "Missing the required parameter 'exclusion_filter_id' when calling ApplicationSecurityAPI.delete_application_security_exclusion_filter"
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/asm/waf/exclusion_filters/{exclusion_filter_id}'.sub('{exclusion_filter_id}', CGI.escape(exclusion_filter_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :delete_application_security_exclusion_filter,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationSecurityAPI#delete_application_security_exclusion_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Application Security exclusion filter.
    #
    # @see #get_application_security_exclusion_filter_with_http_info
    def get_application_security_exclusion_filter(exclusion_filter_id, opts = {})
      data, _status_code, _headers = get_application_security_exclusion_filter_with_http_info(exclusion_filter_id, opts)
      data
    end

    # Get an Application Security exclusion filter.
    #
    # Retrieve a specific Application Security exclusion filter using its identifier.
    #
    # @param exclusion_filter_id [String] The identifier of the exclusion filter.
    # @param opts [Hash] the optional parameters
    # @return [Array<(ApplicationSecurityExclusionFilterResponse, Integer, Hash)>] ApplicationSecurityExclusionFilterResponse data, response status code and response headers
    def get_application_security_exclusion_filter_with_http_info(exclusion_filter_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationSecurityAPI.get_application_security_exclusion_filter ...'
      end
      # verify the required parameter 'exclusion_filter_id' is set
      if @api_client.config.client_side_validation && exclusion_filter_id.nil?
        fail ArgumentError, "Missing the required parameter 'exclusion_filter_id' when calling ApplicationSecurityAPI.get_application_security_exclusion_filter"
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/asm/waf/exclusion_filters/{exclusion_filter_id}'.sub('{exclusion_filter_id}', CGI.escape(exclusion_filter_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationSecurityExclusionFilterResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :get_application_security_exclusion_filter,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationSecurityAPI#get_application_security_exclusion_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all Application Security exclusion filters.
    #
    # @see #list_application_security_exclusion_filters_with_http_info
    def list_application_security_exclusion_filters(opts = {})
      data, _status_code, _headers = list_application_security_exclusion_filters_with_http_info(opts)
      data
    end

    # List all Application Security exclusion filters.
    #
    # Retrieve a list of Application Security exclusion filters.
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(ApplicationSecurityExclusionFiltersResponse, Integer, Hash)>] ApplicationSecurityExclusionFiltersResponse data, response status code and response headers
    def list_application_security_exclusion_filters_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationSecurityAPI.list_application_security_exclusion_filters ...'
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/asm/waf/exclusion_filters'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationSecurityExclusionFiltersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :list_application_security_exclusion_filters,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationSecurityAPI#list_application_security_exclusion_filters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Application Security exclusion filter.
    #
    # @see #update_application_security_exclusion_filter_with_http_info
    def update_application_security_exclusion_filter(exclusion_filter_id, body, opts = {})
      data, _status_code, _headers = update_application_security_exclusion_filter_with_http_info(exclusion_filter_id, body, opts)
      data
    end

    # Update an Application Security exclusion filter.
    #
    # Update a specific Application Security exclusion filter using its identifier.
    # Returns the exclusion filter object when the request is successful.
    #
    # @param exclusion_filter_id [String] The identifier of the exclusion filter.
    # @param body [ApplicationSecurityExclusionFilterRequest] The exclusion filter to update.
    # @param opts [Hash] the optional parameters
    # @return [Array<(ApplicationSecurityExclusionFilterResponse, Integer, Hash)>] ApplicationSecurityExclusionFilterResponse data, response status code and response headers
    def update_application_security_exclusion_filter_with_http_info(exclusion_filter_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationSecurityAPI.update_application_security_exclusion_filter ...'
      end
      # verify the required parameter 'exclusion_filter_id' is set
      if @api_client.config.client_side_validation && exclusion_filter_id.nil?
        fail ArgumentError, "Missing the required parameter 'exclusion_filter_id' when calling ApplicationSecurityAPI.update_application_security_exclusion_filter"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ApplicationSecurityAPI.update_application_security_exclusion_filter"
      end
      # resource path
      local_var_path = '/api/v2/remote_config/products/asm/waf/exclusion_filters/{exclusion_filter_id}'.sub('{exclusion_filter_id}', CGI.escape(exclusion_filter_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationSecurityExclusionFilterResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :update_application_security_exclusion_filter,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Put, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationSecurityAPI#update_application_security_exclusion_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
