=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class KeyManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an API key
    # Create an API key.
    # @param body [APIKeyCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [APIKeyResponse]
    def create_api_key(body, opts = {})
      data, _status_code, _headers = create_api_key_with_http_info(body, opts)
      data
    end

    # Create an API key
    # Create an API key.
    # @param body [APIKeyCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIKeyResponse, Integer, Hash)>] APIKeyResponse data, response status code and response headers
    def create_api_key_with_http_info(body, opts = {})

      if @api_client.config.unstable_operations.has_key?(:create_api_key)
        unstable_enabled = @api_client.config.unstable_operations[:create_api_key]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "create_api_key")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "create_api_key"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KeyManagementApi.create_api_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling KeyManagementApi.create_api_key"
      end
      # resource path
      local_var_path = '/api/v2/api_keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'APIKeyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"KeyManagementApi.create_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KeyManagementApi#create_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an API key
    # Delete an API key.
    # @param api_key_id [String] The ID of the API key.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_api_key(api_key_id, opts = {})
      delete_api_key_with_http_info(api_key_id, opts)
      nil
    end

    # Delete an API key
    # Delete an API key.
    # @param api_key_id [String] The ID of the API key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_api_key_with_http_info(api_key_id, opts = {})

      if @api_client.config.unstable_operations.has_key?(:delete_api_key)
        unstable_enabled = @api_client.config.unstable_operations[:delete_api_key]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "delete_api_key")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "delete_api_key"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KeyManagementApi.delete_api_key ...'
      end
      # verify the required parameter 'api_key_id' is set
      if @api_client.config.client_side_validation && api_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_key_id' when calling KeyManagementApi.delete_api_key"
      end
      # resource path
      local_var_path = '/api/v2/api_keys/{api_key_id}'.sub('{' + 'api_key_id' + '}', CGI.escape(api_key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"KeyManagementApi.delete_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KeyManagementApi#delete_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get API key
    # Get an API key.
    # @param api_key_id [String] The ID of the API key.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma separated list of resource paths for related resources to include in the response. Supported resource paths are &#x60;created_by&#x60; and &#x60;modified_by&#x60;.
    # @return [APIKeyResponse]
    def get_api_key(api_key_id, opts = {})
      data, _status_code, _headers = get_api_key_with_http_info(api_key_id, opts)
      data
    end

    # Get API key
    # Get an API key.
    # @param api_key_id [String] The ID of the API key.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include Comma separated list of resource paths for related resources to include in the response. Supported resource paths are &#x60;created_by&#x60; and &#x60;modified_by&#x60;.
    # @return [Array<(APIKeyResponse, Integer, Hash)>] APIKeyResponse data, response status code and response headers
    def get_api_key_with_http_info(api_key_id, opts = {})

      if @api_client.config.unstable_operations.has_key?(:get_api_key)
        unstable_enabled = @api_client.config.unstable_operations[:get_api_key]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "get_api_key")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "get_api_key"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KeyManagementApi.get_api_key ...'
      end
      # verify the required parameter 'api_key_id' is set
      if @api_client.config.client_side_validation && api_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_key_id' when calling KeyManagementApi.get_api_key"
      end
      # resource path
      local_var_path = '/api/v2/api_keys/{api_key_id}'.sub('{' + 'api_key_id' + '}', CGI.escape(api_key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIKeyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"KeyManagementApi.get_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KeyManagementApi#get_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all API keys
    # List all API keys available for your account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Size for a given page. (default to 10)
    # @option opts [Integer] :page_number Specific page number to return. (default to 0)
    # @option opts [String] :sort API key attribute used to sort results. Sort order is ascending by default. In order to specify a descending sort, prefix the attribute with a minus sign. (default to 'name')
    # @option opts [String] :filter Filter API keys by the specified string.
    # @option opts [String] :filter_created_at_start Only include API keys created on or after the specified date.
    # @option opts [String] :filter_created_at_end Only include API keys created on or before the specified date.
    # @option opts [String] :filter_modified_at_start Only include API keys modified on or after the specified date.
    # @option opts [String] :filter_modified_at_end Only include API keys modified on or before the specified date.
    # @option opts [String] :include Comma separated list of resource paths for related resources to include in the response. Supported resource paths are &#x60;created_by&#x60; and &#x60;modified_by&#x60;.
    # @return [APIKeysResponse]
    def list_api_keys(opts = {})
      data, _status_code, _headers = list_api_keys_with_http_info(opts)
      data
    end

    # Get all API keys
    # List all API keys available for your account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Size for a given page.
    # @option opts [Integer] :page_number Specific page number to return.
    # @option opts [String] :sort API key attribute used to sort results. Sort order is ascending by default. In order to specify a descending sort, prefix the attribute with a minus sign.
    # @option opts [String] :filter Filter API keys by the specified string.
    # @option opts [String] :filter_created_at_start Only include API keys created on or after the specified date.
    # @option opts [String] :filter_created_at_end Only include API keys created on or before the specified date.
    # @option opts [String] :filter_modified_at_start Only include API keys modified on or after the specified date.
    # @option opts [String] :filter_modified_at_end Only include API keys modified on or before the specified date.
    # @option opts [String] :include Comma separated list of resource paths for related resources to include in the response. Supported resource paths are &#x60;created_by&#x60; and &#x60;modified_by&#x60;.
    # @return [Array<(APIKeysResponse, Integer, Hash)>] APIKeysResponse data, response status code and response headers
    def list_api_keys_with_http_info(opts = {})

      if @api_client.config.unstable_operations.has_key?(:list_api_keys)
        unstable_enabled = @api_client.config.unstable_operations[:list_api_keys]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "list_api_keys")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "list_api_keys"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KeyManagementApi.list_api_keys ...'
      end
      allowable_values = ["created_at", "-created_at", "last4", "-last4", "modified_at", "-modified_at", "name", "-name"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v2/api_keys'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page[size]'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page[number]'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'filter[created_at][start]'] = opts[:'filter_created_at_start'] if !opts[:'filter_created_at_start'].nil?
      query_params[:'filter[created_at][end]'] = opts[:'filter_created_at_end'] if !opts[:'filter_created_at_end'].nil?
      query_params[:'filter[modified_at][start]'] = opts[:'filter_modified_at_start'] if !opts[:'filter_modified_at_start'].nil?
      query_params[:'filter[modified_at][end]'] = opts[:'filter_modified_at_end'] if !opts[:'filter_modified_at_end'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIKeysResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"KeyManagementApi.list_api_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KeyManagementApi#list_api_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit an API key
    # Update an API key.
    # @param api_key_id [String] The ID of the API key.
    # @param body [APIKeyUpdateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [APIKeyResponse]
    def update_api_key(api_key_id, body, opts = {})
      data, _status_code, _headers = update_api_key_with_http_info(api_key_id, body, opts)
      data
    end

    # Edit an API key
    # Update an API key.
    # @param api_key_id [String] The ID of the API key.
    # @param body [APIKeyUpdateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIKeyResponse, Integer, Hash)>] APIKeyResponse data, response status code and response headers
    def update_api_key_with_http_info(api_key_id, body, opts = {})

      if @api_client.config.unstable_operations.has_key?(:update_api_key)
        unstable_enabled = @api_client.config.unstable_operations[:update_api_key]
        if unstable_enabled
          @api_client.config.logger.warn format("Using unstable operation '%s'", "update_api_key")
        else
          raise ApiError.new(message: format("Unstable operation '%s' is disabled", "update_api_key"))
        end
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KeyManagementApi.update_api_key ...'
      end
      # verify the required parameter 'api_key_id' is set
      if @api_client.config.client_side_validation && api_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_key_id' when calling KeyManagementApi.update_api_key"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling KeyManagementApi.update_api_key"
      end
      # resource path
      local_var_path = '/api/v2/api_keys/{api_key_id}'.sub('{' + 'api_key_id' + '}', CGI.escape(api_key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'APIKeyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'appKeyAuth']

      new_options = opts.merge(
        :operation => :"KeyManagementApi.update_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KeyManagementApi#update_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
