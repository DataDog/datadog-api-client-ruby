=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class OrgConnectionsAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Create Org Connection.
    #
    # @see #create_org_connections_with_http_info
    def create_org_connections(body, opts = {})
      data, _status_code, _headers = create_org_connections_with_http_info(body, opts)
      data
    end

    # Create Org Connection.
    #
    # Create a new org connection between the current org and a target org.
    #
    # @param body [OrgConnectionCreateRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(OrgConnectionResponse, Integer, Hash)>] OrgConnectionResponse data, response status code and response headers
    def create_org_connections_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgConnectionsAPI.create_org_connections ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrgConnectionsAPI.create_org_connections"
      end
      # resource path
      local_var_path = '/api/v2/org_connections'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'OrgConnectionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :create_org_connections,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgConnectionsAPI#create_org_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Org Connection.
    #
    # @see #delete_org_connections_with_http_info
    def delete_org_connections(connection_id, opts = {})
      delete_org_connections_with_http_info(connection_id, opts)
      nil
    end

    # Delete Org Connection.
    #
    # Delete an existing org connection.
    #
    # @param connection_id [UUID] The unique identifier of the org connection.
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_org_connections_with_http_info(connection_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgConnectionsAPI.delete_org_connections ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling OrgConnectionsAPI.delete_org_connections"
      end
      # resource path
      local_var_path = '/api/v2/org_connections/{connection_id}'.sub('{connection_id}', CGI.escape(connection_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_org_connections,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgConnectionsAPI#delete_org_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Org Connections.
    #
    # @see #list_org_connections_with_http_info
    def list_org_connections(opts = {})
      data, _status_code, _headers = list_org_connections_with_http_info(opts)
      data
    end

    # List Org Connections.
    #
    # Returns a list of org connections.
    #
    # @param opts [Hash] the optional parameters
    # @option opts [String] :sink_org_id The Org ID of the sink org.
    # @option opts [String] :source_org_id The Org ID of the source org.
    # @option opts [Integer] :limit The limit of number of entries you want to return. Default is 1000.
    # @option opts [Integer] :offset The pagination offset which you want to query from. Default is 0.
    # @return [Array<(OrgConnectionListResponse, Integer, Hash)>] OrgConnectionListResponse data, response status code and response headers
    def list_org_connections_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgConnectionsAPI.list_org_connections ...'
      end
      # resource path
      local_var_path = '/api/v2/org_connections'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sink_org_id'] = opts[:'sink_org_id'] if !opts[:'sink_org_id'].nil?
      query_params[:'source_org_id'] = opts[:'source_org_id'] if !opts[:'source_org_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrgConnectionListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :list_org_connections,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgConnectionsAPI#list_org_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Org Connection.
    #
    # @see #update_org_connections_with_http_info
    def update_org_connections(connection_id, body, opts = {})
      data, _status_code, _headers = update_org_connections_with_http_info(connection_id, body, opts)
      data
    end

    # Update Org Connection.
    #
    # Update an existing org connection.
    #
    # @param connection_id [UUID] The unique identifier of the org connection.
    # @param body [OrgConnectionUpdateRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(OrgConnectionResponse, Integer, Hash)>] OrgConnectionResponse data, response status code and response headers
    def update_org_connections_with_http_info(connection_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgConnectionsAPI.update_org_connections ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling OrgConnectionsAPI.update_org_connections"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrgConnectionsAPI.update_org_connections"
      end
      # resource path
      local_var_path = '/api/v2/org_connections/{connection_id}'.sub('{connection_id}', CGI.escape(connection_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'OrgConnectionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_org_connections,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgConnectionsAPI#update_org_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
