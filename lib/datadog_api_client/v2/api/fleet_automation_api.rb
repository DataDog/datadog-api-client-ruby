=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class FleetAutomationAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Cancel a deployment.
    #
    # @see #cancel_fleet_deployment_with_http_info
    def cancel_fleet_deployment(deployment_id, opts = {})
      cancel_fleet_deployment_with_http_info(deployment_id, opts)
      nil
    end

    # Cancel a deployment.
    #
    # Cancel this deployment and stop all associated operations.
    # If a workflow is currently running for this deployment, it is canceled immediately.
    # Changes already applied to hosts are not rolled back.
    #
    # @param deployment_id [String] The unique identifier of the deployment to cancel.
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_fleet_deployment_with_http_info(deployment_id, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.cancel_fleet_deployment".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.cancel_fleet_deployment")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.cancel_fleet_deployment"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetAutomationAPI.cancel_fleet_deployment ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling FleetAutomationAPI.cancel_fleet_deployment"
      end
      # resource path
      local_var_path = '/api/unstable/fleet/deployments/{deployment_id}/cancel'.sub('{deployment_id}', CGI.escape(deployment_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :cancel_fleet_deployment,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetAutomationAPI#cancel_fleet_deployment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a deployment.
    #
    # @see #create_fleet_deployment_configure_with_http_info
    def create_fleet_deployment_configure(body, opts = {})
      data, _status_code, _headers = create_fleet_deployment_configure_with_http_info(body, opts)
      data
    end

    # Create a deployment.
    #
    # Create a new deployment to apply configuration changes
    # to a fleet of hosts matching the specified filter query.
    #
    # @param body [FleetDeploymentConfigureCreateRequest] Request payload containing the deployment details.
    # @param opts [Hash] the optional parameters
    # @return [Array<(FleetDeploymentResponse, Integer, Hash)>] FleetDeploymentResponse data, response status code and response headers
    def create_fleet_deployment_configure_with_http_info(body, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.create_fleet_deployment_configure".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.create_fleet_deployment_configure")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.create_fleet_deployment_configure"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetAutomationAPI.create_fleet_deployment_configure ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FleetAutomationAPI.create_fleet_deployment_configure"
      end
      # resource path
      local_var_path = '/api/unstable/fleet/deployments/configure'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'FleetDeploymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :create_fleet_deployment_configure,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetAutomationAPI#create_fleet_deployment_configure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a deployment by ID.
    #
    # @see #get_fleet_deployment_with_http_info
    def get_fleet_deployment(deployment_id, opts = {})
      data, _status_code, _headers = get_fleet_deployment_with_http_info(deployment_id, opts)
      data
    end

    # Get a deployment by ID.
    #
    # Retrieve the details of a specific deployment using its unique identifier.
    #
    # @param deployment_id [String] The unique identifier of the deployment to retrieve.
    # @param opts [Hash] the optional parameters
    # @return [Array<(FleetDeploymentResponse, Integer, Hash)>] FleetDeploymentResponse data, response status code and response headers
    def get_fleet_deployment_with_http_info(deployment_id, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.get_fleet_deployment".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.get_fleet_deployment")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.get_fleet_deployment"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetAutomationAPI.get_fleet_deployment ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling FleetAutomationAPI.get_fleet_deployment"
      end
      # resource path
      local_var_path = '/api/unstable/fleet/deployments/{deployment_id}'.sub('{deployment_id}', CGI.escape(deployment_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FleetDeploymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :get_fleet_deployment,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetAutomationAPI#get_fleet_deployment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all deployments.
    #
    # @see #list_fleet_deployments_with_http_info
    def list_fleet_deployments(opts = {})
      data, _status_code, _headers = list_fleet_deployments_with_http_info(opts)
      data
    end

    # List all deployments.
    #
    # Retrieve a list of all deployments for fleet automation.
    # Use the `page_size` and `page_offset` parameters to paginate results.
    #
    # @param opts [Hash] the optional parameters
    # @option opts [Integer] :page_size Number of deployments to return per page. Maximum value is 100.
    # @option opts [Integer] :page_offset Index of the first deployment to return. Use this with `page_size` to paginate through results.
    # @return [Array<(FleetDeploymentsResponse, Integer, Hash)>] FleetDeploymentsResponse data, response status code and response headers
    def list_fleet_deployments_with_http_info(opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.list_fleet_deployments".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.list_fleet_deployments")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.list_fleet_deployments"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FleetAutomationAPI.list_fleet_deployments ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FleetAutomationAPI.list_fleet_deployments, must be smaller than or equal to 100.'
      end
      # resource path
      local_var_path = '/api/unstable/fleet/deployments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_offset'] = opts[:'page_offset'] if !opts[:'page_offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FleetDeploymentsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :list_fleet_deployments,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetAutomationAPI#list_fleet_deployments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
