=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class DashboardReportsAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Create a new Dashboard Report.
    #
    # @see #create_dashboard_report_config_with_http_info
    def create_dashboard_report_config(dashboard_id, body, opts = {})
      data, _status_code, _headers = create_dashboard_report_config_with_http_info(dashboard_id, body, opts)
      data
    end

    # Create a new Dashboard Report.
    #
    # New dashboard report configuration for a given dashboard. This creates a new report email schedule, frequency, timeframe, and more.
    #
    # @param dashboard_id [String] ID of the dashboard for which to create a dashboard report.
    # @param body [DashboardReportCreateRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(DashboardReportResponse, Integer, Hash)>] DashboardReportResponse data, response status code and response headers
    def create_dashboard_report_config_with_http_info(dashboard_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardReportsAPI.create_dashboard_report_config ...'
      end
      # verify the required parameter 'dashboard_id' is set
      if @api_client.config.client_side_validation && dashboard_id.nil?
        fail ArgumentError, "Missing the required parameter 'dashboard_id' when calling DashboardReportsAPI.create_dashboard_report_config"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DashboardReportsAPI.create_dashboard_report_config"
      end
      # resource path
      local_var_path = '/api/v2/dashboards/{dashboard_id}/reports'.sub('{dashboard_id}', CGI.escape(dashboard_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DashboardReportResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :create_dashboard_report_config,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardReportsAPI#create_dashboard_report_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Dashboard Report.
    #
    # @see #delete_dashboard_report_config_with_http_info
    def delete_dashboard_report_config(dashboard_id, report_uuid, opts = {})
      delete_dashboard_report_config_with_http_info(dashboard_id, report_uuid, opts)
      nil
    end

    # Delete a Dashboard Report.
    #
    # Delete a dashboard report configuration, disabling the sending of scheduled emails for this report in the future. This operation cannot be undone. To pause the sending of emails for this report without deleting it, deactivate the report with a `PATCH` request.
    #
    # @param dashboard_id [String] ID of the dashboard for which to delete the associated report.
    # @param report_uuid [String] ID of the dashboard report to delete.
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_dashboard_report_config_with_http_info(dashboard_id, report_uuid, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardReportsAPI.delete_dashboard_report_config ...'
      end
      # verify the required parameter 'dashboard_id' is set
      if @api_client.config.client_side_validation && dashboard_id.nil?
        fail ArgumentError, "Missing the required parameter 'dashboard_id' when calling DashboardReportsAPI.delete_dashboard_report_config"
      end
      # verify the required parameter 'report_uuid' is set
      if @api_client.config.client_side_validation && report_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'report_uuid' when calling DashboardReportsAPI.delete_dashboard_report_config"
      end
      # resource path
      local_var_path = '/api/v2/dashboards/{dashboard_id}/reports/{report_uuid}'.sub('{dashboard_id}', CGI.escape(dashboard_id.to_s).gsub('%2F', '/')).sub('{report_uuid}', CGI.escape(report_uuid.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_dashboard_report_config,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardReportsAPI#delete_dashboard_report_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Dashboard Report.
    #
    # @see #get_dashboard_report_config_with_http_info
    def get_dashboard_report_config(dashboard_id, report_uuid, opts = {})
      data, _status_code, _headers = get_dashboard_report_config_with_http_info(dashboard_id, report_uuid, opts)
      data
    end

    # Get a Dashboard Report.
    #
    # Fetch a single Dashboard Report configuration. This includes the same information provided when fetching a dashboard's list of currently configured reports, but only for singular reports.
    #
    # @param dashboard_id [String] ID of the dashboard for which to get the associated dashboard report.
    # @param report_uuid [String] ID of the dashboard report to get.
    # @param opts [Hash] the optional parameters
    # @return [Array<(DashboardReportResponse, Integer, Hash)>] DashboardReportResponse data, response status code and response headers
    def get_dashboard_report_config_with_http_info(dashboard_id, report_uuid, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardReportsAPI.get_dashboard_report_config ...'
      end
      # verify the required parameter 'dashboard_id' is set
      if @api_client.config.client_side_validation && dashboard_id.nil?
        fail ArgumentError, "Missing the required parameter 'dashboard_id' when calling DashboardReportsAPI.get_dashboard_report_config"
      end
      # verify the required parameter 'report_uuid' is set
      if @api_client.config.client_side_validation && report_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'report_uuid' when calling DashboardReportsAPI.get_dashboard_report_config"
      end
      # resource path
      local_var_path = '/api/v2/dashboards/{dashboard_id}/reports/{report_uuid}'.sub('{dashboard_id}', CGI.escape(dashboard_id.to_s).gsub('%2F', '/')).sub('{report_uuid}', CGI.escape(report_uuid.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DashboardReportResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_dashboard_report_config,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardReportsAPI#get_dashboard_report_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Dashboard Reports for a Dashboard.
    #
    # @see #get_dashboard_report_configs_list_with_http_info
    def get_dashboard_report_configs_list(dashboard_id, opts = {})
      data, _status_code, _headers = get_dashboard_report_configs_list_with_http_info(dashboard_id, opts)
      data
    end

    # Get Dashboard Reports for a Dashboard.
    #
    # List of the dashboard reports configured on a given dashboard. This list includes report configurations that are both enabled and disabled, but does not include reports that have been deleted for the given dashboard.
    #
    # @param dashboard_id [String] ID of the Dashboard for which to get all dashboard reports.
    # @param opts [Hash] the optional parameters
    # @return [Array<(DashboardReportsResponse, Integer, Hash)>] DashboardReportsResponse data, response status code and response headers
    def get_dashboard_report_configs_list_with_http_info(dashboard_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardReportsAPI.get_dashboard_report_configs_list ...'
      end
      # verify the required parameter 'dashboard_id' is set
      if @api_client.config.client_side_validation && dashboard_id.nil?
        fail ArgumentError, "Missing the required parameter 'dashboard_id' when calling DashboardReportsAPI.get_dashboard_report_configs_list"
      end
      # resource path
      local_var_path = '/api/v2/dashboards/{dashboard_id}/reports'.sub('{dashboard_id}', CGI.escape(dashboard_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DashboardReportsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_dashboard_report_configs_list,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardReportsAPI#get_dashboard_report_configs_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Dashboard Report.
    #
    # @see #update_dashboard_report_config_with_http_info
    def update_dashboard_report_config(dashboard_id, report_uuid, body, opts = {})
      data, _status_code, _headers = update_dashboard_report_config_with_http_info(dashboard_id, report_uuid, body, opts)
      data
    end

    # Update Dashboard Report.
    #
    # Update a Dashboard Report configuration, including the schedule and email settings.  Changes to the schedule happen immediately, but it may take up to five minutes for your report to be sent if the scheduled time is close to the time of the update request.
    #
    # @param dashboard_id [String] ID of the dashboard for which to update the associated report.
    # @param report_uuid [String] ID of the dashboard report to update.
    # @param body [DashboardReportUpdateRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(DashboardReportResponse, Integer, Hash)>] DashboardReportResponse data, response status code and response headers
    def update_dashboard_report_config_with_http_info(dashboard_id, report_uuid, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DashboardReportsAPI.update_dashboard_report_config ...'
      end
      # verify the required parameter 'dashboard_id' is set
      if @api_client.config.client_side_validation && dashboard_id.nil?
        fail ArgumentError, "Missing the required parameter 'dashboard_id' when calling DashboardReportsAPI.update_dashboard_report_config"
      end
      # verify the required parameter 'report_uuid' is set
      if @api_client.config.client_side_validation && report_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'report_uuid' when calling DashboardReportsAPI.update_dashboard_report_config"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DashboardReportsAPI.update_dashboard_report_config"
      end
      # resource path
      local_var_path = '/api/v2/dashboards/{dashboard_id}/reports/{report_uuid}'.sub('{dashboard_id}', CGI.escape(dashboard_id.to_s).gsub('%2F', '/')).sub('{report_uuid}', CGI.escape(report_uuid.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DashboardReportResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_dashboard_report_config,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DashboardReportsAPI#update_dashboard_report_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
