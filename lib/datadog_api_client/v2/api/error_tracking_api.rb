=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class ErrorTrackingAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Remove the assignee of an issue.
    #
    # @see #delete_issue_assignee_with_http_info
    def delete_issue_assignee(issue_id, opts = {})
      delete_issue_assignee_with_http_info(issue_id, opts)
      nil
    end

    # Remove the assignee of an issue.
    #
    # Remove the assignee of an issue by `issue_id`.
    #
    # @param issue_id [String] The identifier of the issue.
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_issue_assignee_with_http_info(issue_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ErrorTrackingAPI.delete_issue_assignee ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling ErrorTrackingAPI.delete_issue_assignee"
      end
      # resource path
      local_var_path = '/api/v2/error-tracking/issues/{issue_id}/assignee'.sub('{issue_id}', CGI.escape(issue_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_issue_assignee,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ErrorTrackingAPI#delete_issue_assignee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the details of an error tracking issue.
    #
    # @see #get_issue_with_http_info
    def get_issue(issue_id, opts = {})
      data, _status_code, _headers = get_issue_with_http_info(issue_id, opts)
      data
    end

    # Get the details of an error tracking issue.
    #
    # Retrieve the full details for a specific error tracking issue, including attributes and relationships.
    #
    # @param issue_id [String] The identifier of the issue.
    # @param opts [Hash] the optional parameters
    # @option opts [Array<GetIssueIncludeQueryParameterItem>] :include Comma-separated list of relationship objects that should be included in the response.
    # @return [Array<(IssueResponse, Integer, Hash)>] IssueResponse data, response status code and response headers
    def get_issue_with_http_info(issue_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ErrorTrackingAPI.get_issue ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling ErrorTrackingAPI.get_issue"
      end
      # resource path
      local_var_path = '/api/v2/error-tracking/issues/{issue_id}'.sub('{issue_id}', CGI.escape(issue_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :csv) if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IssueResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_issue,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ErrorTrackingAPI#get_issue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search error tracking issues.
    #
    # @see #search_issues_with_http_info
    def search_issues(body, opts = {})
      data, _status_code, _headers = search_issues_with_http_info(body, opts)
      data
    end

    # Search error tracking issues.
    #
    # Search issues endpoint allows you to programmatically search for issues within your organization. This endpoint returns a list of issues that match a given search query, following the event search syntax. The search results are limited to a maximum of 100 issues per request.
    #
    # @param body [IssuesSearchRequest] Search issues request payload.
    # @param opts [Hash] the optional parameters
    # @option opts [Array<SearchIssuesIncludeQueryParameterItem>] :include Comma-separated list of relationship objects that should be included in the response.
    # @return [Array<(IssuesSearchResponse, Integer, Hash)>] IssuesSearchResponse data, response status code and response headers
    def search_issues_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ErrorTrackingAPI.search_issues ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ErrorTrackingAPI.search_issues"
      end
      # resource path
      local_var_path = '/api/v2/error-tracking/issues/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :csv) if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'IssuesSearchResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :search_issues,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ErrorTrackingAPI#search_issues\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the assignee of an issue.
    #
    # @see #update_issue_assignee_with_http_info
    def update_issue_assignee(issue_id, body, opts = {})
      data, _status_code, _headers = update_issue_assignee_with_http_info(issue_id, body, opts)
      data
    end

    # Update the assignee of an issue.
    #
    # Update the assignee of an issue by `issue_id`.
    #
    # @param issue_id [String] The identifier of the issue.
    # @param body [IssueUpdateAssigneeRequest] Update issue assignee request payload.
    # @param opts [Hash] the optional parameters
    # @return [Array<(IssueResponse, Integer, Hash)>] IssueResponse data, response status code and response headers
    def update_issue_assignee_with_http_info(issue_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ErrorTrackingAPI.update_issue_assignee ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling ErrorTrackingAPI.update_issue_assignee"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ErrorTrackingAPI.update_issue_assignee"
      end
      # resource path
      local_var_path = '/api/v2/error-tracking/issues/{issue_id}/assignee'.sub('{issue_id}', CGI.escape(issue_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'IssueResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_issue_assignee,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Put, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ErrorTrackingAPI#update_issue_assignee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the state of an issue.
    #
    # @see #update_issue_state_with_http_info
    def update_issue_state(issue_id, body, opts = {})
      data, _status_code, _headers = update_issue_state_with_http_info(issue_id, body, opts)
      data
    end

    # Update the state of an issue.
    #
    # Update the state of an issue by `issue_id`. Use this endpoint to move an issue between states such as `OPEN`, `RESOLVED`, or `IGNORED`.
    #
    # @param issue_id [String] The identifier of the issue.
    # @param body [IssueUpdateStateRequest] Update issue state request payload.
    # @param opts [Hash] the optional parameters
    # @return [Array<(IssueResponse, Integer, Hash)>] IssueResponse data, response status code and response headers
    def update_issue_state_with_http_info(issue_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ErrorTrackingAPI.update_issue_state ...'
      end
      # verify the required parameter 'issue_id' is set
      if @api_client.config.client_side_validation && issue_id.nil?
        fail ArgumentError, "Missing the required parameter 'issue_id' when calling ErrorTrackingAPI.update_issue_state"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ErrorTrackingAPI.update_issue_state"
      end
      # resource path
      local_var_path = '/api/v2/error-tracking/issues/{issue_id}/state'.sub('{issue_id}', CGI.escape(issue_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'IssueResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_issue_state,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Put, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ErrorTrackingAPI#update_issue_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
