=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class AWSIntegrationAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Create an AWS integration.
    #
    # @see #create_aws_account_with_http_info
    def create_aws_account(body, opts = {})
      data, _status_code, _headers = create_aws_account_with_http_info(body, opts)
      data
    end

    # Create an AWS integration.
    #
    # Create a new AWS Account Integration Config.
    #
    # @param body [AWSAccountCreateRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(AWSAccountResponse, Integer, Hash)>] AWSAccountResponse data, response status code and response headers
    def create_aws_account_with_http_info(body, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.create_aws_account".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.create_aws_account")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.create_aws_account"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AWSIntegrationAPI.create_aws_account ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AWSIntegrationAPI.create_aws_account"
      end
      # resource path
      local_var_path = '/api/v2/integration/aws/accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AWSAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :create_aws_account,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AWSIntegrationAPI#create_aws_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate a new external ID.
    #
    # @see #create_new_aws_external_id_with_http_info
    def create_new_aws_external_id(opts = {})
      data, _status_code, _headers = create_new_aws_external_id_with_http_info(opts)
      data
    end

    # Generate a new external ID.
    #
    # Generate a new external ID for AWS role-based authentication.
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(AWSNewExternalIDResponse, Integer, Hash)>] AWSNewExternalIDResponse data, response status code and response headers
    def create_new_aws_external_id_with_http_info(opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.create_new_aws_external_id".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.create_new_aws_external_id")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.create_new_aws_external_id"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AWSIntegrationAPI.create_new_aws_external_id ...'
      end
      # resource path
      local_var_path = '/api/v2/integration/aws/generate_new_external_id'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AWSNewExternalIDResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :create_new_aws_external_id,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AWSIntegrationAPI#create_new_aws_external_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an AWS integration.
    #
    # @see #delete_aws_account_with_http_info
    def delete_aws_account(aws_account_config_id, opts = {})
      delete_aws_account_with_http_info(aws_account_config_id, opts)
      nil
    end

    # Delete an AWS integration.
    #
    # Delete an AWS Account Integration Config
    #
    # @param aws_account_config_id [String] Unique Datadog ID of the AWS Account Integration Config
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_aws_account_with_http_info(aws_account_config_id, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.delete_aws_account".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.delete_aws_account")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.delete_aws_account"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AWSIntegrationAPI.delete_aws_account ...'
      end
      # verify the required parameter 'aws_account_config_id' is set
      if @api_client.config.client_side_validation && aws_account_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'aws_account_config_id' when calling AWSIntegrationAPI.delete_aws_account"
      end
      # resource path
      local_var_path = '/api/v2/integration/aws/accounts/{aws_account_config_id}'.sub('{aws_account_config_id}', CGI.escape(aws_account_config_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :delete_aws_account,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AWSIntegrationAPI#delete_aws_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an AWS integration by config ID.
    #
    # @see #get_aws_account_with_http_info
    def get_aws_account(aws_account_config_id, opts = {})
      data, _status_code, _headers = get_aws_account_with_http_info(aws_account_config_id, opts)
      data
    end

    # Get an AWS integration by config ID.
    #
    # Get an AWS Account Integration Config
    #
    # @param aws_account_config_id [String] Unique Datadog ID of the AWS Account Integration Config
    # @param opts [Hash] the optional parameters
    # @return [Array<(AWSAccountResponse, Integer, Hash)>] AWSAccountResponse data, response status code and response headers
    def get_aws_account_with_http_info(aws_account_config_id, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.get_aws_account".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.get_aws_account")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.get_aws_account"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AWSIntegrationAPI.get_aws_account ...'
      end
      # verify the required parameter 'aws_account_config_id' is set
      if @api_client.config.client_side_validation && aws_account_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'aws_account_config_id' when calling AWSIntegrationAPI.get_aws_account"
      end
      # resource path
      local_var_path = '/api/v2/integration/aws/accounts/{aws_account_config_id}'.sub('{aws_account_config_id}', CGI.escape(aws_account_config_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AWSAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :get_aws_account,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AWSIntegrationAPI#get_aws_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all AWS integrations.
    #
    # @see #list_aws_accounts_with_http_info
    def list_aws_accounts(opts = {})
      data, _status_code, _headers = list_aws_accounts_with_http_info(opts)
      data
    end

    # List all AWS integrations.
    #
    # Get a list of AWS Account Integration Configs.
    #
    # @param opts [Hash] the optional parameters
    # @option opts [String] :aws_account_id Optional query filter accounts by AWS Account ID
    # @return [Array<(AWSAccountsResponse, Integer, Hash)>] AWSAccountsResponse data, response status code and response headers
    def list_aws_accounts_with_http_info(opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.list_aws_accounts".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.list_aws_accounts")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.list_aws_accounts"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AWSIntegrationAPI.list_aws_accounts ...'
      end
      # resource path
      local_var_path = '/api/v2/integration/aws/accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'aws_account_id'] = opts[:'aws_account_id'] if !opts[:'aws_account_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AWSAccountsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :list_aws_accounts,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AWSIntegrationAPI#list_aws_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List available namespaces.
    #
    # @see #list_aws_namespaces_with_http_info
    def list_aws_namespaces(opts = {})
      data, _status_code, _headers = list_aws_namespaces_with_http_info(opts)
      data
    end

    # List available namespaces.
    #
    # Get a list of available AWS CloudWatch namespaces that can send metrics to Datadog.
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(AWSNamespacesResponse, Integer, Hash)>] AWSNamespacesResponse data, response status code and response headers
    def list_aws_namespaces_with_http_info(opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.list_aws_namespaces".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.list_aws_namespaces")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.list_aws_namespaces"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AWSIntegrationAPI.list_aws_namespaces ...'
      end
      # resource path
      local_var_path = '/api/v2/integration/aws/available_namespaces'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AWSNamespacesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :list_aws_namespaces,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AWSIntegrationAPI#list_aws_namespaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an AWS integration.
    #
    # @see #update_aws_account_with_http_info
    def update_aws_account(aws_account_config_id, body, opts = {})
      data, _status_code, _headers = update_aws_account_with_http_info(aws_account_config_id, body, opts)
      data
    end

    # Update an AWS integration.
    #
    # Update an AWS Account Integration Config
    #
    # @param aws_account_config_id [String] Unique Datadog ID of the AWS Account Integration Config
    # @param body [AWSAccountUpdateRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(AWSAccountResponse, Integer, Hash)>] AWSAccountResponse data, response status code and response headers
    def update_aws_account_with_http_info(aws_account_config_id, body, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.update_aws_account".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.update_aws_account")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.update_aws_account"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AWSIntegrationAPI.update_aws_account ...'
      end
      # verify the required parameter 'aws_account_config_id' is set
      if @api_client.config.client_side_validation && aws_account_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'aws_account_config_id' when calling AWSIntegrationAPI.update_aws_account"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AWSIntegrationAPI.update_aws_account"
      end
      # resource path
      local_var_path = '/api/v2/integration/aws/accounts/{aws_account_config_id}'.sub('{aws_account_config_id}', CGI.escape(aws_account_config_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AWSAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :update_aws_account,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AWSIntegrationAPI#update_aws_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
