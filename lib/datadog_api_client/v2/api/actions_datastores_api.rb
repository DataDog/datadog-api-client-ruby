=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class ActionsDatastoresAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Bulk delete datastore items.
    #
    # @see #bulk_delete_datastore_items_with_http_info
    def bulk_delete_datastore_items(datastore_id, body, opts = {})
      data, _status_code, _headers = bulk_delete_datastore_items_with_http_info(datastore_id, body, opts)
      data
    end

    # Bulk delete datastore items.
    #
    # Deletes multiple items from a datastore by their keys in a single operation.
    #
    # @param datastore_id [String] The ID of the datastore.
    # @param body [BulkDeleteAppsDatastoreItemsRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(DeleteAppsDatastoreItemResponseArray, Integer, Hash)>] DeleteAppsDatastoreItemResponseArray data, response status code and response headers
    def bulk_delete_datastore_items_with_http_info(datastore_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsDatastoresAPI.bulk_delete_datastore_items ...'
      end
      # verify the required parameter 'datastore_id' is set
      if @api_client.config.client_side_validation && datastore_id.nil?
        fail ArgumentError, "Missing the required parameter 'datastore_id' when calling ActionsDatastoresAPI.bulk_delete_datastore_items"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ActionsDatastoresAPI.bulk_delete_datastore_items"
      end
      # resource path
      local_var_path = '/api/v2/actions-datastores/{datastore_id}/items/bulk'.sub('{datastore_id}', CGI.escape(datastore_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteAppsDatastoreItemResponseArray'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :bulk_delete_datastore_items,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsDatastoresAPI#bulk_delete_datastore_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Bulk write datastore items.
    #
    # @see #bulk_write_datastore_items_with_http_info
    def bulk_write_datastore_items(datastore_id, body, opts = {})
      data, _status_code, _headers = bulk_write_datastore_items_with_http_info(datastore_id, body, opts)
      data
    end

    # Bulk write datastore items.
    #
    # Creates or replaces multiple items in a datastore by their keys in a single operation.
    #
    # @param datastore_id [String] The unique identifier of the datastore to retrieve.
    # @param body [BulkPutAppsDatastoreItemsRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(PutAppsDatastoreItemResponseArray, Integer, Hash)>] PutAppsDatastoreItemResponseArray data, response status code and response headers
    def bulk_write_datastore_items_with_http_info(datastore_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsDatastoresAPI.bulk_write_datastore_items ...'
      end
      # verify the required parameter 'datastore_id' is set
      if @api_client.config.client_side_validation && datastore_id.nil?
        fail ArgumentError, "Missing the required parameter 'datastore_id' when calling ActionsDatastoresAPI.bulk_write_datastore_items"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ActionsDatastoresAPI.bulk_write_datastore_items"
      end
      # resource path
      local_var_path = '/api/v2/actions-datastores/{datastore_id}/items/bulk'.sub('{datastore_id}', CGI.escape(datastore_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'PutAppsDatastoreItemResponseArray'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :bulk_write_datastore_items,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsDatastoresAPI#bulk_write_datastore_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create datastore.
    #
    # @see #create_datastore_with_http_info
    def create_datastore(body, opts = {})
      data, _status_code, _headers = create_datastore_with_http_info(body, opts)
      data
    end

    # Create datastore.
    #
    # Creates a new datastore.
    #
    # @param body [CreateAppsDatastoreRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(CreateAppsDatastoreResponse, Integer, Hash)>] CreateAppsDatastoreResponse data, response status code and response headers
    def create_datastore_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsDatastoresAPI.create_datastore ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ActionsDatastoresAPI.create_datastore"
      end
      # resource path
      local_var_path = '/api/v2/actions-datastores'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAppsDatastoreResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :create_datastore,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsDatastoresAPI#create_datastore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete datastore.
    #
    # @see #delete_datastore_with_http_info
    def delete_datastore(datastore_id, opts = {})
      delete_datastore_with_http_info(datastore_id, opts)
      nil
    end

    # Delete datastore.
    #
    # Deletes a datastore by its unique identifier.
    #
    # @param datastore_id [String] The unique identifier of the datastore to retrieve.
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_datastore_with_http_info(datastore_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsDatastoresAPI.delete_datastore ...'
      end
      # verify the required parameter 'datastore_id' is set
      if @api_client.config.client_side_validation && datastore_id.nil?
        fail ArgumentError, "Missing the required parameter 'datastore_id' when calling ActionsDatastoresAPI.delete_datastore"
      end
      # resource path
      local_var_path = '/api/v2/actions-datastores/{datastore_id}'.sub('{datastore_id}', CGI.escape(datastore_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :delete_datastore,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsDatastoresAPI#delete_datastore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete datastore item.
    #
    # @see #delete_datastore_item_with_http_info
    def delete_datastore_item(datastore_id, body, opts = {})
      data, _status_code, _headers = delete_datastore_item_with_http_info(datastore_id, body, opts)
      data
    end

    # Delete datastore item.
    #
    # Deletes an item from a datastore by its key.
    #
    # @param datastore_id [String] The unique identifier of the datastore to retrieve.
    # @param body [DeleteAppsDatastoreItemRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(DeleteAppsDatastoreItemResponse, Integer, Hash)>] DeleteAppsDatastoreItemResponse data, response status code and response headers
    def delete_datastore_item_with_http_info(datastore_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsDatastoresAPI.delete_datastore_item ...'
      end
      # verify the required parameter 'datastore_id' is set
      if @api_client.config.client_side_validation && datastore_id.nil?
        fail ArgumentError, "Missing the required parameter 'datastore_id' when calling ActionsDatastoresAPI.delete_datastore_item"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ActionsDatastoresAPI.delete_datastore_item"
      end
      # resource path
      local_var_path = '/api/v2/actions-datastores/{datastore_id}/items'.sub('{datastore_id}', CGI.escape(datastore_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteAppsDatastoreItemResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :delete_datastore_item,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsDatastoresAPI#delete_datastore_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get datastore.
    #
    # @see #get_datastore_with_http_info
    def get_datastore(datastore_id, opts = {})
      data, _status_code, _headers = get_datastore_with_http_info(datastore_id, opts)
      data
    end

    # Get datastore.
    #
    # Retrieves a specific datastore by its ID.
    #
    # @param datastore_id [String] The unique identifier of the datastore to retrieve.
    # @param opts [Hash] the optional parameters
    # @return [Array<(Datastore, Integer, Hash)>] Datastore data, response status code and response headers
    def get_datastore_with_http_info(datastore_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsDatastoresAPI.get_datastore ...'
      end
      # verify the required parameter 'datastore_id' is set
      if @api_client.config.client_side_validation && datastore_id.nil?
        fail ArgumentError, "Missing the required parameter 'datastore_id' when calling ActionsDatastoresAPI.get_datastore"
      end
      # resource path
      local_var_path = '/api/v2/actions-datastores/{datastore_id}'.sub('{datastore_id}', CGI.escape(datastore_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Datastore'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :get_datastore,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsDatastoresAPI#get_datastore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List datastore items.
    #
    # @see #list_datastore_items_with_http_info
    def list_datastore_items(datastore_id, opts = {})
      data, _status_code, _headers = list_datastore_items_with_http_info(datastore_id, opts)
      data
    end

    # List datastore items.
    #
    # Lists items from a datastore. You can filter the results by specifying either an item key or a filter query parameter, but not both at the same time. Supports server-side pagination for large datasets.
    #
    # @param datastore_id [String] The unique identifier of the datastore to retrieve.
    # @param opts [Hash] the optional parameters
    # @option opts [String] :filter Optional query filter to search items using the [logs search syntax](https://docs.datadoghq.com/logs/explorer/search_syntax/).
    # @option opts [String] :item_key Optional primary key value to retrieve a specific item. Cannot be used together with the filter parameter.
    # @option opts [Integer] :page_limit Optional field to limit the number of items to return per page for pagination. Up to 100 items can be returned per page.
    # @option opts [Integer] :page_offset Optional field to offset the number of items to skip from the beginning of the result set for pagination.
    # @option opts [String] :sort Optional field to sort results by. Prefix with '-' for descending order (e.g., '-created_at').
    # @return [Array<(ItemApiPayloadArray, Integer, Hash)>] ItemApiPayloadArray data, response status code and response headers
    def list_datastore_items_with_http_info(datastore_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsDatastoresAPI.list_datastore_items ...'
      end
      # verify the required parameter 'datastore_id' is set
      if @api_client.config.client_side_validation && datastore_id.nil?
        fail ArgumentError, "Missing the required parameter 'datastore_id' when calling ActionsDatastoresAPI.list_datastore_items"
      end
      if @api_client.config.client_side_validation && !opts[:'item_key'].nil? && opts[:'item_key'].to_s.length > 256
        fail ArgumentError, 'invalid value for "opts[:"item_key"]" when calling ActionsDatastoresAPI.list_datastore_items, the character length must be smaller than or equal to 256.'
      end
      if @api_client.config.client_side_validation && !opts[:'page_limit'].nil? && opts[:'page_limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"page_limit"]" when calling ActionsDatastoresAPI.list_datastore_items, must be smaller than or equal to 100.'
      end
      if @api_client.config.client_side_validation && !opts[:'page_limit'].nil? && opts[:'page_limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_limit"]" when calling ActionsDatastoresAPI.list_datastore_items, must be greater than or equal to 1.'
      end
      # resource path
      local_var_path = '/api/v2/actions-datastores/{datastore_id}/items'.sub('{datastore_id}', CGI.escape(datastore_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'item_key'] = opts[:'item_key'] if !opts[:'item_key'].nil?
      query_params[:'page[limit]'] = opts[:'page_limit'] if !opts[:'page_limit'].nil?
      query_params[:'page[offset]'] = opts[:'page_offset'] if !opts[:'page_offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ItemApiPayloadArray'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :list_datastore_items,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsDatastoresAPI#list_datastore_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List datastores.
    #
    # @see #list_datastores_with_http_info
    def list_datastores(opts = {})
      data, _status_code, _headers = list_datastores_with_http_info(opts)
      data
    end

    # List datastores.
    #
    # Lists all datastores for the organization.
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(DatastoreArray, Integer, Hash)>] DatastoreArray data, response status code and response headers
    def list_datastores_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsDatastoresAPI.list_datastores ...'
      end
      # resource path
      local_var_path = '/api/v2/actions-datastores'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DatastoreArray'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :list_datastores,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsDatastoresAPI#list_datastores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update datastore.
    #
    # @see #update_datastore_with_http_info
    def update_datastore(datastore_id, body, opts = {})
      data, _status_code, _headers = update_datastore_with_http_info(datastore_id, body, opts)
      data
    end

    # Update datastore.
    #
    # Updates an existing datastore's attributes.
    #
    # @param datastore_id [String] The unique identifier of the datastore to retrieve.
    # @param body [UpdateAppsDatastoreRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(Datastore, Integer, Hash)>] Datastore data, response status code and response headers
    def update_datastore_with_http_info(datastore_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsDatastoresAPI.update_datastore ...'
      end
      # verify the required parameter 'datastore_id' is set
      if @api_client.config.client_side_validation && datastore_id.nil?
        fail ArgumentError, "Missing the required parameter 'datastore_id' when calling ActionsDatastoresAPI.update_datastore"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ActionsDatastoresAPI.update_datastore"
      end
      # resource path
      local_var_path = '/api/v2/actions-datastores/{datastore_id}'.sub('{datastore_id}', CGI.escape(datastore_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Datastore'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :update_datastore,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsDatastoresAPI#update_datastore\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update datastore item.
    #
    # @see #update_datastore_item_with_http_info
    def update_datastore_item(datastore_id, body, opts = {})
      data, _status_code, _headers = update_datastore_item_with_http_info(datastore_id, body, opts)
      data
    end

    # Update datastore item.
    #
    # Partially updates an item in a datastore by its key.
    #
    # @param datastore_id [String] The unique identifier of the datastore to retrieve.
    # @param body [UpdateAppsDatastoreItemRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(ItemApiPayload, Integer, Hash)>] ItemApiPayload data, response status code and response headers
    def update_datastore_item_with_http_info(datastore_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionsDatastoresAPI.update_datastore_item ...'
      end
      # verify the required parameter 'datastore_id' is set
      if @api_client.config.client_side_validation && datastore_id.nil?
        fail ArgumentError, "Missing the required parameter 'datastore_id' when calling ActionsDatastoresAPI.update_datastore_item"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ActionsDatastoresAPI.update_datastore_item"
      end
      # resource path
      local_var_path = '/api/v2/actions-datastores/{datastore_id}/items'.sub('{datastore_id}', CGI.escape(datastore_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ItemApiPayload'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth]

      new_options = opts.merge(
        :operation => :update_datastore_item,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Patch, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionsDatastoresAPI#update_datastore_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
