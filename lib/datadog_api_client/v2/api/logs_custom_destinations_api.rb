=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class LogsCustomDestinationsAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Create a custom destination.
    #
    # @see #create_logs_custom_destination_with_http_info
    def create_logs_custom_destination(body, opts = {})
      data, _status_code, _headers = create_logs_custom_destination_with_http_info(body, opts)
      data
    end

    # Create a custom destination.
    #
    # Create a new custom destination for your organization.
    #
    # @param body [CustomDestinationCreatePayload] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(CustomDestinationResponse, Integer, Hash)>] CustomDestinationResponse data, response status code and response headers
    def create_logs_custom_destination_with_http_info(body, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.create_logs_custom_destination".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.create_logs_custom_destination")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.create_logs_custom_destination"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogsCustomDestinationsAPI.create_logs_custom_destination ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LogsCustomDestinationsAPI.create_logs_custom_destination"
      end
      # resource path
      local_var_path = '/api/v2/logs/config/custom_destinations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomDestinationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :create_logs_custom_destination,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsCustomDestinationsAPI#create_logs_custom_destination\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a custom destination.
    #
    # @see #delete_logs_custom_destination_with_http_info
    def delete_logs_custom_destination(custom_destination_id, opts = {})
      data, _status_code, _headers = delete_logs_custom_destination_with_http_info(custom_destination_id, opts)
      data
    end

    # Delete a custom destination.
    #
    # Deletes a custom destination.
    #
    # @param custom_destination_id [String] The ID of the custom destination.
    # @param opts [Hash] the optional parameters
    # @return [Array<(CustomDestinationDeleteResponse, Integer, Hash)>] CustomDestinationDeleteResponse data, response status code and response headers
    def delete_logs_custom_destination_with_http_info(custom_destination_id, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.delete_logs_custom_destination".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.delete_logs_custom_destination")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.delete_logs_custom_destination"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogsCustomDestinationsAPI.delete_logs_custom_destination ...'
      end
      # verify the required parameter 'custom_destination_id' is set
      if @api_client.config.client_side_validation && custom_destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'custom_destination_id' when calling LogsCustomDestinationsAPI.delete_logs_custom_destination"
      end
      # resource path
      local_var_path = '/api/v2/logs/config/custom_destinations/{custom_destination_id}'.sub('{custom_destination_id}', CGI.escape(custom_destination_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomDestinationDeleteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_logs_custom_destination,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsCustomDestinationsAPI#delete_logs_custom_destination\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a custom destination.
    #
    # @see #get_logs_custom_destination_with_http_info
    def get_logs_custom_destination(custom_destination_id, opts = {})
      data, _status_code, _headers = get_logs_custom_destination_with_http_info(custom_destination_id, opts)
      data
    end

    # Get a custom destination.
    #
    # Get a custom destination in the organization specified by the custom destination's `custom_destination_id`.
    #
    # @param custom_destination_id [String] The ID of the custom destination.
    # @param opts [Hash] the optional parameters
    # @return [Array<(CustomDestinationResponse, Integer, Hash)>] CustomDestinationResponse data, response status code and response headers
    def get_logs_custom_destination_with_http_info(custom_destination_id, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.get_logs_custom_destination".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.get_logs_custom_destination")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.get_logs_custom_destination"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogsCustomDestinationsAPI.get_logs_custom_destination ...'
      end
      # verify the required parameter 'custom_destination_id' is set
      if @api_client.config.client_side_validation && custom_destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'custom_destination_id' when calling LogsCustomDestinationsAPI.get_logs_custom_destination"
      end
      # resource path
      local_var_path = '/api/v2/logs/config/custom_destinations/{custom_destination_id}'.sub('{custom_destination_id}', CGI.escape(custom_destination_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomDestinationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_logs_custom_destination,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsCustomDestinationsAPI#get_logs_custom_destination\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List custom destinations.
    #
    # @see #list_logs_custom_destinations_with_http_info
    def list_logs_custom_destinations(opts = {})
      data, _status_code, _headers = list_logs_custom_destinations_with_http_info(opts)
      data
    end

    # List custom destinations.
    #
    # Returns all custom destinations, including their attributes and IDs.
    #
    # @param opts [Hash] the optional parameters
    # @return [Array<(CustomDestinationListResponse, Integer, Hash)>] CustomDestinationListResponse data, response status code and response headers
    def list_logs_custom_destinations_with_http_info(opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.list_logs_custom_destinations".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.list_logs_custom_destinations")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.list_logs_custom_destinations"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogsCustomDestinationsAPI.list_logs_custom_destinations ...'
      end
      # resource path
      local_var_path = '/api/v2/logs/config/custom_destinations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomDestinationListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :list_logs_custom_destinations,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsCustomDestinationsAPI#list_logs_custom_destinations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a custom destination.
    #
    # @see #update_logs_custom_destination_with_http_info
    def update_logs_custom_destination(custom_destination_id, body, opts = {})
      data, _status_code, _headers = update_logs_custom_destination_with_http_info(custom_destination_id, body, opts)
      data
    end

    # Update a custom destination.
    #
    # Edit a custom destination.
    #
    # @param custom_destination_id [String] The ID of the custom destination.
    # @param body [CustomDestinationUpdatePayload] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(CustomDestinationResponse, Integer, Hash)>] CustomDestinationResponse data, response status code and response headers
    def update_logs_custom_destination_with_http_info(custom_destination_id, body, opts = {})
      unstable_enabled = @api_client.config.unstable_operations["v2.update_logs_custom_destination".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "v2.update_logs_custom_destination")
      else
        raise DatadogAPIClient::APIError.new(message: format("Unstable operation '%s' is disabled", "v2.update_logs_custom_destination"))
      end

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogsCustomDestinationsAPI.update_logs_custom_destination ...'
      end
      # verify the required parameter 'custom_destination_id' is set
      if @api_client.config.client_side_validation && custom_destination_id.nil?
        fail ArgumentError, "Missing the required parameter 'custom_destination_id' when calling LogsCustomDestinationsAPI.update_logs_custom_destination"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LogsCustomDestinationsAPI.update_logs_custom_destination"
      end
      # resource path
      local_var_path = '/api/v2/logs/config/custom_destinations/{custom_destination_id}'.sub('{custom_destination_id}', CGI.escape(custom_destination_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomDestinationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_logs_custom_destination,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Put, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsCustomDestinationsAPI#update_logs_custom_destination\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
