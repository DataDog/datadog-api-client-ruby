=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class OnCallAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Create On-Call escalation policy.
    #
    # @see #create_on_call_escalation_policy_with_http_info
    def create_on_call_escalation_policy(body, opts = {})
      data, _status_code, _headers = create_on_call_escalation_policy_with_http_info(body, opts)
      data
    end

    # Create On-Call escalation policy.
    #
    # Create a new On-Call escalation policy
    #
    # @param body [EscalationPolicyCreateRequest] 
    # @param opts [Hash] the optional parameters
    # @option opts [String] :include Comma-separated list of included relationships to be returned. Allowed values: `teams`, `steps`, `steps.targets`.
    # @return [Array<(EscalationPolicy, Integer, Hash)>] EscalationPolicy data, response status code and response headers
    def create_on_call_escalation_policy_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnCallAPI.create_on_call_escalation_policy ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OnCallAPI.create_on_call_escalation_policy"
      end
      # resource path
      local_var_path = '/api/v2/on-call/escalation-policies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EscalationPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :create_on_call_escalation_policy,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnCallAPI#create_on_call_escalation_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create On-Call schedule.
    #
    # @see #create_on_call_schedule_with_http_info
    def create_on_call_schedule(body, opts = {})
      data, _status_code, _headers = create_on_call_schedule_with_http_info(body, opts)
      data
    end

    # Create On-Call schedule.
    #
    # Create a new On-Call schedule
    #
    # @param body [ScheduleCreateRequest] 
    # @param opts [Hash] the optional parameters
    # @option opts [String] :include Comma-separated list of included relationships to be returned. Allowed values: `teams`, `layers`, `layers.members`, `layers.members.user`.
    # @return [Array<(Schedule, Integer, Hash)>] Schedule data, response status code and response headers
    def create_on_call_schedule_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnCallAPI.create_on_call_schedule ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OnCallAPI.create_on_call_schedule"
      end
      # resource path
      local_var_path = '/api/v2/on-call/schedules'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Schedule'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :create_on_call_schedule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnCallAPI#create_on_call_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete On-Call escalation policy.
    #
    # @see #delete_on_call_escalation_policy_with_http_info
    def delete_on_call_escalation_policy(policy_id, opts = {})
      delete_on_call_escalation_policy_with_http_info(policy_id, opts)
      nil
    end

    # Delete On-Call escalation policy.
    #
    # Delete an On-Call escalation policy
    #
    # @param policy_id [String] The ID of the escalation policy
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_on_call_escalation_policy_with_http_info(policy_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnCallAPI.delete_on_call_escalation_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling OnCallAPI.delete_on_call_escalation_policy"
      end
      # resource path
      local_var_path = '/api/v2/on-call/escalation-policies/{policy_id}'.sub('{policy_id}', CGI.escape(policy_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_on_call_escalation_policy,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnCallAPI#delete_on_call_escalation_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete On-Call schedule.
    #
    # @see #delete_on_call_schedule_with_http_info
    def delete_on_call_schedule(schedule_id, opts = {})
      delete_on_call_schedule_with_http_info(schedule_id, opts)
      nil
    end

    # Delete On-Call schedule.
    #
    # Delete an On-Call schedule
    #
    # @param schedule_id [String] The ID of the schedule
    # @param opts [Hash] the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_on_call_schedule_with_http_info(schedule_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnCallAPI.delete_on_call_schedule ...'
      end
      # verify the required parameter 'schedule_id' is set
      if @api_client.config.client_side_validation && schedule_id.nil?
        fail ArgumentError, "Missing the required parameter 'schedule_id' when calling OnCallAPI.delete_on_call_schedule"
      end
      # resource path
      local_var_path = '/api/v2/on-call/schedules/{schedule_id}'.sub('{schedule_id}', CGI.escape(schedule_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :delete_on_call_schedule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Delete, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnCallAPI#delete_on_call_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get On-Call escalation policy.
    #
    # @see #get_on_call_escalation_policy_with_http_info
    def get_on_call_escalation_policy(policy_id, opts = {})
      data, _status_code, _headers = get_on_call_escalation_policy_with_http_info(policy_id, opts)
      data
    end

    # Get On-Call escalation policy.
    #
    # Get an On-Call escalation policy
    #
    # @param policy_id [String] The ID of the escalation policy
    # @param opts [Hash] the optional parameters
    # @option opts [String] :include Comma-separated list of included relationships to be returned. Allowed values: `teams`, `steps`, `steps.targets`.
    # @return [Array<(EscalationPolicy, Integer, Hash)>] EscalationPolicy data, response status code and response headers
    def get_on_call_escalation_policy_with_http_info(policy_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnCallAPI.get_on_call_escalation_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling OnCallAPI.get_on_call_escalation_policy"
      end
      # resource path
      local_var_path = '/api/v2/on-call/escalation-policies/{policy_id}'.sub('{policy_id}', CGI.escape(policy_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EscalationPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_on_call_escalation_policy,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnCallAPI#get_on_call_escalation_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get On-Call schedule.
    #
    # @see #get_on_call_schedule_with_http_info
    def get_on_call_schedule(schedule_id, opts = {})
      data, _status_code, _headers = get_on_call_schedule_with_http_info(schedule_id, opts)
      data
    end

    # Get On-Call schedule.
    #
    # Get an On-Call schedule
    #
    # @param schedule_id [String] The ID of the schedule
    # @param opts [Hash] the optional parameters
    # @option opts [String] :include Comma-separated list of included relationships to be returned. Allowed values: `teams`, `layers`, `layers.members`, `layers.members.user`.
    # @return [Array<(Schedule, Integer, Hash)>] Schedule data, response status code and response headers
    def get_on_call_schedule_with_http_info(schedule_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnCallAPI.get_on_call_schedule ...'
      end
      # verify the required parameter 'schedule_id' is set
      if @api_client.config.client_side_validation && schedule_id.nil?
        fail ArgumentError, "Missing the required parameter 'schedule_id' when calling OnCallAPI.get_on_call_schedule"
      end
      # resource path
      local_var_path = '/api/v2/on-call/schedules/{schedule_id}'.sub('{schedule_id}', CGI.escape(schedule_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Schedule'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_on_call_schedule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnCallAPI#get_on_call_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get On-Call team routing rules.
    #
    # @see #get_on_call_team_routing_rules_with_http_info
    def get_on_call_team_routing_rules(team_id, opts = {})
      data, _status_code, _headers = get_on_call_team_routing_rules_with_http_info(team_id, opts)
      data
    end

    # Get On-Call team routing rules.
    #
    # Get a team's On-Call routing rules
    #
    # @param team_id [String] The team ID
    # @param opts [Hash] the optional parameters
    # @option opts [String] :include Comma-separated list of included relationships to be returned. Allowed values: `rules`, `rules.policy`.
    # @return [Array<(TeamRoutingRules, Integer, Hash)>] TeamRoutingRules data, response status code and response headers
    def get_on_call_team_routing_rules_with_http_info(team_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnCallAPI.get_on_call_team_routing_rules ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling OnCallAPI.get_on_call_team_routing_rules"
      end
      # resource path
      local_var_path = '/api/v2/on-call/teams/{team_id}/routing-rules'.sub('{team_id}', CGI.escape(team_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamRoutingRules'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_on_call_team_routing_rules,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnCallAPI#get_on_call_team_routing_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the schedule on-call user.
    #
    # @see #get_schedule_on_call_user_with_http_info
    def get_schedule_on_call_user(schedule_id, opts = {})
      data, _status_code, _headers = get_schedule_on_call_user_with_http_info(schedule_id, opts)
      data
    end

    # Get the schedule on-call user.
    #
    # Retrieves the user who is on-call for the specified schedule at a given time.
    #
    # @param schedule_id [String] The ID of the schedule.
    # @param opts [Hash] the optional parameters
    # @option opts [String] :include Specifies related resources to include in the response as a comma-separated list. Allowed value: `user`.
    # @option opts [String] :filter_at_ts Retrieves the on-call user at the given timestamp (ISO-8601). Defaults to the current time if omitted."
    # @return [Array<(Shift, Integer, Hash)>] Shift data, response status code and response headers
    def get_schedule_on_call_user_with_http_info(schedule_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnCallAPI.get_schedule_on_call_user ...'
      end
      # verify the required parameter 'schedule_id' is set
      if @api_client.config.client_side_validation && schedule_id.nil?
        fail ArgumentError, "Missing the required parameter 'schedule_id' when calling OnCallAPI.get_schedule_on_call_user"
      end
      # resource path
      local_var_path = '/api/v2/on-call/schedules/{schedule_id}/on-call'.sub('{schedule_id}', CGI.escape(schedule_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'filter[at_ts]'] = opts[:'filter_at_ts'] if !opts[:'filter_at_ts'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Shift'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_schedule_on_call_user,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnCallAPI#get_schedule_on_call_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get team on-call users.
    #
    # @see #get_team_on_call_users_with_http_info
    def get_team_on_call_users(team_id, opts = {})
      data, _status_code, _headers = get_team_on_call_users_with_http_info(team_id, opts)
      data
    end

    # Get team on-call users.
    #
    # Get a team's on-call users at a given time
    #
    # @param team_id [String] The team ID
    # @param opts [Hash] the optional parameters
    # @option opts [String] :include Comma-separated list of included relationships to be returned. Allowed values: `responders`, `escalations`, `escalations.responders`.
    # @return [Array<(TeamOnCallResponders, Integer, Hash)>] TeamOnCallResponders data, response status code and response headers
    def get_team_on_call_users_with_http_info(team_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnCallAPI.get_team_on_call_users ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling OnCallAPI.get_team_on_call_users"
      end
      # resource path
      local_var_path = '/api/v2/on-call/teams/{team_id}/on-call'.sub('{team_id}', CGI.escape(team_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamOnCallResponders'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_team_on_call_users,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnCallAPI#get_team_on_call_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set On-Call team routing rules.
    #
    # @see #set_on_call_team_routing_rules_with_http_info
    def set_on_call_team_routing_rules(team_id, body, opts = {})
      data, _status_code, _headers = set_on_call_team_routing_rules_with_http_info(team_id, body, opts)
      data
    end

    # Set On-Call team routing rules.
    #
    # Set a team's On-Call routing rules
    #
    # @param team_id [String] The team ID
    # @param body [TeamRoutingRulesRequest] 
    # @param opts [Hash] the optional parameters
    # @option opts [String] :include Comma-separated list of included relationships to be returned. Allowed values: `rules`, `rules.policy`.
    # @return [Array<(TeamRoutingRules, Integer, Hash)>] TeamRoutingRules data, response status code and response headers
    def set_on_call_team_routing_rules_with_http_info(team_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnCallAPI.set_on_call_team_routing_rules ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling OnCallAPI.set_on_call_team_routing_rules"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OnCallAPI.set_on_call_team_routing_rules"
      end
      # resource path
      local_var_path = '/api/v2/on-call/teams/{team_id}/routing-rules'.sub('{team_id}', CGI.escape(team_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TeamRoutingRules'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :set_on_call_team_routing_rules,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Put, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnCallAPI#set_on_call_team_routing_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update On-Call escalation policy.
    #
    # @see #update_on_call_escalation_policy_with_http_info
    def update_on_call_escalation_policy(policy_id, body, opts = {})
      data, _status_code, _headers = update_on_call_escalation_policy_with_http_info(policy_id, body, opts)
      data
    end

    # Update On-Call escalation policy.
    #
    # Update an On-Call escalation policy
    #
    # @param policy_id [String] The ID of the escalation policy
    # @param body [EscalationPolicyUpdateRequest] 
    # @param opts [Hash] the optional parameters
    # @option opts [String] :include Comma-separated list of included relationships to be returned. Allowed values: `teams`, `steps`, `steps.targets`.
    # @return [Array<(EscalationPolicy, Integer, Hash)>] EscalationPolicy data, response status code and response headers
    def update_on_call_escalation_policy_with_http_info(policy_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnCallAPI.update_on_call_escalation_policy ...'
      end
      # verify the required parameter 'policy_id' is set
      if @api_client.config.client_side_validation && policy_id.nil?
        fail ArgumentError, "Missing the required parameter 'policy_id' when calling OnCallAPI.update_on_call_escalation_policy"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OnCallAPI.update_on_call_escalation_policy"
      end
      # resource path
      local_var_path = '/api/v2/on-call/escalation-policies/{policy_id}'.sub('{policy_id}', CGI.escape(policy_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EscalationPolicy'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_on_call_escalation_policy,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Put, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnCallAPI#update_on_call_escalation_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update On-Call schedule.
    #
    # @see #update_on_call_schedule_with_http_info
    def update_on_call_schedule(schedule_id, body, opts = {})
      data, _status_code, _headers = update_on_call_schedule_with_http_info(schedule_id, body, opts)
      data
    end

    # Update On-Call schedule.
    #
    # Update a new On-Call schedule
    #
    # @param schedule_id [String] The ID of the schedule
    # @param body [ScheduleUpdateRequest] 
    # @param opts [Hash] the optional parameters
    # @option opts [String] :include Comma-separated list of included relationships to be returned. Allowed values: `teams`, `layers`, `layers.members`, `layers.members.user`.
    # @return [Array<(Schedule, Integer, Hash)>] Schedule data, response status code and response headers
    def update_on_call_schedule_with_http_info(schedule_id, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OnCallAPI.update_on_call_schedule ...'
      end
      # verify the required parameter 'schedule_id' is set
      if @api_client.config.client_side_validation && schedule_id.nil?
        fail ArgumentError, "Missing the required parameter 'schedule_id' when calling OnCallAPI.update_on_call_schedule"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OnCallAPI.update_on_call_schedule"
      end
      # resource path
      local_var_path = '/api/v2/on-call/schedules/{schedule_id}'.sub('{schedule_id}', CGI.escape(schedule_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Schedule'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_on_call_schedule,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Put, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OnCallAPI#update_on_call_schedule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
