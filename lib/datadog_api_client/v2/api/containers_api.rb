=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class ContainersAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Get All Containers.
    #
    # @see #list_containers_with_http_info
    def list_containers(opts = {})
      data, _status_code, _headers = list_containers_with_http_info(opts)
      data
    end

    # Get All Containers.
    #
    # Get all containers for your organization.
    #
    # @param opts [Hash] the optional parameters
    # @option opts [String] :filter_tags Comma-separated list of tags to filter containers by.
    # @option opts [String] :group_by Comma-separated list of tags to group containers by.
    # @option opts [String] :sort Attribute to sort containers by.
    # @option opts [Integer] :page_size Maximum number of results returned.
    # @option opts [String] :page_cursor String to query the next page of results. This key is provided with each valid response from the API in `meta.pagination.next_cursor`.
    # @return [Array<(ContainersResponse, Integer, Hash)>] ContainersResponse data, response status code and response headers
    def list_containers_with_http_info(opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContainersAPI.list_containers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContainersAPI.list_containers, must be smaller than or equal to 10000.'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ContainersAPI.list_containers, must be greater than or equal to 1.'
      end
      # resource path
      local_var_path = '/api/v2/containers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter[tags]'] = opts[:'filter_tags'] if !opts[:'filter_tags'].nil?
      query_params[:'group_by'] = opts[:'group_by'] if !opts[:'group_by'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'page[size]'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page[cursor]'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ContainersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :list_containers,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContainersAPI#list_containers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Containers.
    #
    # Provide a paginated version of {#list_containers}, returning all items.
    #
    # To use it you need to use a block: list_containers_with_pagination { |item| p item }
    #
    # @yield [ContainerItem] Paginated items
    def list_containers_with_pagination(opts = {})
        api_version = "V2"
        page_size = @api_client.get_attribute_from_path(opts, "page_size", 1000)
        @api_client.set_attribute_from_path(api_version, opts, "page_size", Integer, page_size)
        while true do
            response = list_containers(opts)
            @api_client.get_attribute_from_path(response, "data").each { |item| yield(item) }
            if @api_client.get_attribute_from_path(response, "data").length < page_size
              break
            end
            @api_client.set_attribute_from_path(api_version, opts, "page_cursor", String, @api_client.get_attribute_from_path(response, "meta.pagination.next_cursor"))
        end
    end
  end
end
