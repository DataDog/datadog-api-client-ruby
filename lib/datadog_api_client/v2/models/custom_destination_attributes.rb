=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The custom destination attributes.
  class CustomDestinationAttributes
    include BaseGenericModel

    # The max amount of bytes to buffer for the custom destination.
    attr_accessor :buffer_max_bytes

    # The timeout amount in seconds to buffer for the custom destination.
    attr_accessor :buffer_timeout_seconds

    # The compression method used for the custom destination.
    attr_accessor :compression

    # The enabled status of the custom destination.
    attr_accessor :enabled

    # The archiving destination to fall back to.
    attr_accessor :fallback_destination

    # The destination to forward events to.
    attr_reader :forwarder_destination

    # The retry duration in seconds for the custom destination.
    attr_accessor :max_retry_duration_seconds

    # The name of the custom destination.
    attr_reader :name

    # The search query of the custom destination.
    attr_accessor :query

    # The version of the custom destination to prevent concurrent changes.
    attr_reader :version

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'buffer_max_bytes' => :'bufferMaxBytes',
        :'buffer_timeout_seconds' => :'bufferTimeoutSeconds',
        :'compression' => :'compression',
        :'enabled' => :'enabled',
        :'fallback_destination' => :'fallbackDestination',
        :'forwarder_destination' => :'forwarderDestination',
        :'max_retry_duration_seconds' => :'maxRetryDurationSeconds',
        :'name' => :'name',
        :'query' => :'query',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'buffer_max_bytes' => :'Integer',
        :'buffer_timeout_seconds' => :'Integer',
        :'compression' => :'CustomDestinationCompressionType',
        :'enabled' => :'Boolean',
        :'fallback_destination' => :'CustomDestinationFallbackDestination',
        :'forwarder_destination' => :'CustomDestinationForwarderDestination',
        :'max_retry_duration_seconds' => :'Integer',
        :'name' => :'String',
        :'query' => :'String',
        :'version' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::CustomDestinationAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V2::CustomDestinationAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'buffer_max_bytes')
        self.buffer_max_bytes = attributes[:'buffer_max_bytes']
      end

      if attributes.key?(:'buffer_timeout_seconds')
        self.buffer_timeout_seconds = attributes[:'buffer_timeout_seconds']
      end

      if attributes.key?(:'compression')
        self.compression = attributes[:'compression']
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'fallback_destination')
        self.fallback_destination = attributes[:'fallback_destination']
      end

      if attributes.key?(:'forwarder_destination')
        self.forwarder_destination = attributes[:'forwarder_destination']
      end

      if attributes.key?(:'max_retry_duration_seconds')
        self.max_retry_duration_seconds = attributes[:'max_retry_duration_seconds']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'query')
        self.query = attributes[:'query']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @forwarder_destination.nil?
      return false if @name.nil?
      return false if @version.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param forwarder_destination [Object] Object to be assigned
    # @!visibility private
    def forwarder_destination=(forwarder_destination)
      if forwarder_destination.nil?
        fail ArgumentError, 'invalid value for "forwarder_destination", forwarder_destination cannot be nil.'
      end
      @forwarder_destination = forwarder_destination
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Custom attribute writer method with validation
    # @param version [Object] Object to be assigned
    # @!visibility private
    def version=(version)
      if version.nil?
        fail ArgumentError, 'invalid value for "version", version cannot be nil.'
      end
      @version = version
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          buffer_max_bytes == o.buffer_max_bytes &&
          buffer_timeout_seconds == o.buffer_timeout_seconds &&
          compression == o.compression &&
          enabled == o.enabled &&
          fallback_destination == o.fallback_destination &&
          forwarder_destination == o.forwarder_destination &&
          max_retry_duration_seconds == o.max_retry_duration_seconds &&
          name == o.name &&
          query == o.query &&
          version == o.version
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [buffer_max_bytes, buffer_timeout_seconds, compression, enabled, fallback_destination, forwarder_destination, max_retry_duration_seconds, name, query, version].hash
    end
  end
end
