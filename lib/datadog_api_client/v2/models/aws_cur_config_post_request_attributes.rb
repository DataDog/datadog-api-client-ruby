=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Attributes for AWS CUR config Post Request.
  class AwsCURConfigPostRequestAttributes
    include BaseGenericModel

    # The AWS account ID.
    attr_reader :account_id

    # The AWS bucket name used to store the Cost and Usage Report.
    attr_reader :bucket_name

    # The region the bucket is located in.
    attr_accessor :bucket_region

    # Whether or not the Cloud Cost Management account is enabled.
    attr_accessor :is_enabled

    # The month of the report.
    attr_reader :months

    # The name of the Cost and Usage Report.
    attr_reader :report_name

    # The report prefix used for the Cost and Usage Report.
    attr_reader :report_prefix

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'account_id' => :'account_id',
        :'bucket_name' => :'bucket_name',
        :'bucket_region' => :'bucket_region',
        :'is_enabled' => :'is_enabled',
        :'months' => :'months',
        :'report_name' => :'report_name',
        :'report_prefix' => :'report_prefix'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'account_id' => :'String',
        :'bucket_name' => :'String',
        :'bucket_region' => :'String',
        :'is_enabled' => :'Boolean',
        :'months' => :'Integer',
        :'report_name' => :'String',
        :'report_prefix' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::AwsCURConfigPostRequestAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'bucket_name')
        self.bucket_name = attributes[:'bucket_name']
      end

      if attributes.key?(:'bucket_region')
        self.bucket_region = attributes[:'bucket_region']
      end

      if attributes.key?(:'is_enabled')
        self.is_enabled = attributes[:'is_enabled']
      end

      if attributes.key?(:'months')
        self.months = attributes[:'months']
      end

      if attributes.key?(:'report_name')
        self.report_name = attributes[:'report_name']
      end

      if attributes.key?(:'report_prefix')
        self.report_prefix = attributes[:'report_prefix']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @account_id.nil?
      return false if @bucket_name.nil?
      return false if !@months.nil? && @months > 36
      return false if @report_name.nil?
      return false if @report_prefix.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param account_id [Object] Object to be assigned
    # @!visibility private
    def account_id=(account_id)
      if account_id.nil?
        fail ArgumentError, 'invalid value for "account_id", account_id cannot be nil.'
      end
      @account_id = account_id
    end

    # Custom attribute writer method with validation
    # @param bucket_name [Object] Object to be assigned
    # @!visibility private
    def bucket_name=(bucket_name)
      if bucket_name.nil?
        fail ArgumentError, 'invalid value for "bucket_name", bucket_name cannot be nil.'
      end
      @bucket_name = bucket_name
    end

    # Custom attribute writer method with validation
    # @param months [Object] Object to be assigned
    # @!visibility private
    def months=(months)
      if !months.nil? && months > 36
        fail ArgumentError, 'invalid value for "months", must be smaller than or equal to 36.'
      end
      @months = months
    end

    # Custom attribute writer method with validation
    # @param report_name [Object] Object to be assigned
    # @!visibility private
    def report_name=(report_name)
      if report_name.nil?
        fail ArgumentError, 'invalid value for "report_name", report_name cannot be nil.'
      end
      @report_name = report_name
    end

    # Custom attribute writer method with validation
    # @param report_prefix [Object] Object to be assigned
    # @!visibility private
    def report_prefix=(report_prefix)
      if report_prefix.nil?
        fail ArgumentError, 'invalid value for "report_prefix", report_prefix cannot be nil.'
      end
      @report_prefix = report_prefix
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_id == o.account_id &&
          bucket_name == o.bucket_name &&
          bucket_region == o.bucket_region &&
          is_enabled == o.is_enabled &&
          months == o.months &&
          report_name == o.report_name &&
          report_prefix == o.report_prefix
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [account_id, bucket_name, bucket_region, is_enabled, months, report_name, report_prefix].hash
    end
  end
end
