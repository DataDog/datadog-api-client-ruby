=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Attributes of a deployment in the response.
  class FleetDeploymentAttributes
    include BaseGenericModel

    # Ordered list of configuration file operations to perform on the target hosts.
    attr_accessor :config_operations

    # Estimated completion time of the deployment as a Unix timestamp (seconds since epoch).
    attr_accessor :estimated_end_time_unix

    # Query used to filter and select target hosts for the deployment. Uses the Datadog query syntax.
    attr_accessor :filter_query

    # Current high-level status of the deployment (for example, "pending", "running", "completed", "failed").
    attr_accessor :high_level_status

    # Total number of hosts targeted by this deployment.
    attr_accessor :total_hosts

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'config_operations' => :'config_operations',
        :'estimated_end_time_unix' => :'estimated_end_time_unix',
        :'filter_query' => :'filter_query',
        :'high_level_status' => :'high_level_status',
        :'total_hosts' => :'total_hosts'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'config_operations' => :'Array<FleetDeploymentOperation>',
        :'estimated_end_time_unix' => :'Integer',
        :'filter_query' => :'String',
        :'high_level_status' => :'String',
        :'total_hosts' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::FleetDeploymentAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'config_operations')
        if (value = attributes[:'config_operations']).is_a?(Array)
          self.config_operations = value
        end
      end

      if attributes.key?(:'estimated_end_time_unix')
        self.estimated_end_time_unix = attributes[:'estimated_end_time_unix']
      end

      if attributes.key?(:'filter_query')
        self.filter_query = attributes[:'filter_query']
      end

      if attributes.key?(:'high_level_status')
        self.high_level_status = attributes[:'high_level_status']
      end

      if attributes.key?(:'total_hosts')
        self.total_hosts = attributes[:'total_hosts']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          config_operations == o.config_operations &&
          estimated_end_time_unix == o.estimated_end_time_unix &&
          filter_query == o.filter_query &&
          high_level_status == o.high_level_status &&
          total_hosts == o.total_hosts &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [config_operations, estimated_end_time_unix, filter_query, high_level_status, total_hosts, additional_properties].hash
    end
  end
end
