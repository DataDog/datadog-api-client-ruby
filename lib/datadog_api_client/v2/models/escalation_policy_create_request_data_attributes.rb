=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Defines the attributes for creating an escalation policy, including its description, name, resolution behavior, retries, and steps.
  class EscalationPolicyCreateRequestDataAttributes
    include BaseGenericModel

    # Provides a detailed text description of the new escalation policy.
    attr_accessor :description

    # Specifies the name for the new escalation policy.
    attr_reader :name

    # Indicates whether the page is automatically resolved when the policy ends.
    attr_accessor :resolve_page_on_policy_end

    # Specifies how many times the escalation sequence is retried if there is no response.
    attr_accessor :retries

    # A list of escalation steps, each defining assignment, escalation timeout, and targets for the new policy.
    attr_reader :steps

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'description' => :'description',
        :'name' => :'name',
        :'resolve_page_on_policy_end' => :'resolve_page_on_policy_end',
        :'retries' => :'retries',
        :'steps' => :'steps'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'description' => :'String',
        :'name' => :'String',
        :'resolve_page_on_policy_end' => :'Boolean',
        :'retries' => :'Integer',
        :'steps' => :'Array<EscalationPolicyCreateRequestDataAttributesStepsItems>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::EscalationPolicyCreateRequestDataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'resolve_page_on_policy_end')
        self.resolve_page_on_policy_end = attributes[:'resolve_page_on_policy_end']
      end

      if attributes.key?(:'retries')
        self.retries = attributes[:'retries']
      end

      if attributes.key?(:'steps')
        if (value = attributes[:'steps']).is_a?(Array)
          self.steps = value
        end
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @name.nil?
      return false if @steps.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Custom attribute writer method with validation
    # @param steps [Object] Object to be assigned
    # @!visibility private
    def steps=(steps)
      if steps.nil?
        fail ArgumentError, 'invalid value for "steps", steps cannot be nil.'
      end
      @steps = steps
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          description == o.description &&
          name == o.name &&
          resolve_page_on_policy_end == o.resolve_page_on_policy_end &&
          retries == o.retries &&
          steps == o.steps &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [description, name, resolve_page_on_policy_end, retries, steps, additional_properties].hash
    end
  end
end
