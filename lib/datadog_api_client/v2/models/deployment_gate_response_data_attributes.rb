=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Basic information about a deployment gate.
  class DeploymentGateResponseDataAttributes
    include BaseGenericModel

    # The timestamp when the deployment gate was created.
    attr_reader :created_at

    # Information about the user who created the deployment gate.
    attr_reader :created_by

    # Whether this gate is run in dry-run mode.
    attr_reader :dry_run

    # The environment of the deployment gate.
    attr_reader :env

    # The identifier of the deployment gate.
    attr_reader :identifier

    # The service of the deployment gate.
    attr_reader :service

    # The timestamp when the deployment gate was last updated.
    attr_accessor :updated_at

    # Information about the user who updated the deployment gate.
    attr_accessor :updated_by

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'created_at' => :'created_at',
        :'created_by' => :'created_by',
        :'dry_run' => :'dry_run',
        :'env' => :'env',
        :'identifier' => :'identifier',
        :'service' => :'service',
        :'updated_at' => :'updated_at',
        :'updated_by' => :'updated_by'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'created_at' => :'Time',
        :'created_by' => :'DeploymentGateResponseDataAttributesCreatedBy',
        :'dry_run' => :'Boolean',
        :'env' => :'String',
        :'identifier' => :'String',
        :'service' => :'String',
        :'updated_at' => :'Time',
        :'updated_by' => :'DeploymentGateResponseDataAttributesUpdatedBy'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::DeploymentGateResponseDataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'dry_run')
        self.dry_run = attributes[:'dry_run']
      end

      if attributes.key?(:'env')
        self.env = attributes[:'env']
      end

      if attributes.key?(:'identifier')
        self.identifier = attributes[:'identifier']
      end

      if attributes.key?(:'service')
        self.service = attributes[:'service']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'updated_by')
        self.updated_by = attributes[:'updated_by']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @created_at.nil?
      return false if @created_by.nil?
      return false if @dry_run.nil?
      return false if @env.nil?
      return false if @identifier.nil?
      return false if @service.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param created_at [Object] Object to be assigned
    # @!visibility private
    def created_at=(created_at)
      if created_at.nil?
        fail ArgumentError, 'invalid value for "created_at", created_at cannot be nil.'
      end
      @created_at = created_at
    end

    # Custom attribute writer method with validation
    # @param created_by [Object] Object to be assigned
    # @!visibility private
    def created_by=(created_by)
      if created_by.nil?
        fail ArgumentError, 'invalid value for "created_by", created_by cannot be nil.'
      end
      @created_by = created_by
    end

    # Custom attribute writer method with validation
    # @param dry_run [Object] Object to be assigned
    # @!visibility private
    def dry_run=(dry_run)
      if dry_run.nil?
        fail ArgumentError, 'invalid value for "dry_run", dry_run cannot be nil.'
      end
      @dry_run = dry_run
    end

    # Custom attribute writer method with validation
    # @param env [Object] Object to be assigned
    # @!visibility private
    def env=(env)
      if env.nil?
        fail ArgumentError, 'invalid value for "env", env cannot be nil.'
      end
      @env = env
    end

    # Custom attribute writer method with validation
    # @param identifier [Object] Object to be assigned
    # @!visibility private
    def identifier=(identifier)
      if identifier.nil?
        fail ArgumentError, 'invalid value for "identifier", identifier cannot be nil.'
      end
      @identifier = identifier
    end

    # Custom attribute writer method with validation
    # @param service [Object] Object to be assigned
    # @!visibility private
    def service=(service)
      if service.nil?
        fail ArgumentError, 'invalid value for "service", service cannot be nil.'
      end
      @service = service
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_at == o.created_at &&
          created_by == o.created_by &&
          dry_run == o.dry_run &&
          env == o.env &&
          identifier == o.identifier &&
          service == o.service &&
          updated_at == o.updated_at &&
          updated_by == o.updated_by &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [created_at, created_by, dry_run, env, identifier, service, updated_at, updated_by, additional_properties].hash
    end
  end
end
