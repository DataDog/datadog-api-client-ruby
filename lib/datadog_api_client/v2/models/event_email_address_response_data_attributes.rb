=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # 
  class EventEmailAddressResponseDataAttributes
    include BaseGenericModel

    #
    attr_accessor :alert_type

    #
    attr_reader :created_at

    #
    attr_accessor :description

    #
    attr_reader :email

    #
    attr_reader :format

    #
    attr_accessor :last_used_at

    #
    attr_reader :notify_handles

    #
    attr_accessor :revoked_at

    #
    attr_reader :tags

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'alert_type' => :'alert_type',
        :'created_at' => :'created_at',
        :'description' => :'description',
        :'email' => :'email',
        :'format' => :'format',
        :'last_used_at' => :'last_used_at',
        :'notify_handles' => :'notify_handles',
        :'revoked_at' => :'revoked_at',
        :'tags' => :'tags'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'alert_type' => :'String',
        :'created_at' => :'Time',
        :'description' => :'String',
        :'email' => :'String',
        :'format' => :'String',
        :'last_used_at' => :'Time',
        :'notify_handles' => :'Array<String>',
        :'revoked_at' => :'Time',
        :'tags' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::EventEmailAddressResponseDataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'alert_type')
        self.alert_type = attributes[:'alert_type']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'format')
        self.format = attributes[:'format']
      end

      if attributes.key?(:'last_used_at')
        self.last_used_at = attributes[:'last_used_at']
      end

      if attributes.key?(:'notify_handles')
        if (value = attributes[:'notify_handles']).is_a?(Array)
          self.notify_handles = value
        end
      end

      if attributes.key?(:'revoked_at')
        self.revoked_at = attributes[:'revoked_at']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @created_at.nil?
      return false if @email.nil?
      return false if @format.nil?
      return false if @notify_handles.nil?
      return false if @tags.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param created_at [Object] Object to be assigned
    # @!visibility private
    def created_at=(created_at)
      if created_at.nil?
        fail ArgumentError, 'invalid value for "created_at", created_at cannot be nil.'
      end
      @created_at = created_at
    end

    # Custom attribute writer method with validation
    # @param email [Object] Object to be assigned
    # @!visibility private
    def email=(email)
      if email.nil?
        fail ArgumentError, 'invalid value for "email", email cannot be nil.'
      end
      @email = email
    end

    # Custom attribute writer method with validation
    # @param format [Object] Object to be assigned
    # @!visibility private
    def format=(format)
      if format.nil?
        fail ArgumentError, 'invalid value for "format", format cannot be nil.'
      end
      @format = format
    end

    # Custom attribute writer method with validation
    # @param notify_handles [Object] Object to be assigned
    # @!visibility private
    def notify_handles=(notify_handles)
      if notify_handles.nil?
        fail ArgumentError, 'invalid value for "notify_handles", notify_handles cannot be nil.'
      end
      @notify_handles = notify_handles
    end

    # Custom attribute writer method with validation
    # @param tags [Object] Object to be assigned
    # @!visibility private
    def tags=(tags)
      if tags.nil?
        fail ArgumentError, 'invalid value for "tags", tags cannot be nil.'
      end
      @tags = tags
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          alert_type == o.alert_type &&
          created_at == o.created_at &&
          description == o.description &&
          email == o.email &&
          format == o.format &&
          last_used_at == o.last_used_at &&
          notify_handles == o.notify_handles &&
          revoked_at == o.revoked_at &&
          tags == o.tags &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [alert_type, created_at, description, email, format, last_used_at, notify_handles, revoked_at, tags, additional_properties].hash
    end
  end
end
