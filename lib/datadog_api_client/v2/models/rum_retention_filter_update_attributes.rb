=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The object describing attributes of a RUM retention filter to update.
  class RumRetentionFilterUpdateAttributes
    include BaseGenericModel

    # Whether the retention filter is enabled.
    attr_accessor :enabled

    # The type of RUM events to filter on.
    attr_accessor :event_type

    # The name of a RUM retention filter.
    attr_accessor :name

    # The query string for a RUM retention filter.
    attr_accessor :query

    # The sample rate for a RUM retention filter, between 0 and 100.
    attr_reader :sample_rate

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'enabled' => :'enabled',
        :'event_type' => :'event_type',
        :'name' => :'name',
        :'query' => :'query',
        :'sample_rate' => :'sample_rate'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'enabled' => :'Boolean',
        :'event_type' => :'RumRetentionFilterEventType',
        :'name' => :'String',
        :'query' => :'String',
        :'sample_rate' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::RumRetentionFilterUpdateAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'event_type')
        self.event_type = attributes[:'event_type']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'query')
        self.query = attributes[:'query']
      end

      if attributes.key?(:'sample_rate')
        self.sample_rate = attributes[:'sample_rate']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if !@sample_rate.nil? && @sample_rate > 100
      return false if !@sample_rate.nil? && @sample_rate < 0
      true
    end

    # Custom attribute writer method with validation
    # @param sample_rate [Object] Object to be assigned
    # @!visibility private
    def sample_rate=(sample_rate)
      if !sample_rate.nil? && sample_rate > 100
        fail ArgumentError, 'invalid value for "sample_rate", must be smaller than or equal to 100.'
      end
      if !sample_rate.nil? && sample_rate < 0
        fail ArgumentError, 'invalid value for "sample_rate", must be greater than or equal to 0.'
      end
      @sample_rate = sample_rate
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          enabled == o.enabled &&
          event_type == o.event_type &&
          name == o.name &&
          query == o.query &&
          sample_rate == o.sample_rate &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [enabled, event_type, name, query, sample_rate, additional_properties].hash
    end
  end
end
