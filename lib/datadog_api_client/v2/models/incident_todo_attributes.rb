=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Incident todo's attributes.
  class IncidentTodoAttributes
    include BaseGenericModel

    # Array of todo assignees.
    attr_reader :assignees

    # Timestamp when the todo was completed.
    attr_accessor :completed

    # The follow-up task's content.
    attr_reader :content

    # Timestamp when the incident todo was created.
    attr_accessor :created

    # Timestamp when the todo should be completed by.
    attr_accessor :due_date

    # UUID of the incident this todo is connected to.
    attr_accessor :incident_id

    # Timestamp when the incident todo was last modified.
    attr_accessor :modified

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'assignees' => :'assignees',
        :'completed' => :'completed',
        :'content' => :'content',
        :'created' => :'created',
        :'due_date' => :'due_date',
        :'incident_id' => :'incident_id',
        :'modified' => :'modified'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'assignees' => :'Array<IncidentTodoAssignee>',
        :'completed' => :'String',
        :'content' => :'String',
        :'created' => :'Time',
        :'due_date' => :'String',
        :'incident_id' => :'String',
        :'modified' => :'Time'
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
        :'completed',
        :'due_date',
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::IncidentTodoAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'assignees')
        if (value = attributes[:'assignees']).is_a?(Array)
          self.assignees = value
        end
      end

      if attributes.key?(:'completed')
        self.completed = attributes[:'completed']
      end

      if attributes.key?(:'content')
        self.content = attributes[:'content']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.key?(:'incident_id')
        self.incident_id = attributes[:'incident_id']
      end

      if attributes.key?(:'modified')
        self.modified = attributes[:'modified']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @assignees.nil?
      return false if @content.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param assignees [Object] Object to be assigned
    # @!visibility private
    def assignees=(assignees)
      if assignees.nil?
        fail ArgumentError, 'invalid value for "assignees", assignees cannot be nil.'
      end
      @assignees = assignees
    end

    # Custom attribute writer method with validation
    # @param content [Object] Object to be assigned
    # @!visibility private
    def content=(content)
      if content.nil?
        fail ArgumentError, 'invalid value for "content", content cannot be nil.'
      end
      @content = content
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          assignees == o.assignees &&
          completed == o.completed &&
          content == o.content &&
          created == o.created &&
          due_date == o.due_date &&
          incident_id == o.incident_id &&
          modified == o.modified
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [assignees, completed, content, created, due_date, incident_id, modified].hash
    end
  end
end
