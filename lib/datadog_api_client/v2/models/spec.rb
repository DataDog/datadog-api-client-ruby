=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The spec defines what the workflow does.
  class Spec
    include BaseGenericModel
    # A list of annotations used in the workflow. These are like sticky notes for your workflow!
    attr_accessor :annotations
    # A list of connections or connection groups used in the workflow.
    attr_accessor :connection_envs
    # Unique identifier used to trigger workflows automatically in Datadog.
    attr_accessor :handle
    # A list of input parameters for the workflow. These can be used as dynamic runtime values in your workflow.
    attr_accessor :input_schema
    # A list of output parameters for the workflow.
    attr_accessor :output_schema
    # A `Step` is a sub-component of a workflow. Each `Step` performs an action.
    attr_accessor :steps
    # The list of triggers that activate this workflow. At least one trigger is required, and each trigger type may appear at most once.
    attr_accessor :triggers

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'annotations' => :'annotations',
        :'connection_envs' => :'connectionEnvs',
        :'handle' => :'handle',
        :'input_schema' => :'inputSchema',
        :'output_schema' => :'outputSchema',
        :'steps' => :'steps',
        :'triggers' => :'triggers'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'annotations' => :'Array<Annotation>',
        :'connection_envs' => :'Array<ConnectionEnv>',
        :'handle' => :'String',
        :'input_schema' => :'InputSchema',
        :'output_schema' => :'OutputSchema',
        :'steps' => :'Array<Step>',
        :'triggers' => :'Array<Trigger>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::Spec` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'annotations')
        if (value = attributes[:'annotations']).is_a?(Array)
          self.annotations = value
        end
      end

      if attributes.key?(:'connection_envs')
        if (value = attributes[:'connection_envs']).is_a?(Array)
          self.connection_envs = value
        end
      end

      if attributes.key?(:'handle')
        self.handle = attributes[:'handle']
      end

      if attributes.key?(:'input_schema')
        self.input_schema = attributes[:'input_schema']
      end

      if attributes.key?(:'output_schema')
        self.output_schema = attributes[:'output_schema']
      end

      if attributes.key?(:'steps')
        if (value = attributes[:'steps']).is_a?(Array)
          self.steps = value
        end
      end

      if attributes.key?(:'triggers')
        if (value = attributes[:'triggers']).is_a?(Array)
          self.triggers = value
        end
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          annotations == o.annotations &&
          connection_envs == o.connection_envs &&
          handle == o.handle &&
          input_schema == o.input_schema &&
          output_schema == o.output_schema &&
          steps == o.steps &&
          triggers == o.triggers &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [annotations, connection_envs, handle, input_schema, output_schema, steps, triggers, additional_properties].hash
    end
  end
end
