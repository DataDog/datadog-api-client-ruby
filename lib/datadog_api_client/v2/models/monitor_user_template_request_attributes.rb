=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Attributes for a monitor user template.
  class MonitorUserTemplateRequestAttributes
    include BaseGenericModel

    # A brief description of the monitor user template.
    attr_accessor :description

    # A valid monitor definition in the same format as the [V1 Monitor API](https://docs.datadoghq.com/api/latest/monitors/#create-a-monitor).
    attr_reader :monitor_definition

    # The definition of `MonitorUserTemplateTags` object.
    attr_reader :tags

    # The definition of `MonitorUserTemplateTemplateVariables` object.
    attr_accessor :template_variables

    # The title of the monitor user template.
    attr_reader :title

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'description' => :'description',
        :'monitor_definition' => :'monitor_definition',
        :'tags' => :'tags',
        :'template_variables' => :'template_variables',
        :'title' => :'title'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'description' => :'String',
        :'monitor_definition' => :'Hash<String, Object>',
        :'tags' => :'Array<String>',
        :'template_variables' => :'Array<MonitorUserTemplateTemplateVariablesItems>',
        :'title' => :'String'
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
        :'description',
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::MonitorUserTemplateRequestAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V2::MonitorUserTemplateRequestAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'monitor_definition')
        self.monitor_definition = attributes[:'monitor_definition']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'template_variables')
        if (value = attributes[:'template_variables']).is_a?(Array)
          self.template_variables = value
        end
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @monitor_definition.nil?
      return false if @tags.nil?
      return false if @title.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param monitor_definition [Object] Object to be assigned
    # @!visibility private
    def monitor_definition=(monitor_definition)
      if monitor_definition.nil?
        fail ArgumentError, 'invalid value for "monitor_definition", monitor_definition cannot be nil.'
      end
      @monitor_definition = monitor_definition
    end

    # Custom attribute writer method with validation
    # @param tags [Object] Object to be assigned
    # @!visibility private
    def tags=(tags)
      if tags.nil?
        fail ArgumentError, 'invalid value for "tags", tags cannot be nil.'
      end
      @tags = tags
    end

    # Custom attribute writer method with validation
    # @param title [Object] Object to be assigned
    # @!visibility private
    def title=(title)
      if title.nil?
        fail ArgumentError, 'invalid value for "title", title cannot be nil.'
      end
      @title = title
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          description == o.description &&
          monitor_definition == o.monitor_definition &&
          tags == o.tags &&
          template_variables == o.template_variables &&
          title == o.title
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [description, monitor_definition, tags, template_variables, title].hash
    end
  end
end
