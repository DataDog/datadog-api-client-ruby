=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The JSON:API attributes of the vulnerability.
  class VulnerabilityAttributes
    include BaseGenericModel

    # Advisory associated with the vulnerability.
    attr_accessor :advisory

    # Vulnerability advisory ID.
    attr_accessor :advisory_id

    # Code vulnerability location.
    attr_accessor :code_location

    # Vulnerability CVE list.
    attr_reader :cve_list

    # Vulnerability severities.
    attr_reader :cvss

    # Static library vulnerability location.
    attr_accessor :dependency_locations

    # Vulnerability description.
    attr_reader :description

    # The related vulnerability asset ecosystem.
    attr_accessor :ecosystem

    # Vulnerability exposure time in seconds.
    attr_reader :exposure_time

    # First detection of the vulnerability in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format
    attr_reader :first_detection

    # Whether the vulnerability has a remediation or not.
    attr_reader :fix_available

    # Vulnerability language.
    attr_reader :language

    # Last detection of the vulnerability in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format
    attr_reader :last_detection

    # Vulnerability library.
    attr_accessor :library

    # Vulnerability origin.
    attr_reader :origin

    # List of remediations.
    attr_reader :remediations

    # Vulnerability `repo_digest` list (when the vulnerability is related to `Image` asset).
    attr_accessor :repo_digests

    # Vulnerability risks.
    attr_reader :risks

    # The vulnerability status.
    attr_reader :status

    # Vulnerability title.
    attr_reader :title

    # The vulnerability tool.
    attr_reader :tool

    # The vulnerability type.
    attr_reader :type

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'advisory' => :'advisory',
        :'advisory_id' => :'advisory_id',
        :'code_location' => :'code_location',
        :'cve_list' => :'cve_list',
        :'cvss' => :'cvss',
        :'dependency_locations' => :'dependency_locations',
        :'description' => :'description',
        :'ecosystem' => :'ecosystem',
        :'exposure_time' => :'exposure_time',
        :'first_detection' => :'first_detection',
        :'fix_available' => :'fix_available',
        :'language' => :'language',
        :'last_detection' => :'last_detection',
        :'library' => :'library',
        :'origin' => :'origin',
        :'remediations' => :'remediations',
        :'repo_digests' => :'repo_digests',
        :'risks' => :'risks',
        :'status' => :'status',
        :'title' => :'title',
        :'tool' => :'tool',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'advisory' => :'VulnerabilityAdvisory',
        :'advisory_id' => :'String',
        :'code_location' => :'CodeLocation',
        :'cve_list' => :'Array<String>',
        :'cvss' => :'VulnerabilityCvss',
        :'dependency_locations' => :'VulnerabilityDependencyLocations',
        :'description' => :'String',
        :'ecosystem' => :'VulnerabilityEcosystem',
        :'exposure_time' => :'Integer',
        :'first_detection' => :'String',
        :'fix_available' => :'Boolean',
        :'language' => :'String',
        :'last_detection' => :'String',
        :'library' => :'Library',
        :'origin' => :'Array<String>',
        :'remediations' => :'Array<Remediation>',
        :'repo_digests' => :'Array<String>',
        :'risks' => :'VulnerabilityRisks',
        :'status' => :'VulnerabilityStatus',
        :'title' => :'String',
        :'tool' => :'VulnerabilityTool',
        :'type' => :'VulnerabilityType'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::VulnerabilityAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'advisory')
        self.advisory = attributes[:'advisory']
      end

      if attributes.key?(:'advisory_id')
        self.advisory_id = attributes[:'advisory_id']
      end

      if attributes.key?(:'code_location')
        self.code_location = attributes[:'code_location']
      end

      if attributes.key?(:'cve_list')
        if (value = attributes[:'cve_list']).is_a?(Array)
          self.cve_list = value
        end
      end

      if attributes.key?(:'cvss')
        self.cvss = attributes[:'cvss']
      end

      if attributes.key?(:'dependency_locations')
        self.dependency_locations = attributes[:'dependency_locations']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'ecosystem')
        self.ecosystem = attributes[:'ecosystem']
      end

      if attributes.key?(:'exposure_time')
        self.exposure_time = attributes[:'exposure_time']
      end

      if attributes.key?(:'first_detection')
        self.first_detection = attributes[:'first_detection']
      end

      if attributes.key?(:'fix_available')
        self.fix_available = attributes[:'fix_available']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'last_detection')
        self.last_detection = attributes[:'last_detection']
      end

      if attributes.key?(:'library')
        self.library = attributes[:'library']
      end

      if attributes.key?(:'origin')
        if (value = attributes[:'origin']).is_a?(Array)
          self.origin = value
        end
      end

      if attributes.key?(:'remediations')
        if (value = attributes[:'remediations']).is_a?(Array)
          self.remediations = value
        end
      end

      if attributes.key?(:'repo_digests')
        if (value = attributes[:'repo_digests']).is_a?(Array)
          self.repo_digests = value
        end
      end

      if attributes.key?(:'risks')
        self.risks = attributes[:'risks']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'tool')
        self.tool = attributes[:'tool']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @cve_list.nil?
      return false if @cvss.nil?
      return false if @description.nil?
      return false if @exposure_time.nil?
      return false if @first_detection.nil?
      return false if @fix_available.nil?
      return false if @language.nil?
      return false if @last_detection.nil?
      return false if @origin.nil?
      return false if @remediations.nil?
      return false if @risks.nil?
      return false if @status.nil?
      return false if @title.nil?
      return false if @tool.nil?
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param cve_list [Object] Object to be assigned
    # @!visibility private
    def cve_list=(cve_list)
      if cve_list.nil?
        fail ArgumentError, 'invalid value for "cve_list", cve_list cannot be nil.'
      end
      @cve_list = cve_list
    end

    # Custom attribute writer method with validation
    # @param cvss [Object] Object to be assigned
    # @!visibility private
    def cvss=(cvss)
      if cvss.nil?
        fail ArgumentError, 'invalid value for "cvss", cvss cannot be nil.'
      end
      @cvss = cvss
    end

    # Custom attribute writer method with validation
    # @param description [Object] Object to be assigned
    # @!visibility private
    def description=(description)
      if description.nil?
        fail ArgumentError, 'invalid value for "description", description cannot be nil.'
      end
      @description = description
    end

    # Custom attribute writer method with validation
    # @param exposure_time [Object] Object to be assigned
    # @!visibility private
    def exposure_time=(exposure_time)
      if exposure_time.nil?
        fail ArgumentError, 'invalid value for "exposure_time", exposure_time cannot be nil.'
      end
      @exposure_time = exposure_time
    end

    # Custom attribute writer method with validation
    # @param first_detection [Object] Object to be assigned
    # @!visibility private
    def first_detection=(first_detection)
      if first_detection.nil?
        fail ArgumentError, 'invalid value for "first_detection", first_detection cannot be nil.'
      end
      @first_detection = first_detection
    end

    # Custom attribute writer method with validation
    # @param fix_available [Object] Object to be assigned
    # @!visibility private
    def fix_available=(fix_available)
      if fix_available.nil?
        fail ArgumentError, 'invalid value for "fix_available", fix_available cannot be nil.'
      end
      @fix_available = fix_available
    end

    # Custom attribute writer method with validation
    # @param language [Object] Object to be assigned
    # @!visibility private
    def language=(language)
      if language.nil?
        fail ArgumentError, 'invalid value for "language", language cannot be nil.'
      end
      @language = language
    end

    # Custom attribute writer method with validation
    # @param last_detection [Object] Object to be assigned
    # @!visibility private
    def last_detection=(last_detection)
      if last_detection.nil?
        fail ArgumentError, 'invalid value for "last_detection", last_detection cannot be nil.'
      end
      @last_detection = last_detection
    end

    # Custom attribute writer method with validation
    # @param origin [Object] Object to be assigned
    # @!visibility private
    def origin=(origin)
      if origin.nil?
        fail ArgumentError, 'invalid value for "origin", origin cannot be nil.'
      end
      @origin = origin
    end

    # Custom attribute writer method with validation
    # @param remediations [Object] Object to be assigned
    # @!visibility private
    def remediations=(remediations)
      if remediations.nil?
        fail ArgumentError, 'invalid value for "remediations", remediations cannot be nil.'
      end
      @remediations = remediations
    end

    # Custom attribute writer method with validation
    # @param risks [Object] Object to be assigned
    # @!visibility private
    def risks=(risks)
      if risks.nil?
        fail ArgumentError, 'invalid value for "risks", risks cannot be nil.'
      end
      @risks = risks
    end

    # Custom attribute writer method with validation
    # @param status [Object] Object to be assigned
    # @!visibility private
    def status=(status)
      if status.nil?
        fail ArgumentError, 'invalid value for "status", status cannot be nil.'
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param title [Object] Object to be assigned
    # @!visibility private
    def title=(title)
      if title.nil?
        fail ArgumentError, 'invalid value for "title", title cannot be nil.'
      end
      @title = title
    end

    # Custom attribute writer method with validation
    # @param tool [Object] Object to be assigned
    # @!visibility private
    def tool=(tool)
      if tool.nil?
        fail ArgumentError, 'invalid value for "tool", tool cannot be nil.'
      end
      @tool = tool
    end

    # Custom attribute writer method with validation
    # @param type [Object] Object to be assigned
    # @!visibility private
    def type=(type)
      if type.nil?
        fail ArgumentError, 'invalid value for "type", type cannot be nil.'
      end
      @type = type
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          advisory == o.advisory &&
          advisory_id == o.advisory_id &&
          code_location == o.code_location &&
          cve_list == o.cve_list &&
          cvss == o.cvss &&
          dependency_locations == o.dependency_locations &&
          description == o.description &&
          ecosystem == o.ecosystem &&
          exposure_time == o.exposure_time &&
          first_detection == o.first_detection &&
          fix_available == o.fix_available &&
          language == o.language &&
          last_detection == o.last_detection &&
          library == o.library &&
          origin == o.origin &&
          remediations == o.remediations &&
          repo_digests == o.repo_digests &&
          risks == o.risks &&
          status == o.status &&
          title == o.title &&
          tool == o.tool &&
          type == o.type &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [advisory, advisory_id, code_location, cve_list, cvss, dependency_locations, description, ecosystem, exposure_time, first_detection, fix_available, language, last_detection, library, origin, remediations, repo_digests, risks, status, title, tool, type, additional_properties].hash
    end
  end
end
