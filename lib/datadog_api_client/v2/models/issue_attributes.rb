=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Object containing the information of an issue.
  class IssueAttributes
    include BaseGenericModel

    # Error message associated with the issue.
    attr_accessor :error_message

    # Type of the error that matches the issue.
    attr_accessor :error_type

    # Path of the file where the issue occurred.
    attr_accessor :file_path

    # Timestamp of the first seen error in milliseconds since the Unix epoch.
    attr_accessor :first_seen

    # The application version (for example, git commit hash) where the issue was first observed.
    attr_accessor :first_seen_version

    # Name of the function where the issue occurred.
    attr_accessor :function_name

    # Error is a crash.
    attr_accessor :is_crash

    # Array of programming languages associated with the issue.
    attr_accessor :languages

    # Timestamp of the last seen error in milliseconds since the Unix epoch.
    attr_accessor :last_seen

    # The application version (for example, git commit hash) where the issue was last observed.
    attr_accessor :last_seen_version

    # Platform associated with the issue.
    attr_accessor :platform

    # Service name.
    attr_accessor :service

    # State of the issue
    attr_accessor :state

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'error_message' => :'error_message',
        :'error_type' => :'error_type',
        :'file_path' => :'file_path',
        :'first_seen' => :'first_seen',
        :'first_seen_version' => :'first_seen_version',
        :'function_name' => :'function_name',
        :'is_crash' => :'is_crash',
        :'languages' => :'languages',
        :'last_seen' => :'last_seen',
        :'last_seen_version' => :'last_seen_version',
        :'platform' => :'platform',
        :'service' => :'service',
        :'state' => :'state'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'error_message' => :'String',
        :'error_type' => :'String',
        :'file_path' => :'String',
        :'first_seen' => :'Integer',
        :'first_seen_version' => :'String',
        :'function_name' => :'String',
        :'is_crash' => :'Boolean',
        :'languages' => :'Array<IssueLanguage>',
        :'last_seen' => :'Integer',
        :'last_seen_version' => :'String',
        :'platform' => :'IssuePlatform',
        :'service' => :'String',
        :'state' => :'IssueState'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::IssueAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'error_message')
        self.error_message = attributes[:'error_message']
      end

      if attributes.key?(:'error_type')
        self.error_type = attributes[:'error_type']
      end

      if attributes.key?(:'file_path')
        self.file_path = attributes[:'file_path']
      end

      if attributes.key?(:'first_seen')
        self.first_seen = attributes[:'first_seen']
      end

      if attributes.key?(:'first_seen_version')
        self.first_seen_version = attributes[:'first_seen_version']
      end

      if attributes.key?(:'function_name')
        self.function_name = attributes[:'function_name']
      end

      if attributes.key?(:'is_crash')
        self.is_crash = attributes[:'is_crash']
      end

      if attributes.key?(:'languages')
        if (value = attributes[:'languages']).is_a?(Array)
          self.languages = value
        end
      end

      if attributes.key?(:'last_seen')
        self.last_seen = attributes[:'last_seen']
      end

      if attributes.key?(:'last_seen_version')
        self.last_seen_version = attributes[:'last_seen_version']
      end

      if attributes.key?(:'platform')
        self.platform = attributes[:'platform']
      end

      if attributes.key?(:'service')
        self.service = attributes[:'service']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          error_message == o.error_message &&
          error_type == o.error_type &&
          file_path == o.file_path &&
          first_seen == o.first_seen &&
          first_seen_version == o.first_seen_version &&
          function_name == o.function_name &&
          is_crash == o.is_crash &&
          languages == o.languages &&
          last_seen == o.last_seen &&
          last_seen_version == o.last_seen_version &&
          platform == o.platform &&
          service == o.service &&
          state == o.state &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [error_message, error_type, file_path, first_seen, first_seen_version, function_name, is_crash, languages, last_seen, last_seen_version, platform, service, state, additional_properties].hash
    end
  end
end
