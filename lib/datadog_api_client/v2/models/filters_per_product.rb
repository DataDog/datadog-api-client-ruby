=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Product-specific filters for the dataset.
  class FiltersPerProduct
    include BaseGenericModel

    # Defines the list of tag-based filters used to restrict access to telemetry data for a specific product.
    # These filters act as access control rules. Each filter must follow the tag query syntax used by
    # Datadog (such as `@tag.key:value`), and only one tag or attribute may be used to define the access strategy
    # per telemetry type.
    attr_reader :filters

    # Name of the product the dataset is for. Possible values are 'apm', 'rum', 'synthetics',
    # 'metrics', 'logs', 'sd_repoinfo', 'error_tracking', 'cloud_cost', and 'ml_obs'.
    attr_reader :product

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'filters' => :'filters',
        :'product' => :'product'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'filters' => :'Array<String>',
        :'product' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::FiltersPerProduct` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'filters')
        if (value = attributes[:'filters']).is_a?(Array)
          self.filters = value
        end
      end

      if attributes.key?(:'product')
        self.product = attributes[:'product']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @filters.nil?
      return false if @product.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param filters [Object] Object to be assigned
    # @!visibility private
    def filters=(filters)
      if filters.nil?
        fail ArgumentError, 'invalid value for "filters", filters cannot be nil.'
      end
      @filters = filters
    end

    # Custom attribute writer method with validation
    # @param product [Object] Object to be assigned
    # @!visibility private
    def product=(product)
      if product.nil?
        fail ArgumentError, 'invalid value for "product", product cannot be nil.'
      end
      @product = product
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          filters == o.filters &&
          product == o.product &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [filters, product, additional_properties].hash
    end
  end
end
