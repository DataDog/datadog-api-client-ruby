=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Vulnerability risks.
  class VulnerabilityRisks
    include BaseGenericModel

    # Vulnerability EPSS severity.
    attr_accessor :epss

    # Vulnerability public exploit availability.
    attr_reader :exploit_available

    # Vulnerability exploit sources.
    attr_reader :exploit_sources

    # Vulnerability exploitation probability.
    attr_reader :exploitation_probability

    # Vulnerability POC exploit availability.
    attr_reader :poc_exploit_available

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'epss' => :'epss',
        :'exploit_available' => :'exploit_available',
        :'exploit_sources' => :'exploit_sources',
        :'exploitation_probability' => :'exploitation_probability',
        :'poc_exploit_available' => :'poc_exploit_available'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'epss' => :'EPSS',
        :'exploit_available' => :'Boolean',
        :'exploit_sources' => :'Array<String>',
        :'exploitation_probability' => :'Boolean',
        :'poc_exploit_available' => :'Boolean'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::VulnerabilityRisks` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'epss')
        self.epss = attributes[:'epss']
      end

      if attributes.key?(:'exploit_available')
        self.exploit_available = attributes[:'exploit_available']
      end

      if attributes.key?(:'exploit_sources')
        if (value = attributes[:'exploit_sources']).is_a?(Array)
          self.exploit_sources = value
        end
      end

      if attributes.key?(:'exploitation_probability')
        self.exploitation_probability = attributes[:'exploitation_probability']
      end

      if attributes.key?(:'poc_exploit_available')
        self.poc_exploit_available = attributes[:'poc_exploit_available']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @exploit_available.nil?
      return false if @exploit_sources.nil?
      return false if @exploitation_probability.nil?
      return false if @poc_exploit_available.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param exploit_available [Object] Object to be assigned
    # @!visibility private
    def exploit_available=(exploit_available)
      if exploit_available.nil?
        fail ArgumentError, 'invalid value for "exploit_available", exploit_available cannot be nil.'
      end
      @exploit_available = exploit_available
    end

    # Custom attribute writer method with validation
    # @param exploit_sources [Object] Object to be assigned
    # @!visibility private
    def exploit_sources=(exploit_sources)
      if exploit_sources.nil?
        fail ArgumentError, 'invalid value for "exploit_sources", exploit_sources cannot be nil.'
      end
      @exploit_sources = exploit_sources
    end

    # Custom attribute writer method with validation
    # @param exploitation_probability [Object] Object to be assigned
    # @!visibility private
    def exploitation_probability=(exploitation_probability)
      if exploitation_probability.nil?
        fail ArgumentError, 'invalid value for "exploitation_probability", exploitation_probability cannot be nil.'
      end
      @exploitation_probability = exploitation_probability
    end

    # Custom attribute writer method with validation
    # @param poc_exploit_available [Object] Object to be assigned
    # @!visibility private
    def poc_exploit_available=(poc_exploit_available)
      if poc_exploit_available.nil?
        fail ArgumentError, 'invalid value for "poc_exploit_available", poc_exploit_available cannot be nil.'
      end
      @poc_exploit_available = poc_exploit_available
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          epss == o.epss &&
          exploit_available == o.exploit_available &&
          exploit_sources == o.exploit_sources &&
          exploitation_probability == o.exploitation_probability &&
          poc_exploit_available == o.poc_exploit_available &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [epss, exploit_available, exploit_sources, exploitation_probability, poc_exploit_available, additional_properties].hash
    end
  end
end
