=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Use conditional recipients to define different recipients for different situations.
  class MonitorNotificationRuleConditionalRecipients
    include BaseGenericModel

    # Conditions of the notification rule.
    attr_reader :conditions

    # A list of recipients to notify. Uses the same format as the monitor `message` field. Must not start with an '@'.
    attr_reader :fallback_recipients

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'conditions' => :'conditions',
        :'fallback_recipients' => :'fallback_recipients'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'conditions' => :'Array<MonitorNotificationRuleCondition>',
        :'fallback_recipients' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::MonitorNotificationRuleConditionalRecipients` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'conditions')
        if (value = attributes[:'conditions']).is_a?(Array)
          self.conditions = value
        end
      end

      if attributes.key?(:'fallback_recipients')
        if (value = attributes[:'fallback_recipients']).is_a?(Array)
          self.fallback_recipients = value
        end
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @conditions.nil?
      return false if @conditions.length > 10
      return false if @conditions.length < 1
      return false if !@fallback_recipients.nil? && @fallback_recipients.length > 20
      return false if !@fallback_recipients.nil? && @fallback_recipients.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param conditions [Object] Object to be assigned
    # @!visibility private
    def conditions=(conditions)
      if conditions.nil?
        fail ArgumentError, 'invalid value for "conditions", conditions cannot be nil.'
      end
      if conditions.length > 10
        fail ArgumentError, 'invalid value for "conditions", number of items must be less than or equal to 10.'
      end
      if conditions.length < 1
        fail ArgumentError, 'invalid value for "conditions", number of items must be greater than or equal to 1.'
      end
      @conditions = conditions
    end

    # Custom attribute writer method with validation
    # @param fallback_recipients [Object] Object to be assigned
    # @!visibility private
    def fallback_recipients=(fallback_recipients)
      if !fallback_recipients.nil? && fallback_recipients.length > 20
        fail ArgumentError, 'invalid value for "fallback_recipients", number of items must be less than or equal to 20.'
      end
      if !fallback_recipients.nil? && fallback_recipients.length < 1
        fail ArgumentError, 'invalid value for "fallback_recipients", number of items must be greater than or equal to 1.'
      end
      @fallback_recipients = fallback_recipients
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          conditions == o.conditions &&
          fallback_recipients == o.fallback_recipients &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [conditions, fallback_recipients, additional_properties].hash
    end
  end
end
