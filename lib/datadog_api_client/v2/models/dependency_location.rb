=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Static library vulnerability location.
  class DependencyLocation
    include BaseGenericModel
    # Location column end.
    attr_reader :column_end
    # Location column start.
    attr_reader :column_start
    # Location file name.
    attr_reader :file_name
    # Location line end.
    attr_reader :line_end
    # Location line start.
    attr_reader :line_start

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'column_end' => :'column_end',
        :'column_start' => :'column_start',
        :'file_name' => :'file_name',
        :'line_end' => :'line_end',
        :'line_start' => :'line_start'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'column_end' => :'Integer',
        :'column_start' => :'Integer',
        :'file_name' => :'String',
        :'line_end' => :'Integer',
        :'line_start' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::DependencyLocation` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'column_end')
        self.column_end = attributes[:'column_end']
      end

      if attributes.key?(:'column_start')
        self.column_start = attributes[:'column_start']
      end

      if attributes.key?(:'file_name')
        self.file_name = attributes[:'file_name']
      end

      if attributes.key?(:'line_end')
        self.line_end = attributes[:'line_end']
      end

      if attributes.key?(:'line_start')
        self.line_start = attributes[:'line_start']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @column_end.nil?
      return false if @column_start.nil?
      return false if @file_name.nil?
      return false if @line_end.nil?
      return false if @line_start.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param column_end [Object] Object to be assigned
    # @!visibility private
    def column_end=(column_end)
      if column_end.nil?
        fail ArgumentError, 'invalid value for "column_end", column_end cannot be nil.'
      end
      @column_end = column_end
    end

    # Custom attribute writer method with validation
    # @param column_start [Object] Object to be assigned
    # @!visibility private
    def column_start=(column_start)
      if column_start.nil?
        fail ArgumentError, 'invalid value for "column_start", column_start cannot be nil.'
      end
      @column_start = column_start
    end

    # Custom attribute writer method with validation
    # @param file_name [Object] Object to be assigned
    # @!visibility private
    def file_name=(file_name)
      if file_name.nil?
        fail ArgumentError, 'invalid value for "file_name", file_name cannot be nil.'
      end
      @file_name = file_name
    end

    # Custom attribute writer method with validation
    # @param line_end [Object] Object to be assigned
    # @!visibility private
    def line_end=(line_end)
      if line_end.nil?
        fail ArgumentError, 'invalid value for "line_end", line_end cannot be nil.'
      end
      @line_end = line_end
    end

    # Custom attribute writer method with validation
    # @param line_start [Object] Object to be assigned
    # @!visibility private
    def line_start=(line_start)
      if line_start.nil?
        fail ArgumentError, 'invalid value for "line_start", line_start cannot be nil.'
      end
      @line_start = line_start
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          column_end == o.column_end &&
          column_start == o.column_start &&
          file_name == o.file_name &&
          line_end == o.line_end &&
          line_start == o.line_start &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [column_end, column_start, file_name, line_end, line_start, additional_properties].hash
    end
  end
end
