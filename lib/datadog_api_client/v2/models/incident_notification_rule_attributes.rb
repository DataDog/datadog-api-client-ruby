=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The notification rule's attributes.
  class IncidentNotificationRuleAttributes
    include BaseGenericModel
    # The conditions that trigger this notification rule.
    attr_reader :conditions
    # Timestamp when the notification rule was created.
    attr_reader :created
    # Whether the notification rule is enabled.
    attr_reader :enabled
    # The notification handles (targets) for this rule.
    attr_reader :handles
    # Timestamp when the notification rule was last modified.
    attr_reader :modified
    # List of incident fields that trigger re-notification when changed.
    attr_accessor :renotify_on
    # The trigger event for this notification rule.
    attr_reader :trigger
    # The visibility of the notification rule.
    attr_reader :visibility

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'conditions' => :'conditions',
        :'created' => :'created',
        :'enabled' => :'enabled',
        :'handles' => :'handles',
        :'modified' => :'modified',
        :'renotify_on' => :'renotify_on',
        :'trigger' => :'trigger',
        :'visibility' => :'visibility'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'conditions' => :'Array<IncidentNotificationRuleConditionsItems>',
        :'created' => :'Time',
        :'enabled' => :'Boolean',
        :'handles' => :'Array<String>',
        :'modified' => :'Time',
        :'renotify_on' => :'Array<String>',
        :'trigger' => :'String',
        :'visibility' => :'IncidentNotificationRuleAttributesVisibility'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::IncidentNotificationRuleAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'conditions')
        if (value = attributes[:'conditions']).is_a?(Array)
          self.conditions = value
        end
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'handles')
        if (value = attributes[:'handles']).is_a?(Array)
          self.handles = value
        end
      end

      if attributes.key?(:'modified')
        self.modified = attributes[:'modified']
      end

      if attributes.key?(:'renotify_on')
        if (value = attributes[:'renotify_on']).is_a?(Array)
          self.renotify_on = value
        end
      end

      if attributes.key?(:'trigger')
        self.trigger = attributes[:'trigger']
      end

      if attributes.key?(:'visibility')
        self.visibility = attributes[:'visibility']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @conditions.nil?
      return false if @created.nil?
      return false if @enabled.nil?
      return false if @handles.nil?
      return false if @modified.nil?
      return false if @trigger.nil?
      return false if @visibility.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param conditions [Object] Object to be assigned
    # @!visibility private
    def conditions=(conditions)
      if conditions.nil?
        fail ArgumentError, 'invalid value for "conditions", conditions cannot be nil.'
      end
      @conditions = conditions
    end

    # Custom attribute writer method with validation
    # @param created [Object] Object to be assigned
    # @!visibility private
    def created=(created)
      if created.nil?
        fail ArgumentError, 'invalid value for "created", created cannot be nil.'
      end
      @created = created
    end

    # Custom attribute writer method with validation
    # @param enabled [Object] Object to be assigned
    # @!visibility private
    def enabled=(enabled)
      if enabled.nil?
        fail ArgumentError, 'invalid value for "enabled", enabled cannot be nil.'
      end
      @enabled = enabled
    end

    # Custom attribute writer method with validation
    # @param handles [Object] Object to be assigned
    # @!visibility private
    def handles=(handles)
      if handles.nil?
        fail ArgumentError, 'invalid value for "handles", handles cannot be nil.'
      end
      @handles = handles
    end

    # Custom attribute writer method with validation
    # @param modified [Object] Object to be assigned
    # @!visibility private
    def modified=(modified)
      if modified.nil?
        fail ArgumentError, 'invalid value for "modified", modified cannot be nil.'
      end
      @modified = modified
    end

    # Custom attribute writer method with validation
    # @param trigger [Object] Object to be assigned
    # @!visibility private
    def trigger=(trigger)
      if trigger.nil?
        fail ArgumentError, 'invalid value for "trigger", trigger cannot be nil.'
      end
      @trigger = trigger
    end

    # Custom attribute writer method with validation
    # @param visibility [Object] Object to be assigned
    # @!visibility private
    def visibility=(visibility)
      if visibility.nil?
        fail ArgumentError, 'invalid value for "visibility", visibility cannot be nil.'
      end
      @visibility = visibility
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          conditions == o.conditions &&
          created == o.created &&
          enabled == o.enabled &&
          handles == o.handles &&
          modified == o.modified &&
          renotify_on == o.renotify_on &&
          trigger == o.trigger &&
          visibility == o.visibility &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [conditions, created, enabled, handles, modified, renotify_on, trigger, visibility, additional_properties].hash
    end
  end
end
