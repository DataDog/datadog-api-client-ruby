=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Metadata and content of a datastore item.
  class ItemApiPayloadDataAttributes
    include BaseGenericModel
    # Timestamp when the item was first created.
    attr_accessor :created_at
    # Timestamp when the item was last modified.
    attr_accessor :modified_at
    # The ID of the organization that owns this item.
    attr_accessor :org_id
    # The name of the primary key column for this datastore. Primary column names:
    #   - Must abide by both [PostgreSQL naming conventions](https://www.postgresql.org/docs/7.0/syntax525.htm)
    #   - Cannot exceed 63 characters
    attr_reader :primary_column_name
    # A unique signature identifying this item version.
    attr_accessor :signature
    # The unique identifier of the datastore containing this item.
    attr_accessor :store_id
    # The data content (as key-value pairs) of a datastore item.
    attr_accessor :value

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'created_at' => :'created_at',
        :'modified_at' => :'modified_at',
        :'org_id' => :'org_id',
        :'primary_column_name' => :'primary_column_name',
        :'signature' => :'signature',
        :'store_id' => :'store_id',
        :'value' => :'value'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'created_at' => :'Time',
        :'modified_at' => :'Time',
        :'org_id' => :'Integer',
        :'primary_column_name' => :'String',
        :'signature' => :'String',
        :'store_id' => :'String',
        :'value' => :'Hash<String, Object>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::ItemApiPayloadDataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'modified_at')
        self.modified_at = attributes[:'modified_at']
      end

      if attributes.key?(:'org_id')
        self.org_id = attributes[:'org_id']
      end

      if attributes.key?(:'primary_column_name')
        self.primary_column_name = attributes[:'primary_column_name']
      end

      if attributes.key?(:'signature')
        self.signature = attributes[:'signature']
      end

      if attributes.key?(:'store_id')
        self.store_id = attributes[:'store_id']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if !@primary_column_name.nil? && @primary_column_name.to_s.length > 63
      true
    end

    # Custom attribute writer method with validation
    # @param primary_column_name [Object] Object to be assigned
    # @!visibility private
    def primary_column_name=(primary_column_name)
      if !primary_column_name.nil? && primary_column_name.to_s.length > 63
        fail ArgumentError, 'invalid value for "primary_column_name", the character length must be smaller than or equal to 63.'
      end
      @primary_column_name = primary_column_name
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_at == o.created_at &&
          modified_at == o.modified_at &&
          org_id == o.org_id &&
          primary_column_name == o.primary_column_name &&
          signature == o.signature &&
          store_id == o.store_id &&
          value == o.value &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [created_at, modified_at, org_id, primary_column_name, signature, store_id, value, additional_properties].hash
    end
  end
end
