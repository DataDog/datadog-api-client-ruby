=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Team link attributes
  class TeamLinkAttributes
    include BaseGenericModel

    # The link's label
    attr_reader :label

    # The link's position, used to sort links for the team
    attr_reader :position

    # ID of the team the link is associated with
    attr_accessor :team_id

    # The URL for the link
    attr_reader :url

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'label' => :'label',
        :'position' => :'position',
        :'team_id' => :'team_id',
        :'url' => :'url'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'label' => :'String',
        :'position' => :'Integer',
        :'team_id' => :'String',
        :'url' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::TeamLinkAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.key?(:'position')
        self.position = attributes[:'position']
      end

      if attributes.key?(:'team_id')
        self.team_id = attributes[:'team_id']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @label.nil?
      return false if @label.to_s.length > 256
      return false if !@position.nil? && @position > 2147483647
      return false if @url.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param label [Object] Object to be assigned
    # @!visibility private
    def label=(label)
      if label.nil?
        fail ArgumentError, 'invalid value for "label", label cannot be nil.'
      end
      if label.to_s.length > 256
        fail ArgumentError, 'invalid value for "label", the character length must be smaller than or equal to 256.'
      end
      @label = label
    end

    # Custom attribute writer method with validation
    # @param position [Object] Object to be assigned
    # @!visibility private
    def position=(position)
      if !position.nil? && position > 2147483647
        fail ArgumentError, 'invalid value for "position", must be smaller than or equal to 2147483647.'
      end
      @position = position
    end

    # Custom attribute writer method with validation
    # @param url [Object] Object to be assigned
    # @!visibility private
    def url=(url)
      if url.nil?
        fail ArgumentError, 'invalid value for "url", url cannot be nil.'
      end
      @url = url
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          label == o.label &&
          position == o.position &&
          team_id == o.team_id &&
          url == o.url
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [label, position, team_id, url].hash
    end
  end
end
