=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Attributes of the notification rule create request.
  class CreateNotificationRuleParametersDataAttributes
    include BaseGenericModel

    # Field used to enable or disable the rule.
    attr_accessor :enabled

    # Name of the notification rule.
    attr_reader :name

    # Selectors are used to filter security issues for which notifications should be generated.
    # Users can specify rule severities, rule types, a query to filter security issues on tags and attributes, and the trigger source.
    # Only the trigger_source field is required.
    attr_reader :selectors

    # List of recipients to notify when a notification rule is triggered. Many different target types are supported,
    # such as email addresses, Slack channels, and PagerDuty services.
    # The appropriate integrations need to be properly configured to send notifications to the specified targets.
    attr_reader :targets

    # Time aggregation period (in seconds) is used to aggregate the results of the notification rule evaluation.
    # Results are aggregated over a selected time frame using a rolling window, which updates with each new evaluation.
    # Notifications are only sent for new issues discovered during the window.
    # Time aggregation is only available for vulnerability-based notification rules. When omitted or set to 0, no aggregation
    # is done.
    attr_accessor :time_aggregation

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'enabled' => :'enabled',
        :'name' => :'name',
        :'selectors' => :'selectors',
        :'targets' => :'targets',
        :'time_aggregation' => :'time_aggregation'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'enabled' => :'Boolean',
        :'name' => :'String',
        :'selectors' => :'Selectors',
        :'targets' => :'Array<String>',
        :'time_aggregation' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::CreateNotificationRuleParametersDataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'selectors')
        self.selectors = attributes[:'selectors']
      end

      if attributes.key?(:'targets')
        if (value = attributes[:'targets']).is_a?(Array)
          self.targets = value
        end
      end

      if attributes.key?(:'time_aggregation')
        self.time_aggregation = attributes[:'time_aggregation']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @name.nil?
      return false if @selectors.nil?
      return false if @targets.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Custom attribute writer method with validation
    # @param selectors [Object] Object to be assigned
    # @!visibility private
    def selectors=(selectors)
      if selectors.nil?
        fail ArgumentError, 'invalid value for "selectors", selectors cannot be nil.'
      end
      @selectors = selectors
    end

    # Custom attribute writer method with validation
    # @param targets [Object] Object to be assigned
    # @!visibility private
    def targets=(targets)
      if targets.nil?
        fail ArgumentError, 'invalid value for "targets", targets cannot be nil.'
      end
      @targets = targets
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          enabled == o.enabled &&
          name == o.name &&
          selectors == o.selectors &&
          targets == o.targets &&
          time_aggregation == o.time_aggregation &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [enabled, name, selectors, targets, time_aggregation, additional_properties].hash
    end
  end
end
