=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Object defining a set of keywords and a number of characters that help reduce noise.
  # You can provide a list of keywords you would like to check within a defined proximity of the matching pattern.
  # If any of the keywords are found within the proximity check, the match is kept.
  # If none are found, the match is discarded.
  class SensitiveDataScannerIncludedKeywordConfiguration
    include BaseGenericModel

    # The number of characters behind a match detected by Sensitive Data Scanner to look for the keywords defined.
    # `character_count` should be greater than the maximum length of a keyword defined for a rule.
    attr_reader :character_count

    # Keyword list that will be checked during scanning in order to validate a match.
    # The number of keywords in the list must be less than or equal to 30.
    attr_reader :keywords

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'character_count' => :'character_count',
        :'keywords' => :'keywords'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'character_count' => :'Integer',
        :'keywords' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::SensitiveDataScannerIncludedKeywordConfiguration` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'character_count')
        self.character_count = attributes[:'character_count']
      end

      if attributes.key?(:'keywords')
        if (value = attributes[:'keywords']).is_a?(Array)
          self.keywords = value
        end
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @character_count.nil?
      return false if @character_count > 50
      return false if @character_count < 1
      return false if @keywords.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param character_count [Object] Object to be assigned
    # @!visibility private
    def character_count=(character_count)
      if character_count.nil?
        fail ArgumentError, 'invalid value for "character_count", character_count cannot be nil.'
      end
      if character_count > 50
        fail ArgumentError, 'invalid value for "character_count", must be smaller than or equal to 50.'
      end
      if character_count < 1
        fail ArgumentError, 'invalid value for "character_count", must be greater than or equal to 1.'
      end
      @character_count = character_count
    end

    # Custom attribute writer method with validation
    # @param keywords [Object] Object to be assigned
    # @!visibility private
    def keywords=(keywords)
      if keywords.nil?
        fail ArgumentError, 'invalid value for "keywords", keywords cannot be nil.'
      end
      @keywords = keywords
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          character_count == o.character_count &&
          keywords == o.keywords
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [character_count, keywords].hash
    end
  end
end
