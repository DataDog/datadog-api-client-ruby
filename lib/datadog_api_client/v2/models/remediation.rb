=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Vulnerability remediation.
  class Remediation
    include BaseGenericModel

    # Whether the vulnerability can be resolved when recompiling the package or not.
    attr_reader :auto_solvable

    # Avoided advisories.
    attr_reader :avoided_advisories

    # Remediation fixed advisories.
    attr_reader :fixed_advisories

    # Library name remediating the vulnerability.
    attr_reader :library_name

    # Library version remediating the vulnerability.
    attr_reader :library_version

    # New advisories.
    attr_reader :new_advisories

    # Remaining advisories.
    attr_reader :remaining_advisories

    # Remediation type.
    attr_reader :type

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'auto_solvable' => :'auto_solvable',
        :'avoided_advisories' => :'avoided_advisories',
        :'fixed_advisories' => :'fixed_advisories',
        :'library_name' => :'library_name',
        :'library_version' => :'library_version',
        :'new_advisories' => :'new_advisories',
        :'remaining_advisories' => :'remaining_advisories',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'auto_solvable' => :'Boolean',
        :'avoided_advisories' => :'Array<Advisory>',
        :'fixed_advisories' => :'Array<Advisory>',
        :'library_name' => :'String',
        :'library_version' => :'String',
        :'new_advisories' => :'Array<Advisory>',
        :'remaining_advisories' => :'Array<Advisory>',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::Remediation` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'auto_solvable')
        self.auto_solvable = attributes[:'auto_solvable']
      end

      if attributes.key?(:'avoided_advisories')
        if (value = attributes[:'avoided_advisories']).is_a?(Array)
          self.avoided_advisories = value
        end
      end

      if attributes.key?(:'fixed_advisories')
        if (value = attributes[:'fixed_advisories']).is_a?(Array)
          self.fixed_advisories = value
        end
      end

      if attributes.key?(:'library_name')
        self.library_name = attributes[:'library_name']
      end

      if attributes.key?(:'library_version')
        self.library_version = attributes[:'library_version']
      end

      if attributes.key?(:'new_advisories')
        if (value = attributes[:'new_advisories']).is_a?(Array)
          self.new_advisories = value
        end
      end

      if attributes.key?(:'remaining_advisories')
        if (value = attributes[:'remaining_advisories']).is_a?(Array)
          self.remaining_advisories = value
        end
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @auto_solvable.nil?
      return false if @avoided_advisories.nil?
      return false if @fixed_advisories.nil?
      return false if @library_name.nil?
      return false if @library_version.nil?
      return false if @new_advisories.nil?
      return false if @remaining_advisories.nil?
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param auto_solvable [Object] Object to be assigned
    # @!visibility private
    def auto_solvable=(auto_solvable)
      if auto_solvable.nil?
        fail ArgumentError, 'invalid value for "auto_solvable", auto_solvable cannot be nil.'
      end
      @auto_solvable = auto_solvable
    end

    # Custom attribute writer method with validation
    # @param avoided_advisories [Object] Object to be assigned
    # @!visibility private
    def avoided_advisories=(avoided_advisories)
      if avoided_advisories.nil?
        fail ArgumentError, 'invalid value for "avoided_advisories", avoided_advisories cannot be nil.'
      end
      @avoided_advisories = avoided_advisories
    end

    # Custom attribute writer method with validation
    # @param fixed_advisories [Object] Object to be assigned
    # @!visibility private
    def fixed_advisories=(fixed_advisories)
      if fixed_advisories.nil?
        fail ArgumentError, 'invalid value for "fixed_advisories", fixed_advisories cannot be nil.'
      end
      @fixed_advisories = fixed_advisories
    end

    # Custom attribute writer method with validation
    # @param library_name [Object] Object to be assigned
    # @!visibility private
    def library_name=(library_name)
      if library_name.nil?
        fail ArgumentError, 'invalid value for "library_name", library_name cannot be nil.'
      end
      @library_name = library_name
    end

    # Custom attribute writer method with validation
    # @param library_version [Object] Object to be assigned
    # @!visibility private
    def library_version=(library_version)
      if library_version.nil?
        fail ArgumentError, 'invalid value for "library_version", library_version cannot be nil.'
      end
      @library_version = library_version
    end

    # Custom attribute writer method with validation
    # @param new_advisories [Object] Object to be assigned
    # @!visibility private
    def new_advisories=(new_advisories)
      if new_advisories.nil?
        fail ArgumentError, 'invalid value for "new_advisories", new_advisories cannot be nil.'
      end
      @new_advisories = new_advisories
    end

    # Custom attribute writer method with validation
    # @param remaining_advisories [Object] Object to be assigned
    # @!visibility private
    def remaining_advisories=(remaining_advisories)
      if remaining_advisories.nil?
        fail ArgumentError, 'invalid value for "remaining_advisories", remaining_advisories cannot be nil.'
      end
      @remaining_advisories = remaining_advisories
    end

    # Custom attribute writer method with validation
    # @param type [Object] Object to be assigned
    # @!visibility private
    def type=(type)
      if type.nil?
        fail ArgumentError, 'invalid value for "type", type cannot be nil.'
      end
      @type = type
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auto_solvable == o.auto_solvable &&
          avoided_advisories == o.avoided_advisories &&
          fixed_advisories == o.fixed_advisories &&
          library_name == o.library_name &&
          library_version == o.library_version &&
          new_advisories == o.new_advisories &&
          remaining_advisories == o.remaining_advisories &&
          type == o.type &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [auto_solvable, avoided_advisories, fixed_advisories, library_name, library_version, new_advisories, remaining_advisories, type, additional_properties].hash
    end
  end
end
