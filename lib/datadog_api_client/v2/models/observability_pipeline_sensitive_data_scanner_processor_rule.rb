=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Defines a rule for detecting sensitive data, including matching pattern, scope, and the action to take.
  class ObservabilityPipelineSensitiveDataScannerProcessorRule
    include BaseGenericModel
    # Configuration for keywords used to reinforce sensitive data pattern detection.
    attr_accessor :keyword_options
    # A name identifying the rule.
    attr_reader :name
    # Defines what action to take when sensitive data is matched.
    attr_reader :on_match
    # Pattern detection configuration for identifying sensitive data using either a custom regex or a library reference.
    attr_reader :pattern
    # Determines which parts of the log the pattern-matching rule should be applied to.
    attr_reader :scope
    # Tags assigned to this rule for filtering and classification.
    attr_reader :tags

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'keyword_options' => :'keyword_options',
        :'name' => :'name',
        :'on_match' => :'on_match',
        :'pattern' => :'pattern',
        :'scope' => :'scope',
        :'tags' => :'tags'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'keyword_options' => :'ObservabilityPipelineSensitiveDataScannerProcessorKeywordOptions',
        :'name' => :'String',
        :'on_match' => :'ObservabilityPipelineSensitiveDataScannerProcessorAction',
        :'pattern' => :'ObservabilityPipelineSensitiveDataScannerProcessorPattern',
        :'scope' => :'ObservabilityPipelineSensitiveDataScannerProcessorScope',
        :'tags' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::ObservabilityPipelineSensitiveDataScannerProcessorRule` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'keyword_options')
        self.keyword_options = attributes[:'keyword_options']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'on_match')
        self.on_match = attributes[:'on_match']
      end

      if attributes.key?(:'pattern')
        self.pattern = attributes[:'pattern']
      end

      if attributes.key?(:'scope')
        self.scope = attributes[:'scope']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @name.nil?
      return false if @on_match.nil?
      return false if @pattern.nil?
      return false if @scope.nil?
      return false if @tags.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Custom attribute writer method with validation
    # @param on_match [Object] Object to be assigned
    # @!visibility private
    def on_match=(on_match)
      if on_match.nil?
        fail ArgumentError, 'invalid value for "on_match", on_match cannot be nil.'
      end
      @on_match = on_match
    end

    # Custom attribute writer method with validation
    # @param pattern [Object] Object to be assigned
    # @!visibility private
    def pattern=(pattern)
      if pattern.nil?
        fail ArgumentError, 'invalid value for "pattern", pattern cannot be nil.'
      end
      @pattern = pattern
    end

    # Custom attribute writer method with validation
    # @param scope [Object] Object to be assigned
    # @!visibility private
    def scope=(scope)
      if scope.nil?
        fail ArgumentError, 'invalid value for "scope", scope cannot be nil.'
      end
      @scope = scope
    end

    # Custom attribute writer method with validation
    # @param tags [Object] Object to be assigned
    # @!visibility private
    def tags=(tags)
      if tags.nil?
        fail ArgumentError, 'invalid value for "tags", tags cannot be nil.'
      end
      @tags = tags
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          keyword_options == o.keyword_options &&
          name == o.name &&
          on_match == o.on_match &&
          pattern == o.pattern &&
          scope == o.scope &&
          tags == o.tags &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [keyword_options, name, on_match, pattern, scope, tags, additional_properties].hash
    end
  end
end
