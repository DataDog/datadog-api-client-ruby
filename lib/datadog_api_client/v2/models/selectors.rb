=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Selectors are used to filter security issues for which notifications should be generated.
  # Users can specify rule severities, rule types, a query to filter security issues on tags and attributes, and the trigger source.
  # Only the trigger_source field is required.
  class Selectors
    include BaseGenericModel

    # The query is composed of one or several key:value pairs, which can be used to filter security issues on tags and attributes.
    attr_accessor :query

    # Security rule types used as filters in security rules.
    attr_accessor :rule_types

    # The security rules severities to consider.
    attr_accessor :severities

    # The type of security issues on which the rule applies. Notification rules based on security signals need to use the trigger source "security_signals",
    # while notification rules based on security vulnerabilities need to use the trigger source "security_findings".
    attr_reader :trigger_source

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'query' => :'query',
        :'rule_types' => :'rule_types',
        :'severities' => :'severities',
        :'trigger_source' => :'trigger_source'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'query' => :'String',
        :'rule_types' => :'Array<RuleTypesItems>',
        :'severities' => :'Array<RuleSeverity>',
        :'trigger_source' => :'TriggerSource'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::Selectors` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'query')
        self.query = attributes[:'query']
      end

      if attributes.key?(:'rule_types')
        if (value = attributes[:'rule_types']).is_a?(Array)
          self.rule_types = value
        end
      end

      if attributes.key?(:'severities')
        if (value = attributes[:'severities']).is_a?(Array)
          self.severities = value
        end
      end

      if attributes.key?(:'trigger_source')
        self.trigger_source = attributes[:'trigger_source']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @trigger_source.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param trigger_source [Object] Object to be assigned
    # @!visibility private
    def trigger_source=(trigger_source)
      if trigger_source.nil?
        fail ArgumentError, 'invalid value for "trigger_source", trigger_source cannot be nil.'
      end
      @trigger_source = trigger_source
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          query == o.query &&
          rule_types == o.rule_types &&
          severities == o.severities &&
          trigger_source == o.trigger_source &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [query, rule_types, severities, trigger_source, additional_properties].hash
    end
  end
end
