=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The definition of `TableResultV2DataAttributes` object.
  class TableResultV2DataAttributes
    include BaseGenericModel
    # UUID of the user who created the reference table.
    attr_accessor :created_by
    # The description of the reference table.
    attr_accessor :description
    # The definition of `TableResultV2DataAttributesFileMetadata` object.
    attr_accessor :file_metadata
    # UUID of the user who last updated the reference table.
    attr_accessor :last_updated_by
    # The number of successfully processed rows in the reference table.
    attr_accessor :row_count
    # The definition of `TableResultV2DataAttributesSchema` object.
    attr_accessor :schema
    # The source type for reference table data. Includes all possible source types that can appear in responses.
    attr_accessor :source
    # The status of the reference table.
    attr_accessor :status
    # The name of the reference table.
    attr_accessor :table_name
    # The tags of the reference table.
    attr_accessor :tags
    # The timestamp of the last update to the reference table in ISO 8601 format.
    attr_accessor :updated_at

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'created_by' => :'created_by',
        :'description' => :'description',
        :'file_metadata' => :'file_metadata',
        :'last_updated_by' => :'last_updated_by',
        :'row_count' => :'row_count',
        :'schema' => :'schema',
        :'source' => :'source',
        :'status' => :'status',
        :'table_name' => :'table_name',
        :'tags' => :'tags',
        :'updated_at' => :'updated_at'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'created_by' => :'String',
        :'description' => :'String',
        :'file_metadata' => :'TableResultV2DataAttributesFileMetadata',
        :'last_updated_by' => :'String',
        :'row_count' => :'Integer',
        :'schema' => :'TableResultV2DataAttributesSchema',
        :'source' => :'ReferenceTableSourceType',
        :'status' => :'String',
        :'table_name' => :'String',
        :'tags' => :'Array<String>',
        :'updated_at' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::TableResultV2DataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'file_metadata')
        self.file_metadata = attributes[:'file_metadata']
      end

      if attributes.key?(:'last_updated_by')
        self.last_updated_by = attributes[:'last_updated_by']
      end

      if attributes.key?(:'row_count')
        self.row_count = attributes[:'row_count']
      end

      if attributes.key?(:'schema')
        self.schema = attributes[:'schema']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'table_name')
        self.table_name = attributes[:'table_name']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_by == o.created_by &&
          description == o.description &&
          file_metadata == o.file_metadata &&
          last_updated_by == o.last_updated_by &&
          row_count == o.row_count &&
          schema == o.schema &&
          source == o.source &&
          status == o.status &&
          table_name == o.table_name &&
          tags == o.tags &&
          updated_at == o.updated_at &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [created_by, description, file_metadata, last_updated_by, row_count, schema, source, status, table_name, tags, updated_at, additional_properties].hash
    end
  end
end
