=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The object describing a timeseries formula request.
  class TimeseriesFormulaRequestAttributes
    include BaseGenericModel

    # Whether the object has unparsed attributes
    # @!visibility private
    attr_accessor :_unparsed

    # List of formulas to be calculated and returned as responses.
    attr_accessor :formulas

    # Start date (inclusive) of the query in milliseconds since the Unix epoch.
    attr_reader :from

    # A time interval in milliseconds.
    # May be overridden by a larger interval if the query would result in
    # too many points for the specified timeframe.
    # Defaults to a reasonable interval for the given timeframe.
    attr_accessor :interval

    # List of queries to be run and used as inputs to the formulas.
    attr_reader :queries

    # End date (exclusive) of the query in milliseconds since the Unix epoch.
    attr_reader :to

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'formulas' => :'formulas',
        :'from' => :'from',
        :'interval' => :'interval',
        :'queries' => :'queries',
        :'to' => :'to'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'formulas' => :'Array<QueryFormula>',
        :'from' => :'Integer',
        :'interval' => :'Integer',
        :'queries' => :'Array<TimeseriesQuery>',
        :'to' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::TimeseriesFormulaRequestAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V2::TimeseriesFormulaRequestAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'formulas')
        if (value = attributes[:'formulas']).is_a?(Array)
          self.formulas = value
        end
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'interval')
        self.interval = attributes[:'interval']
      end

      if attributes.key?(:'queries')
        if (value = attributes[:'queries']).is_a?(Array)
          self.queries = value
        end
      end

      if attributes.key?(:'to')
        self.to = attributes[:'to']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @from.nil?
      return false if @queries.nil?
      return false if @to.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param from [Object] Object to be assigned
    # @!visibility private
    def from=(from)
      if from.nil?
        fail ArgumentError, 'invalid value for "from", from cannot be nil.'
      end
      @from = from
    end

    # Custom attribute writer method with validation
    # @param queries [Object] Object to be assigned
    # @!visibility private
    def queries=(queries)
      if queries.nil?
        fail ArgumentError, 'invalid value for "queries", queries cannot be nil.'
      end
      @queries = queries
    end

    # Custom attribute writer method with validation
    # @param to [Object] Object to be assigned
    # @!visibility private
    def to=(to)
      if to.nil?
        fail ArgumentError, 'invalid value for "to", to cannot be nil.'
      end
      @to = to
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          formulas == o.formulas &&
          from == o.from &&
          interval == o.interval &&
          queries == o.queries &&
          to == o.to
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [formulas, from, interval, queries, to].hash
    end
  end
end
