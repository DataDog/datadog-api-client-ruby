=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Object containing the attributes of the suppression rule to be created.
  class SecurityMonitoringSuppressionCreateAttributes
    include BaseGenericModel

    # A description for the suppression rule.
    attr_accessor :description

    # Whether the suppression rule is enabled.
    attr_reader :enabled

    # A Unix millisecond timestamp giving an expiration date for the suppression rule. After this date, it won't suppress signals anymore.
    attr_accessor :expiration_date

    # The name of the suppression rule.
    attr_reader :name

    # The rule query of the suppression rule, with the same syntax as the search bar for detection rules.
    attr_reader :rule_query

    # The suppression query of the suppression rule. If a signal matches this query, it is suppressed and is not triggered . Same syntax as the queries to search signals in the signal explorer.
    attr_reader :suppression_query

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'description' => :'description',
        :'enabled' => :'enabled',
        :'expiration_date' => :'expiration_date',
        :'name' => :'name',
        :'rule_query' => :'rule_query',
        :'suppression_query' => :'suppression_query'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'description' => :'String',
        :'enabled' => :'Boolean',
        :'expiration_date' => :'Integer',
        :'name' => :'String',
        :'rule_query' => :'String',
        :'suppression_query' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::SecurityMonitoringSuppressionCreateAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V2::SecurityMonitoringSuppressionCreateAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'expiration_date')
        self.expiration_date = attributes[:'expiration_date']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'rule_query')
        self.rule_query = attributes[:'rule_query']
      end

      if attributes.key?(:'suppression_query')
        self.suppression_query = attributes[:'suppression_query']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @enabled.nil?
      return false if @name.nil?
      return false if @rule_query.nil?
      return false if @suppression_query.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param enabled [Object] Object to be assigned
    # @!visibility private
    def enabled=(enabled)
      if enabled.nil?
        fail ArgumentError, 'invalid value for "enabled", enabled cannot be nil.'
      end
      @enabled = enabled
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Custom attribute writer method with validation
    # @param rule_query [Object] Object to be assigned
    # @!visibility private
    def rule_query=(rule_query)
      if rule_query.nil?
        fail ArgumentError, 'invalid value for "rule_query", rule_query cannot be nil.'
      end
      @rule_query = rule_query
    end

    # Custom attribute writer method with validation
    # @param suppression_query [Object] Object to be assigned
    # @!visibility private
    def suppression_query=(suppression_query)
      if suppression_query.nil?
        fail ArgumentError, 'invalid value for "suppression_query", suppression_query cannot be nil.'
      end
      @suppression_query = suppression_query
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          description == o.description &&
          enabled == o.enabled &&
          expiration_date == o.expiration_date &&
          name == o.name &&
          rule_query == o.rule_query &&
          suppression_query == o.suppression_query
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [description, enabled, expiration_date, name, rule_query, suppression_query].hash
    end
  end
end
