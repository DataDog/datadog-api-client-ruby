=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Create a new Cloud Workload Security Agent rule.
  class CloudWorkloadSecurityAgentRuleCreateAttributes
    include BaseGenericModel

    # The array of actions the rule can perform if triggered
    attr_accessor :actions

    # Constrain the rule to specific versions of the Datadog Agent.
    attr_accessor :agent_version

    # The blocking policies that the rule belongs to.
    attr_accessor :blocking

    # The description of the Agent rule.
    attr_accessor :description

    # The disabled policies that the rule belongs to.
    attr_accessor :disabled

    # Whether the Agent rule is enabled.
    attr_accessor :enabled

    # The SECL expression of the Agent rule.
    attr_reader :expression

    # The platforms the Agent rule is supported on.
    attr_accessor :filters

    # The monitoring policies that the rule belongs to.
    attr_accessor :monitoring

    # The name of the Agent rule.
    attr_reader :name

    # The ID of the policy where the Agent rule is saved.
    attr_accessor :policy_id

    # The list of product tags associated with the rule.
    attr_accessor :product_tags

    # Whether the rule is silent.
    attr_accessor :silent

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'actions' => :'actions',
        :'agent_version' => :'agent_version',
        :'blocking' => :'blocking',
        :'description' => :'description',
        :'disabled' => :'disabled',
        :'enabled' => :'enabled',
        :'expression' => :'expression',
        :'filters' => :'filters',
        :'monitoring' => :'monitoring',
        :'name' => :'name',
        :'policy_id' => :'policy_id',
        :'product_tags' => :'product_tags',
        :'silent' => :'silent'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'actions' => :'Array<CloudWorkloadSecurityAgentRuleAction>',
        :'agent_version' => :'String',
        :'blocking' => :'Array<String>',
        :'description' => :'String',
        :'disabled' => :'Array<String>',
        :'enabled' => :'Boolean',
        :'expression' => :'String',
        :'filters' => :'Array<String>',
        :'monitoring' => :'Array<String>',
        :'name' => :'String',
        :'policy_id' => :'String',
        :'product_tags' => :'Array<String>',
        :'silent' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
        :'actions',
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::CloudWorkloadSecurityAgentRuleCreateAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'actions')
        if (value = attributes[:'actions']).is_a?(Array)
          self.actions = value
        end
      end

      if attributes.key?(:'agent_version')
        self.agent_version = attributes[:'agent_version']
      end

      if attributes.key?(:'blocking')
        if (value = attributes[:'blocking']).is_a?(Array)
          self.blocking = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'disabled')
        if (value = attributes[:'disabled']).is_a?(Array)
          self.disabled = value
        end
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'expression')
        self.expression = attributes[:'expression']
      end

      if attributes.key?(:'filters')
        if (value = attributes[:'filters']).is_a?(Array)
          self.filters = value
        end
      end

      if attributes.key?(:'monitoring')
        if (value = attributes[:'monitoring']).is_a?(Array)
          self.monitoring = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'policy_id')
        self.policy_id = attributes[:'policy_id']
      end

      if attributes.key?(:'product_tags')
        if (value = attributes[:'product_tags']).is_a?(Array)
          self.product_tags = value
        end
      end

      if attributes.key?(:'silent')
        self.silent = attributes[:'silent']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @expression.nil?
      return false if @name.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param expression [Object] Object to be assigned
    # @!visibility private
    def expression=(expression)
      if expression.nil?
        fail ArgumentError, 'invalid value for "expression", expression cannot be nil.'
      end
      @expression = expression
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          actions == o.actions &&
          agent_version == o.agent_version &&
          blocking == o.blocking &&
          description == o.description &&
          disabled == o.disabled &&
          enabled == o.enabled &&
          expression == o.expression &&
          filters == o.filters &&
          monitoring == o.monitoring &&
          name == o.name &&
          policy_id == o.policy_id &&
          product_tags == o.product_tags &&
          silent == o.silent &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [actions, agent_version, blocking, description, disabled, enabled, expression, filters, monitoring, name, policy_id, product_tags, silent, additional_properties].hash
    end
  end
end
