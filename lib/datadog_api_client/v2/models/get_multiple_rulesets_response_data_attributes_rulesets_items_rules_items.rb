=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # 
  class GetMultipleRulesetsResponseDataAttributesRulesetsItemsRulesItems
    include BaseGenericModel

    #
    attr_accessor :arguments

    #
    attr_accessor :category

    #
    attr_accessor :checksum

    #
    attr_accessor :code

    #
    attr_accessor :created_at

    #
    attr_accessor :created_by

    #
    attr_accessor :cve

    #
    attr_accessor :cwe

    #
    attr_reader :data

    #
    attr_accessor :description

    #
    attr_accessor :documentation_url

    #
    attr_accessor :entity_checked

    #
    attr_accessor :is_published

    #
    attr_accessor :is_testing

    #
    attr_accessor :language

    #
    attr_accessor :last_updated_at

    #
    attr_accessor :last_updated_by

    #
    attr_accessor :name

    #
    attr_accessor :regex

    #
    attr_accessor :severity

    #
    attr_accessor :short_description

    #
    attr_accessor :should_use_ai_fix

    #
    attr_accessor :tests

    #
    attr_accessor :tree_sitter_query

    #
    attr_accessor :type

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'arguments' => :'arguments',
        :'category' => :'category',
        :'checksum' => :'checksum',
        :'code' => :'code',
        :'created_at' => :'created_at',
        :'created_by' => :'created_by',
        :'cve' => :'cve',
        :'cwe' => :'cwe',
        :'data' => :'data',
        :'description' => :'description',
        :'documentation_url' => :'documentation_url',
        :'entity_checked' => :'entity_checked',
        :'is_published' => :'is_published',
        :'is_testing' => :'is_testing',
        :'language' => :'language',
        :'last_updated_at' => :'last_updated_at',
        :'last_updated_by' => :'last_updated_by',
        :'name' => :'name',
        :'regex' => :'regex',
        :'severity' => :'severity',
        :'short_description' => :'short_description',
        :'should_use_ai_fix' => :'should_use_ai_fix',
        :'tests' => :'tests',
        :'tree_sitter_query' => :'tree_sitter_query',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'arguments' => :'Array<GetMultipleRulesetsResponseDataAttributesRulesetsItemsRulesItemsArgumentsItems>',
        :'category' => :'String',
        :'checksum' => :'String',
        :'code' => :'String',
        :'created_at' => :'Time',
        :'created_by' => :'String',
        :'cve' => :'String',
        :'cwe' => :'String',
        :'data' => :'GetMultipleRulesetsResponseDataAttributesRulesetsItemsRulesItemsData',
        :'description' => :'String',
        :'documentation_url' => :'String',
        :'entity_checked' => :'String',
        :'is_published' => :'Boolean',
        :'is_testing' => :'Boolean',
        :'language' => :'String',
        :'last_updated_at' => :'Time',
        :'last_updated_by' => :'String',
        :'name' => :'String',
        :'regex' => :'String',
        :'severity' => :'String',
        :'short_description' => :'String',
        :'should_use_ai_fix' => :'Boolean',
        :'tests' => :'Array<GetMultipleRulesetsResponseDataAttributesRulesetsItemsRulesItemsTestsItems>',
        :'tree_sitter_query' => :'String',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::GetMultipleRulesetsResponseDataAttributesRulesetsItemsRulesItems` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'arguments')
        if (value = attributes[:'arguments']).is_a?(Array)
          self.arguments = value
        end
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'checksum')
        self.checksum = attributes[:'checksum']
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'cve')
        self.cve = attributes[:'cve']
      end

      if attributes.key?(:'cwe')
        self.cwe = attributes[:'cwe']
      end

      if attributes.key?(:'data')
        self.data = attributes[:'data']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'documentation_url')
        self.documentation_url = attributes[:'documentation_url']
      end

      if attributes.key?(:'entity_checked')
        self.entity_checked = attributes[:'entity_checked']
      end

      if attributes.key?(:'is_published')
        self.is_published = attributes[:'is_published']
      end

      if attributes.key?(:'is_testing')
        self.is_testing = attributes[:'is_testing']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'last_updated_at')
        self.last_updated_at = attributes[:'last_updated_at']
      end

      if attributes.key?(:'last_updated_by')
        self.last_updated_by = attributes[:'last_updated_by']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'regex')
        self.regex = attributes[:'regex']
      end

      if attributes.key?(:'severity')
        self.severity = attributes[:'severity']
      end

      if attributes.key?(:'short_description')
        self.short_description = attributes[:'short_description']
      end

      if attributes.key?(:'should_use_ai_fix')
        self.should_use_ai_fix = attributes[:'should_use_ai_fix']
      end

      if attributes.key?(:'tests')
        if (value = attributes[:'tests']).is_a?(Array)
          self.tests = value
        end
      end

      if attributes.key?(:'tree_sitter_query')
        self.tree_sitter_query = attributes[:'tree_sitter_query']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @data.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param data [Object] Object to be assigned
    # @!visibility private
    def data=(data)
      if data.nil?
        fail ArgumentError, 'invalid value for "data", data cannot be nil.'
      end
      @data = data
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          arguments == o.arguments &&
          category == o.category &&
          checksum == o.checksum &&
          code == o.code &&
          created_at == o.created_at &&
          created_by == o.created_by &&
          cve == o.cve &&
          cwe == o.cwe &&
          data == o.data &&
          description == o.description &&
          documentation_url == o.documentation_url &&
          entity_checked == o.entity_checked &&
          is_published == o.is_published &&
          is_testing == o.is_testing &&
          language == o.language &&
          last_updated_at == o.last_updated_at &&
          last_updated_by == o.last_updated_by &&
          name == o.name &&
          regex == o.regex &&
          severity == o.severity &&
          short_description == o.short_description &&
          should_use_ai_fix == o.should_use_ai_fix &&
          tests == o.tests &&
          tree_sitter_query == o.tree_sitter_query &&
          type == o.type &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [arguments, category, checksum, code, created_at, created_by, cve, cwe, data, description, documentation_url, entity_checked, is_published, is_testing, language, last_updated_at, last_updated_by, name, regex, severity, short_description, should_use_ai_fix, tests, tree_sitter_query, type, additional_properties].hash
    end
  end
end
