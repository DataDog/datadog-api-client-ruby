=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Optional parameters for bulk creating metric tag configurations.
  class MetricBulkTagConfigCreateAttributes
    include BaseGenericModel
    # A list of account emails to notify when the configuration is applied.
    attr_accessor :emails
    # When set to true, the configuration will exclude the configured tags and include any other submitted tags.
    # When set to false, the configuration will include the configured tags and exclude any other submitted tags.
    # Defaults to false.
    attr_accessor :exclude_tags_mode
    # When provided, all tags that have been actively queried are
    # configured (and, therefore, remain queryable) for each metric that
    # matches the given prefix.  Minimum value is 1 second, and maximum
    # value is 7,776,000 seconds (90 days).
    attr_reader :include_actively_queried_tags_window
    # When set to true, the configuration overrides any existing
    # configurations for the given metric with the new set of tags in this
    # configuration request. If false, old configurations are kept and
    # are merged with the set of tags in this configuration request.
    # Defaults to true.
    attr_accessor :override_existing_configurations
    # A list of tag names to apply to the configuration.
    attr_accessor :tags

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'emails' => :'emails',
        :'exclude_tags_mode' => :'exclude_tags_mode',
        :'include_actively_queried_tags_window' => :'include_actively_queried_tags_window',
        :'override_existing_configurations' => :'override_existing_configurations',
        :'tags' => :'tags'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'emails' => :'Array<String>',
        :'exclude_tags_mode' => :'Boolean',
        :'include_actively_queried_tags_window' => :'Float',
        :'override_existing_configurations' => :'Boolean',
        :'tags' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::MetricBulkTagConfigCreateAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'emails')
        if (value = attributes[:'emails']).is_a?(Array)
          self.emails = value
        end
      end

      if attributes.key?(:'exclude_tags_mode')
        self.exclude_tags_mode = attributes[:'exclude_tags_mode']
      end

      if attributes.key?(:'include_actively_queried_tags_window')
        self.include_actively_queried_tags_window = attributes[:'include_actively_queried_tags_window']
      end

      if attributes.key?(:'override_existing_configurations')
        self.override_existing_configurations = attributes[:'override_existing_configurations']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if !@include_actively_queried_tags_window.nil? && @include_actively_queried_tags_window > 7776000
      return false if !@include_actively_queried_tags_window.nil? && @include_actively_queried_tags_window < 1
      true
    end

    # Custom attribute writer method with validation
    # @param include_actively_queried_tags_window [Object] Object to be assigned
    # @!visibility private
    def include_actively_queried_tags_window=(include_actively_queried_tags_window)
      if !include_actively_queried_tags_window.nil? && include_actively_queried_tags_window > 7776000
        fail ArgumentError, 'invalid value for "include_actively_queried_tags_window", must be smaller than or equal to 7776000.'
      end
      if !include_actively_queried_tags_window.nil? && include_actively_queried_tags_window < 1
        fail ArgumentError, 'invalid value for "include_actively_queried_tags_window", must be greater than or equal to 1.'
      end
      @include_actively_queried_tags_window = include_actively_queried_tags_window
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          emails == o.emails &&
          exclude_tags_mode == o.exclude_tags_mode &&
          include_actively_queried_tags_window == o.include_actively_queried_tags_window &&
          override_existing_configurations == o.override_existing_configurations &&
          tags == o.tags &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [emails, exclude_tags_mode, include_actively_queried_tags_window, override_existing_configurations, tags, additional_properties].hash
    end
  end
end
