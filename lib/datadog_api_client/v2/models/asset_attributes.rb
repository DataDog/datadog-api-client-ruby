=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The JSON:API attributes of the asset.
  class AssetAttributes
    include BaseGenericModel
    # Asset architecture.
    attr_accessor :arch
    # List of environments where the asset is deployed.
    attr_reader :environments
    # Asset name.
    attr_reader :name
    # Asset operating system.
    attr_accessor :operating_system
    # Asset risks.
    attr_reader :risks
    # List of teams that own the asset.
    attr_accessor :teams
    # The asset type
    attr_reader :type
    # Asset version.
    attr_accessor :version

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'arch' => :'arch',
        :'environments' => :'environments',
        :'name' => :'name',
        :'operating_system' => :'operating_system',
        :'risks' => :'risks',
        :'teams' => :'teams',
        :'type' => :'type',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'arch' => :'String',
        :'environments' => :'Array<String>',
        :'name' => :'String',
        :'operating_system' => :'AssetOperatingSystem',
        :'risks' => :'AssetRisks',
        :'teams' => :'Array<String>',
        :'type' => :'AssetType',
        :'version' => :'AssetVersion'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::AssetAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'arch')
        self.arch = attributes[:'arch']
      end

      if attributes.key?(:'environments')
        if (value = attributes[:'environments']).is_a?(Array)
          self.environments = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'operating_system')
        self.operating_system = attributes[:'operating_system']
      end

      if attributes.key?(:'risks')
        self.risks = attributes[:'risks']
      end

      if attributes.key?(:'teams')
        if (value = attributes[:'teams']).is_a?(Array)
          self.teams = value
        end
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @environments.nil?
      return false if @name.nil?
      return false if @risks.nil?
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param environments [Object] Object to be assigned
    # @!visibility private
    def environments=(environments)
      if environments.nil?
        fail ArgumentError, 'invalid value for "environments", environments cannot be nil.'
      end
      @environments = environments
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Custom attribute writer method with validation
    # @param risks [Object] Object to be assigned
    # @!visibility private
    def risks=(risks)
      if risks.nil?
        fail ArgumentError, 'invalid value for "risks", risks cannot be nil.'
      end
      @risks = risks
    end

    # Custom attribute writer method with validation
    # @param type [Object] Object to be assigned
    # @!visibility private
    def type=(type)
      if type.nil?
        fail ArgumentError, 'invalid value for "type", type cannot be nil.'
      end
      @type = type
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          arch == o.arch &&
          environments == o.environments &&
          name == o.name &&
          operating_system == o.operating_system &&
          risks == o.risks &&
          teams == o.teams &&
          type == o.type &&
          version == o.version &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [arch, environments, name, operating_system, risks, teams, type, version, additional_properties].hash
    end
  end
end
