=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Item in the Microsoft Teams integration metadata teams array.
  class MSTeamsIntegrationMetadataTeamsItem
    include BaseGenericModel

    # Microsoft Teams channel ID.
    attr_reader :ms_channel_id

    # Microsoft Teams channel name.
    attr_reader :ms_channel_name

    # Microsoft Teams tenant ID.
    attr_reader :ms_tenant_id

    # URL redirecting to the Microsoft Teams channel.
    attr_reader :redirect_url

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'ms_channel_id' => :'ms_channel_id',
        :'ms_channel_name' => :'ms_channel_name',
        :'ms_tenant_id' => :'ms_tenant_id',
        :'redirect_url' => :'redirect_url'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'ms_channel_id' => :'String',
        :'ms_channel_name' => :'String',
        :'ms_tenant_id' => :'String',
        :'redirect_url' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::MSTeamsIntegrationMetadataTeamsItem` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'ms_channel_id')
        self.ms_channel_id = attributes[:'ms_channel_id']
      end

      if attributes.key?(:'ms_channel_name')
        self.ms_channel_name = attributes[:'ms_channel_name']
      end

      if attributes.key?(:'ms_tenant_id')
        self.ms_tenant_id = attributes[:'ms_tenant_id']
      end

      if attributes.key?(:'redirect_url')
        self.redirect_url = attributes[:'redirect_url']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @ms_channel_id.nil?
      return false if @ms_channel_name.nil?
      return false if @ms_tenant_id.nil?
      return false if @redirect_url.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param ms_channel_id [Object] Object to be assigned
    # @!visibility private
    def ms_channel_id=(ms_channel_id)
      if ms_channel_id.nil?
        fail ArgumentError, 'invalid value for "ms_channel_id", ms_channel_id cannot be nil.'
      end
      @ms_channel_id = ms_channel_id
    end

    # Custom attribute writer method with validation
    # @param ms_channel_name [Object] Object to be assigned
    # @!visibility private
    def ms_channel_name=(ms_channel_name)
      if ms_channel_name.nil?
        fail ArgumentError, 'invalid value for "ms_channel_name", ms_channel_name cannot be nil.'
      end
      @ms_channel_name = ms_channel_name
    end

    # Custom attribute writer method with validation
    # @param ms_tenant_id [Object] Object to be assigned
    # @!visibility private
    def ms_tenant_id=(ms_tenant_id)
      if ms_tenant_id.nil?
        fail ArgumentError, 'invalid value for "ms_tenant_id", ms_tenant_id cannot be nil.'
      end
      @ms_tenant_id = ms_tenant_id
    end

    # Custom attribute writer method with validation
    # @param redirect_url [Object] Object to be assigned
    # @!visibility private
    def redirect_url=(redirect_url)
      if redirect_url.nil?
        fail ArgumentError, 'invalid value for "redirect_url", redirect_url cannot be nil.'
      end
      @redirect_url = redirect_url
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ms_channel_id == o.ms_channel_id &&
          ms_channel_name == o.ms_channel_name &&
          ms_tenant_id == o.ms_tenant_id &&
          redirect_url == o.redirect_url
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [ms_channel_id, ms_channel_name, ms_tenant_id, redirect_url].hash
    end
  end
end
