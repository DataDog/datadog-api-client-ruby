=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # 
  class SecretRuleDataAttributes
    include BaseGenericModel

    #
    attr_accessor :default_included_keywords

    #
    attr_accessor :description

    #
    attr_accessor :license

    #
    attr_accessor :match_validation

    #
    attr_accessor :name

    #
    attr_accessor :pattern

    #
    attr_accessor :priority

    #
    attr_accessor :sds_id

    #
    attr_accessor :validators

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'default_included_keywords' => :'default_included_keywords',
        :'description' => :'description',
        :'license' => :'license',
        :'match_validation' => :'match_validation',
        :'name' => :'name',
        :'pattern' => :'pattern',
        :'priority' => :'priority',
        :'sds_id' => :'sds_id',
        :'validators' => :'validators'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'default_included_keywords' => :'Array<String>',
        :'description' => :'String',
        :'license' => :'String',
        :'match_validation' => :'SecretRuleDataAttributesMatchValidation',
        :'name' => :'String',
        :'pattern' => :'String',
        :'priority' => :'String',
        :'sds_id' => :'String',
        :'validators' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::SecretRuleDataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'default_included_keywords')
        if (value = attributes[:'default_included_keywords']).is_a?(Array)
          self.default_included_keywords = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'license')
        self.license = attributes[:'license']
      end

      if attributes.key?(:'match_validation')
        self.match_validation = attributes[:'match_validation']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'pattern')
        self.pattern = attributes[:'pattern']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'sds_id')
        self.sds_id = attributes[:'sds_id']
      end

      if attributes.key?(:'validators')
        if (value = attributes[:'validators']).is_a?(Array)
          self.validators = value
        end
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          default_included_keywords == o.default_included_keywords &&
          description == o.description &&
          license == o.license &&
          match_validation == o.match_validation &&
          name == o.name &&
          pattern == o.pattern &&
          priority == o.priority &&
          sds_id == o.sds_id &&
          validators == o.validators &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [default_included_keywords, description, license, match_validation, name, pattern, priority, sds_id, validators, additional_properties].hash
    end
  end
end
