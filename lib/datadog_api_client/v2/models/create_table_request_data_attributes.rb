=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The definition of the reference table attributes object.
  class CreateTableRequestDataAttributes
    include BaseGenericModel

    # The description of the reference table.
    attr_accessor :description

    # The definition of the file metadata object.
    attr_accessor :file_metadata

    # The definition of the schema object.
    attr_reader :schema

    # The source type for creating reference table data. Only these source types can be created through this API.
    attr_reader :source

    # The name of the reference table.
    attr_reader :table_name

    # The tags of the reference table.
    attr_accessor :tags

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'description' => :'description',
        :'file_metadata' => :'file_metadata',
        :'schema' => :'schema',
        :'source' => :'source',
        :'table_name' => :'table_name',
        :'tags' => :'tags'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'description' => :'String',
        :'file_metadata' => :'CreateTableRequestDataAttributesFileMetadata',
        :'schema' => :'CreateTableRequestDataAttributesSchema',
        :'source' => :'ReferenceTableCreateSourceType',
        :'table_name' => :'String',
        :'tags' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::CreateTableRequestDataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'file_metadata')
        self.file_metadata = attributes[:'file_metadata']
      end

      if attributes.key?(:'schema')
        self.schema = attributes[:'schema']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'table_name')
        self.table_name = attributes[:'table_name']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @schema.nil?
      return false if @source.nil?
      return false if @table_name.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param schema [Object] Object to be assigned
    # @!visibility private
    def schema=(schema)
      if schema.nil?
        fail ArgumentError, 'invalid value for "schema", schema cannot be nil.'
      end
      @schema = schema
    end

    # Custom attribute writer method with validation
    # @param source [Object] Object to be assigned
    # @!visibility private
    def source=(source)
      if source.nil?
        fail ArgumentError, 'invalid value for "source", source cannot be nil.'
      end
      @source = source
    end

    # Custom attribute writer method with validation
    # @param table_name [Object] Object to be assigned
    # @!visibility private
    def table_name=(table_name)
      if table_name.nil?
        fail ArgumentError, 'invalid value for "table_name", table_name cannot be nil.'
      end
      @table_name = table_name
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          description == o.description &&
          file_metadata == o.file_metadata &&
          schema == o.schema &&
          source == o.source &&
          table_name == o.table_name &&
          tags == o.tags &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [description, file_metadata, schema, source, table_name, tags, additional_properties].hash
    end
  end
end
