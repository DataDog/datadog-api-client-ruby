=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Alert event attributes.
  class AlertEventAttributes
    include BaseGenericModel
    # Aggregation key of the event.
    attr_accessor :aggregation_key
    # JSON object of custom attributes.
    attr_accessor :custom
    # JSON object of event system attributes.
    attr_accessor :evt
    # The links related to the event.
    attr_accessor :links
    # The priority of the alert.
    attr_accessor :priority
    # Service that triggered the event.
    attr_accessor :service
    # The status of the alert.
    attr_accessor :status
    # POSIX timestamp of the event.
    attr_accessor :timestamp
    # The title of the event.
    attr_accessor :title

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'aggregation_key' => :'aggregation_key',
        :'custom' => :'custom',
        :'evt' => :'evt',
        :'links' => :'links',
        :'priority' => :'priority',
        :'service' => :'service',
        :'status' => :'status',
        :'timestamp' => :'timestamp',
        :'title' => :'title'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'aggregation_key' => :'String',
        :'custom' => :'Object',
        :'evt' => :'EventSystemAttributes',
        :'links' => :'Array<AlertEventAttributesLinksItem>',
        :'priority' => :'AlertEventAttributesPriority',
        :'service' => :'String',
        :'status' => :'AlertEventAttributesStatus',
        :'timestamp' => :'Integer',
        :'title' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::AlertEventAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'aggregation_key')
        self.aggregation_key = attributes[:'aggregation_key']
      end

      if attributes.key?(:'custom')
        self.custom = attributes[:'custom']
      end

      if attributes.key?(:'evt')
        self.evt = attributes[:'evt']
      end

      if attributes.key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'service')
        self.service = attributes[:'service']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aggregation_key == o.aggregation_key &&
          custom == o.custom &&
          evt == o.evt &&
          links == o.links &&
          priority == o.priority &&
          service == o.service &&
          status == o.status &&
          timestamp == o.timestamp &&
          title == o.title &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [aggregation_key, custom, evt, links, priority, service, status, timestamp, title, additional_properties].hash
    end
  end
end
