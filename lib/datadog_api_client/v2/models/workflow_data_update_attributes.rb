=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The definition of `WorkflowDataUpdateAttributes` object.
  class WorkflowDataUpdateAttributes
    include BaseGenericModel
    # When the workflow was created.
    attr_accessor :created_at
    # Description of the workflow.
    attr_accessor :description
    # Name of the workflow.
    attr_accessor :name
    # Set the workflow to published or unpublished. Workflows in an unpublished state will only be executable via manual runs. Automatic triggers such as Schedule will not execute the workflow until it is published.
    attr_accessor :published
    # The spec defines what the workflow does.
    attr_accessor :spec
    # Tags of the workflow.
    attr_accessor :tags
    # When the workflow was last updated.
    attr_accessor :updated_at
    # If a Webhook trigger is defined on this workflow, a webhookSecret is required and should be provided here.
    attr_accessor :webhook_secret

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'created_at' => :'createdAt',
        :'description' => :'description',
        :'name' => :'name',
        :'published' => :'published',
        :'spec' => :'spec',
        :'tags' => :'tags',
        :'updated_at' => :'updatedAt',
        :'webhook_secret' => :'webhookSecret'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'created_at' => :'Time',
        :'description' => :'String',
        :'name' => :'String',
        :'published' => :'Boolean',
        :'spec' => :'Spec',
        :'tags' => :'Array<String>',
        :'updated_at' => :'Time',
        :'webhook_secret' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::WorkflowDataUpdateAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'published')
        self.published = attributes[:'published']
      end

      if attributes.key?(:'spec')
        self.spec = attributes[:'spec']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'webhook_secret')
        self.webhook_secret = attributes[:'webhook_secret']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_at == o.created_at &&
          description == o.description &&
          name == o.name &&
          published == o.published &&
          spec == o.spec &&
          tags == o.tags &&
          updated_at == o.updated_at &&
          webhook_secret == o.webhook_secret &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [created_at, description, name, published, spec, tags, updated_at, webhook_secret, additional_properties].hash
    end
  end
end
