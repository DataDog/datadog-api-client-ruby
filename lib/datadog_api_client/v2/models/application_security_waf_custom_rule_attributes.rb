=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # A WAF custom rule.
  class ApplicationSecurityWafCustomRuleAttributes
    include BaseGenericModel

    # The definition of `ApplicationSecurityWafCustomRuleAction` object.
    attr_accessor :action

    # Indicates whether the WAF custom rule will block the request.
    attr_reader :blocking

    # Conditions for which the WAF Custom Rule will triggers, all conditions needs to match in order for the WAF
    # rule to trigger.
    attr_reader :conditions

    # Indicates whether the WAF custom rule is enabled.
    attr_reader :enabled

    # Metadata associated with the WAF Custom Rule.
    attr_accessor :metadata

    # The Name of the WAF custom rule.
    attr_reader :name

    # The path glob for the WAF custom rule.
    attr_accessor :path_glob

    # The scope of the WAF custom rule.
    attr_accessor :scope

    # Tags associated with the WAF Custom Rule. The concatenation of category and type will form the security
    # activity field associated with the traces.
    attr_reader :tags

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'action' => :'action',
        :'blocking' => :'blocking',
        :'conditions' => :'conditions',
        :'enabled' => :'enabled',
        :'metadata' => :'metadata',
        :'name' => :'name',
        :'path_glob' => :'path_glob',
        :'scope' => :'scope',
        :'tags' => :'tags'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'action' => :'ApplicationSecurityWafCustomRuleAction',
        :'blocking' => :'Boolean',
        :'conditions' => :'Array<ApplicationSecurityWafCustomRuleCondition>',
        :'enabled' => :'Boolean',
        :'metadata' => :'ApplicationSecurityWafCustomRuleMetadata',
        :'name' => :'String',
        :'path_glob' => :'String',
        :'scope' => :'Array<ApplicationSecurityWafCustomRuleScope>',
        :'tags' => :'ApplicationSecurityWafCustomRuleTags'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::ApplicationSecurityWafCustomRuleAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.key?(:'blocking')
        self.blocking = attributes[:'blocking']
      end

      if attributes.key?(:'conditions')
        if (value = attributes[:'conditions']).is_a?(Array)
          self.conditions = value
        end
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'path_glob')
        self.path_glob = attributes[:'path_glob']
      end

      if attributes.key?(:'scope')
        if (value = attributes[:'scope']).is_a?(Array)
          self.scope = value
        end
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @blocking.nil?
      return false if @conditions.nil?
      return false if @enabled.nil?
      return false if @name.nil?
      return false if @tags.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param blocking [Object] Object to be assigned
    # @!visibility private
    def blocking=(blocking)
      if blocking.nil?
        fail ArgumentError, 'invalid value for "blocking", blocking cannot be nil.'
      end
      @blocking = blocking
    end

    # Custom attribute writer method with validation
    # @param conditions [Object] Object to be assigned
    # @!visibility private
    def conditions=(conditions)
      if conditions.nil?
        fail ArgumentError, 'invalid value for "conditions", conditions cannot be nil.'
      end
      @conditions = conditions
    end

    # Custom attribute writer method with validation
    # @param enabled [Object] Object to be assigned
    # @!visibility private
    def enabled=(enabled)
      if enabled.nil?
        fail ArgumentError, 'invalid value for "enabled", enabled cannot be nil.'
      end
      @enabled = enabled
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Custom attribute writer method with validation
    # @param tags [Object] Object to be assigned
    # @!visibility private
    def tags=(tags)
      if tags.nil?
        fail ArgumentError, 'invalid value for "tags", tags cannot be nil.'
      end
      @tags = tags
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          action == o.action &&
          blocking == o.blocking &&
          conditions == o.conditions &&
          enabled == o.enabled &&
          metadata == o.metadata &&
          name == o.name &&
          path_glob == o.path_glob &&
          scope == o.scope &&
          tags == o.tags &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [action, blocking, conditions, enabled, metadata, name, path_glob, scope, tags, additional_properties].hash
    end
  end
end
