=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The `google_pubsub` source ingests logs from a Google Cloud Pub/Sub subscription.
  class ObservabilityPipelineGooglePubSubSource
    include BaseGenericModel

    # GCP credentials used to authenticate with Google Cloud Storage.
    #
    attr_reader :auth

    # The decoding format used to interpret incoming logs.
    attr_reader :decoding

    # The unique identifier for this component. Used to reference this component in other parts of the pipeline (e.g., as input to downstream components).
    attr_reader :id

    # The GCP project ID that owns the Pub/Sub subscription.
    attr_reader :project

    # The Pub/Sub subscription name from which messages are consumed.
    attr_reader :subscription

    # Configuration for enabling TLS encryption.
    attr_accessor :tls

    # The source type. The value should always be `google_pubsub`.
    attr_reader :type

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'auth' => :'auth',
        :'decoding' => :'decoding',
        :'id' => :'id',
        :'project' => :'project',
        :'subscription' => :'subscription',
        :'tls' => :'tls',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'auth' => :'ObservabilityPipelineGcpAuth',
        :'decoding' => :'ObservabilityPipelineDecoding',
        :'id' => :'String',
        :'project' => :'String',
        :'subscription' => :'String',
        :'tls' => :'ObservabilityPipelineTls',
        :'type' => :'ObservabilityPipelineGooglePubSubSourceType'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::ObservabilityPipelineGooglePubSubSource` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'auth')
        self.auth = attributes[:'auth']
      end

      if attributes.key?(:'decoding')
        self.decoding = attributes[:'decoding']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'project')
        self.project = attributes[:'project']
      end

      if attributes.key?(:'subscription')
        self.subscription = attributes[:'subscription']
      end

      if attributes.key?(:'tls')
        self.tls = attributes[:'tls']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @auth.nil?
      return false if @decoding.nil?
      return false if @id.nil?
      return false if @project.nil?
      return false if @subscription.nil?
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param auth [Object] Object to be assigned
    # @!visibility private
    def auth=(auth)
      if auth.nil?
        fail ArgumentError, 'invalid value for "auth", auth cannot be nil.'
      end
      @auth = auth
    end

    # Custom attribute writer method with validation
    # @param decoding [Object] Object to be assigned
    # @!visibility private
    def decoding=(decoding)
      if decoding.nil?
        fail ArgumentError, 'invalid value for "decoding", decoding cannot be nil.'
      end
      @decoding = decoding
    end

    # Custom attribute writer method with validation
    # @param id [Object] Object to be assigned
    # @!visibility private
    def id=(id)
      if id.nil?
        fail ArgumentError, 'invalid value for "id", id cannot be nil.'
      end
      @id = id
    end

    # Custom attribute writer method with validation
    # @param project [Object] Object to be assigned
    # @!visibility private
    def project=(project)
      if project.nil?
        fail ArgumentError, 'invalid value for "project", project cannot be nil.'
      end
      @project = project
    end

    # Custom attribute writer method with validation
    # @param subscription [Object] Object to be assigned
    # @!visibility private
    def subscription=(subscription)
      if subscription.nil?
        fail ArgumentError, 'invalid value for "subscription", subscription cannot be nil.'
      end
      @subscription = subscription
    end

    # Custom attribute writer method with validation
    # @param type [Object] Object to be assigned
    # @!visibility private
    def type=(type)
      if type.nil?
        fail ArgumentError, 'invalid value for "type", type cannot be nil.'
      end
      @type = type
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auth == o.auth &&
          decoding == o.decoding &&
          id == o.id &&
          project == o.project &&
          subscription == o.subscription &&
          tls == o.tls &&
          type == o.type &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [auth, decoding, id, project, subscription, tls, type, additional_properties].hash
    end
  end
end
