=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Sends a message to a Microsoft Teams channel.
  class SendTeamsMessageAction
    include BaseGenericModel
    # The channel ID.
    attr_reader :channel
    # The team ID.
    attr_reader :team
    # The tenant ID.
    attr_reader :tenant
    # Indicates that the action is a send Microsoft Teams message action.
    attr_reader :type

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'channel' => :'channel',
        :'team' => :'team',
        :'tenant' => :'tenant',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'channel' => :'String',
        :'team' => :'String',
        :'tenant' => :'String',
        :'type' => :'SendTeamsMessageActionType'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::SendTeamsMessageAction` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'channel')
        self.channel = attributes[:'channel']
      end

      if attributes.key?(:'team')
        self.team = attributes[:'team']
      end

      if attributes.key?(:'tenant')
        self.tenant = attributes[:'tenant']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @channel.nil?
      return false if @team.nil?
      return false if @tenant.nil?
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param channel [Object] Object to be assigned
    # @!visibility private
    def channel=(channel)
      if channel.nil?
        fail ArgumentError, 'invalid value for "channel", channel cannot be nil.'
      end
      @channel = channel
    end

    # Custom attribute writer method with validation
    # @param team [Object] Object to be assigned
    # @!visibility private
    def team=(team)
      if team.nil?
        fail ArgumentError, 'invalid value for "team", team cannot be nil.'
      end
      @team = team
    end

    # Custom attribute writer method with validation
    # @param tenant [Object] Object to be assigned
    # @!visibility private
    def tenant=(tenant)
      if tenant.nil?
        fail ArgumentError, 'invalid value for "tenant", tenant cannot be nil.'
      end
      @tenant = tenant
    end

    # Custom attribute writer method with validation
    # @param type [Object] Object to be assigned
    # @!visibility private
    def type=(type)
      if type.nil?
        fail ArgumentError, 'invalid value for "type", type cannot be nil.'
      end
      @type = type
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          channel == o.channel &&
          team == o.team &&
          tenant == o.tenant &&
          type == o.type &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [channel, team, tenant, type, additional_properties].hash
    end
  end
end
