=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The incident impact's attributes.
  class IncidentImpactAttributes
    include BaseGenericModel
    # Timestamp when the impact was created.
    attr_accessor :created
    # Description of the impact.
    attr_reader :description
    # Timestamp when the impact ended.
    attr_accessor :end_at
    # An object mapping impact field names to field values.
    attr_accessor :fields
    # The type of impact.
    attr_accessor :impact_type
    # Timestamp when the impact was last modified.
    attr_accessor :modified
    # Timestamp representing when the impact started.
    attr_reader :start_at

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'created' => :'created',
        :'description' => :'description',
        :'end_at' => :'end_at',
        :'fields' => :'fields',
        :'impact_type' => :'impact_type',
        :'modified' => :'modified',
        :'start_at' => :'start_at'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'created' => :'Time',
        :'description' => :'String',
        :'end_at' => :'Time',
        :'fields' => :'Hash<String, Object>',
        :'impact_type' => :'String',
        :'modified' => :'Time',
        :'start_at' => :'Time'
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
        :'end_at',
        :'fields',
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::IncidentImpactAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'end_at')
        self.end_at = attributes[:'end_at']
      end

      if attributes.key?(:'fields')
        self.fields = attributes[:'fields']
      end

      if attributes.key?(:'impact_type')
        self.impact_type = attributes[:'impact_type']
      end

      if attributes.key?(:'modified')
        self.modified = attributes[:'modified']
      end

      if attributes.key?(:'start_at')
        self.start_at = attributes[:'start_at']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @description.nil?
      return false if @start_at.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param description [Object] Object to be assigned
    # @!visibility private
    def description=(description)
      if description.nil?
        fail ArgumentError, 'invalid value for "description", description cannot be nil.'
      end
      @description = description
    end

    # Custom attribute writer method with validation
    # @param start_at [Object] Object to be assigned
    # @!visibility private
    def start_at=(start_at)
      if start_at.nil?
        fail ArgumentError, 'invalid value for "start_at", start_at cannot be nil.'
      end
      @start_at = start_at
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          description == o.description &&
          end_at == o.end_at &&
          fields == o.fields &&
          impact_type == o.impact_type &&
          modified == o.modified &&
          start_at == o.start_at &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [created, description, end_at, fields, impact_type, modified, start_at, additional_properties].hash
    end
  end
end
