=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # A Step is a sub-component of a workflow. Each Step performs an action.
  class Step
    include BaseGenericModel
    # The unique identifier of an action.
    attr_reader :action_id
    # Used to create conditions before running subsequent actions.
    attr_accessor :completion_gate
    # The unique identifier of a connection defined in the spec.
    attr_accessor :connection_label
    # The definition of `StepDisplay` object.
    attr_accessor :display
    # The `Step` `errorHandlers`.
    attr_accessor :error_handlers
    # Name of the step.
    attr_reader :name
    # A list of subsequent actions to run.
    attr_accessor :outbound_edges
    # A list of inputs for an action.
    attr_accessor :parameters
    # Used to merge multiple branches into a single branch.
    attr_accessor :readiness_gate

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'action_id' => :'actionId',
        :'completion_gate' => :'completionGate',
        :'connection_label' => :'connectionLabel',
        :'display' => :'display',
        :'error_handlers' => :'errorHandlers',
        :'name' => :'name',
        :'outbound_edges' => :'outboundEdges',
        :'parameters' => :'parameters',
        :'readiness_gate' => :'readinessGate'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'action_id' => :'String',
        :'completion_gate' => :'CompletionGate',
        :'connection_label' => :'String',
        :'display' => :'StepDisplay',
        :'error_handlers' => :'Array<ErrorHandler>',
        :'name' => :'String',
        :'outbound_edges' => :'Array<OutboundEdge>',
        :'parameters' => :'Array<Parameter>',
        :'readiness_gate' => :'ReadinessGate'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::Step` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'action_id')
        self.action_id = attributes[:'action_id']
      end

      if attributes.key?(:'completion_gate')
        self.completion_gate = attributes[:'completion_gate']
      end

      if attributes.key?(:'connection_label')
        self.connection_label = attributes[:'connection_label']
      end

      if attributes.key?(:'display')
        self.display = attributes[:'display']
      end

      if attributes.key?(:'error_handlers')
        if (value = attributes[:'error_handlers']).is_a?(Array)
          self.error_handlers = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'outbound_edges')
        if (value = attributes[:'outbound_edges']).is_a?(Array)
          self.outbound_edges = value
        end
      end

      if attributes.key?(:'parameters')
        if (value = attributes[:'parameters']).is_a?(Array)
          self.parameters = value
        end
      end

      if attributes.key?(:'readiness_gate')
        self.readiness_gate = attributes[:'readiness_gate']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @action_id.nil?
      return false if @name.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param action_id [Object] Object to be assigned
    # @!visibility private
    def action_id=(action_id)
      if action_id.nil?
        fail ArgumentError, 'invalid value for "action_id", action_id cannot be nil.'
      end
      @action_id = action_id
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          action_id == o.action_id &&
          completion_gate == o.completion_gate &&
          connection_label == o.connection_label &&
          display == o.display &&
          error_handlers == o.error_handlers &&
          name == o.name &&
          outbound_edges == o.outbound_edges &&
          parameters == o.parameters &&
          readiness_gate == o.readiness_gate &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [action_id, completion_gate, connection_label, display, error_handlers, name, outbound_edges, parameters, readiness_gate, additional_properties].hash
    end
  end
end
