=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Cloud storage file metadata for create requests. Both access_details and sync_enabled are required.
  class CreateTableRequestDataAttributesFileMetadataCloudStorage
    include BaseGenericModel

    # The definition of the access details object.
    attr_reader :access_details

    # Whether this table is synced automatically.
    attr_reader :sync_enabled

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'access_details' => :'access_details',
        :'sync_enabled' => :'sync_enabled'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'access_details' => :'CreateTableRequestDataAttributesFileMetadataOneOfAccessDetails',
        :'sync_enabled' => :'Boolean'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::CreateTableRequestDataAttributesFileMetadataCloudStorage` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V2::CreateTableRequestDataAttributesFileMetadataCloudStorage`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'access_details')
        self.access_details = attributes[:'access_details']
      end

      if attributes.key?(:'sync_enabled')
        self.sync_enabled = attributes[:'sync_enabled']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @access_details.nil?
      return false if @sync_enabled.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param access_details [Object] Object to be assigned
    # @!visibility private
    def access_details=(access_details)
      if access_details.nil?
        fail ArgumentError, 'invalid value for "access_details", access_details cannot be nil.'
      end
      @access_details = access_details
    end

    # Custom attribute writer method with validation
    # @param sync_enabled [Object] Object to be assigned
    # @!visibility private
    def sync_enabled=(sync_enabled)
      if sync_enabled.nil?
        fail ArgumentError, 'invalid value for "sync_enabled", sync_enabled cannot be nil.'
      end
      @sync_enabled = sync_enabled
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          access_details == o.access_details &&
          sync_enabled == o.sync_enabled
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [access_details, sync_enabled].hash
    end
  end
end
