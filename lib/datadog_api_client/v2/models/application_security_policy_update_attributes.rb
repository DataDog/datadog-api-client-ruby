=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Update a WAF policy.
  class ApplicationSecurityPolicyUpdateAttributes
    include BaseGenericModel

    # Description of the WAF policy.
    attr_reader :description

    # Make this policy the default policy. The default policy is applied to every services not specifically added to another policy.
    attr_reader :is_default

    # The Name of the WAF policy.
    attr_reader :name

    # Presets enabled on this policy.
    attr_reader :protection_presets

    # Rule overrides applied by the policy.
    attr_reader :rules

    # The scope of the WAF policy.
    attr_reader :scope

    # Version of the WAF ruleset maintained by Datadog used by this policy. 0 is the default value.
    attr_reader :version

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'description' => :'description',
        :'is_default' => :'isDefault',
        :'name' => :'name',
        :'protection_presets' => :'protectionPresets',
        :'rules' => :'rules',
        :'scope' => :'scope',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'description' => :'String',
        :'is_default' => :'Boolean',
        :'name' => :'String',
        :'protection_presets' => :'Array<String>',
        :'rules' => :'Array<ApplicationSecurityPolicyRuleOverride>',
        :'scope' => :'Array<ApplicationSecurityPolicyScope>',
        :'version' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::ApplicationSecurityPolicyUpdateAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'is_default')
        self.is_default = attributes[:'is_default']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'protection_presets')
        if (value = attributes[:'protection_presets']).is_a?(Array)
          self.protection_presets = value
        end
      end

      if attributes.key?(:'rules')
        if (value = attributes[:'rules']).is_a?(Array)
          self.rules = value
        end
      end

      if attributes.key?(:'scope')
        if (value = attributes[:'scope']).is_a?(Array)
          self.scope = value
        end
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @description.nil?
      return false if @is_default.nil?
      return false if @name.nil?
      return false if @protection_presets.nil?
      return false if @rules.nil?
      return false if @scope.nil?
      return false if @version.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param description [Object] Object to be assigned
    # @!visibility private
    def description=(description)
      if description.nil?
        fail ArgumentError, 'invalid value for "description", description cannot be nil.'
      end
      @description = description
    end

    # Custom attribute writer method with validation
    # @param is_default [Object] Object to be assigned
    # @!visibility private
    def is_default=(is_default)
      if is_default.nil?
        fail ArgumentError, 'invalid value for "is_default", is_default cannot be nil.'
      end
      @is_default = is_default
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Custom attribute writer method with validation
    # @param protection_presets [Object] Object to be assigned
    # @!visibility private
    def protection_presets=(protection_presets)
      if protection_presets.nil?
        fail ArgumentError, 'invalid value for "protection_presets", protection_presets cannot be nil.'
      end
      @protection_presets = protection_presets
    end

    # Custom attribute writer method with validation
    # @param rules [Object] Object to be assigned
    # @!visibility private
    def rules=(rules)
      if rules.nil?
        fail ArgumentError, 'invalid value for "rules", rules cannot be nil.'
      end
      @rules = rules
    end

    # Custom attribute writer method with validation
    # @param scope [Object] Object to be assigned
    # @!visibility private
    def scope=(scope)
      if scope.nil?
        fail ArgumentError, 'invalid value for "scope", scope cannot be nil.'
      end
      @scope = scope
    end

    # Custom attribute writer method with validation
    # @param version [Object] Object to be assigned
    # @!visibility private
    def version=(version)
      if version.nil?
        fail ArgumentError, 'invalid value for "version", version cannot be nil.'
      end
      @version = version
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          description == o.description &&
          is_default == o.is_default &&
          name == o.name &&
          protection_presets == o.protection_presets &&
          rules == o.rules &&
          scope == o.scope &&
          version == o.version &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [description, is_default, name, protection_presets, rules, scope, version, additional_properties].hash
    end
  end
end
