=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Specifies which principals are associated with a relation.
  class RestrictionPolicyBinding
    include BaseGenericModel

    # An array of principals. A principal is a subject or group of subjects.
    # Each principal is formatted as `type:id`. Supported types: `role`, `team`, `user`, and `org`.
    # The org ID can be obtained through the api/v2/current_user API.
    # The user principal type accepts service account IDs.
    attr_reader :principals

    # The role/level of access.
    attr_reader :relation

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'principals' => :'principals',
        :'relation' => :'relation'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'principals' => :'Array<String>',
        :'relation' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::RestrictionPolicyBinding` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'principals')
        if (value = attributes[:'principals']).is_a?(Array)
          self.principals = value
        end
      end

      if attributes.key?(:'relation')
        self.relation = attributes[:'relation']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @principals.nil?
      return false if @relation.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param principals [Object] Object to be assigned
    # @!visibility private
    def principals=(principals)
      if principals.nil?
        fail ArgumentError, 'invalid value for "principals", principals cannot be nil.'
      end
      @principals = principals
    end

    # Custom attribute writer method with validation
    # @param relation [Object] Object to be assigned
    # @!visibility private
    def relation=(relation)
      if relation.nil?
        fail ArgumentError, 'invalid value for "relation", relation cannot be nil.'
      end
      @relation = relation
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          principals == o.principals &&
          relation == o.relation
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [principals, relation].hash
    end
  end
end
