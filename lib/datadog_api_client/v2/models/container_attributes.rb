=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Attributes for a container.
  class ContainerAttributes
    include BaseGenericModel

    # The ID of the container.
    attr_accessor :container_id

    # Time the container was created.
    attr_accessor :created_at

    # Hostname of the host running the container.
    attr_accessor :host

    # Digest of the compressed image manifest.
    attr_accessor :image_digest

    # Name of the associated container image.
    attr_accessor :image_name

    # List of image tags associated with the container image.
    attr_accessor :image_tags

    # Name of the container.
    attr_accessor :name

    # Time the container was started.
    attr_accessor :started_at

    # State of the container. This depends on the container runtime.
    attr_accessor :state

    # List of tags associated with the container.
    attr_accessor :tags

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'container_id' => :'container_id',
        :'created_at' => :'created_at',
        :'host' => :'host',
        :'image_digest' => :'image_digest',
        :'image_name' => :'image_name',
        :'image_tags' => :'image_tags',
        :'name' => :'name',
        :'started_at' => :'started_at',
        :'state' => :'state',
        :'tags' => :'tags'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'container_id' => :'String',
        :'created_at' => :'String',
        :'host' => :'String',
        :'image_digest' => :'String',
        :'image_name' => :'String',
        :'image_tags' => :'Array<String>',
        :'name' => :'String',
        :'started_at' => :'String',
        :'state' => :'String',
        :'tags' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
        :'image_digest',
        :'image_tags',
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::ContainerAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'container_id')
        self.container_id = attributes[:'container_id']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'host')
        self.host = attributes[:'host']
      end

      if attributes.key?(:'image_digest')
        self.image_digest = attributes[:'image_digest']
      end

      if attributes.key?(:'image_name')
        self.image_name = attributes[:'image_name']
      end

      if attributes.key?(:'image_tags')
        if (value = attributes[:'image_tags']).is_a?(Array)
          self.image_tags = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'started_at')
        self.started_at = attributes[:'started_at']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          container_id == o.container_id &&
          created_at == o.created_at &&
          host == o.host &&
          image_digest == o.image_digest &&
          image_name == o.image_name &&
          image_tags == o.image_tags &&
          name == o.name &&
          started_at == o.started_at &&
          state == o.state &&
          tags == o.tags
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [container_id, created_at, host, image_digest, image_name, image_tags, name, started_at, state, tags].hash
    end
  end
end
