=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The definition of `AwsCurConfigResponseDataAttributes` object.
  class AwsCurConfigResponseDataAttributes
    include BaseGenericModel

    # The definition of `AwsCurConfigResponseDataAttributesAccountFilters` object.
    attr_accessor :account_filters

    # The `attributes` `account_id`.
    attr_accessor :account_id

    # The `attributes` `bucket_name`.
    attr_accessor :bucket_name

    # The `attributes` `bucket_region`.
    attr_accessor :bucket_region

    # The `attributes` `created_at`.
    attr_accessor :created_at

    # The `attributes` `error_messages`.
    attr_accessor :error_messages

    # The `attributes` `months`.
    attr_accessor :months

    # The `attributes` `report_name`.
    attr_accessor :report_name

    # The `attributes` `report_prefix`.
    attr_accessor :report_prefix

    # The `attributes` `status`.
    attr_accessor :status

    # The `attributes` `status_updated_at`.
    attr_accessor :status_updated_at

    # The `attributes` `updated_at`.
    attr_accessor :updated_at

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'account_filters' => :'account_filters',
        :'account_id' => :'account_id',
        :'bucket_name' => :'bucket_name',
        :'bucket_region' => :'bucket_region',
        :'created_at' => :'created_at',
        :'error_messages' => :'error_messages',
        :'months' => :'months',
        :'report_name' => :'report_name',
        :'report_prefix' => :'report_prefix',
        :'status' => :'status',
        :'status_updated_at' => :'status_updated_at',
        :'updated_at' => :'updated_at'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'account_filters' => :'AwsCurConfigResponseDataAttributesAccountFilters',
        :'account_id' => :'String',
        :'bucket_name' => :'String',
        :'bucket_region' => :'String',
        :'created_at' => :'String',
        :'error_messages' => :'Array<String>',
        :'months' => :'Integer',
        :'report_name' => :'String',
        :'report_prefix' => :'String',
        :'status' => :'String',
        :'status_updated_at' => :'String',
        :'updated_at' => :'String'
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
        :'error_messages',
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::AwsCurConfigResponseDataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'account_filters')
        self.account_filters = attributes[:'account_filters']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'bucket_name')
        self.bucket_name = attributes[:'bucket_name']
      end

      if attributes.key?(:'bucket_region')
        self.bucket_region = attributes[:'bucket_region']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'error_messages')
        if (value = attributes[:'error_messages']).is_a?(Array)
          self.error_messages = value
        end
      end

      if attributes.key?(:'months')
        self.months = attributes[:'months']
      end

      if attributes.key?(:'report_name')
        self.report_name = attributes[:'report_name']
      end

      if attributes.key?(:'report_prefix')
        self.report_prefix = attributes[:'report_prefix']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'status_updated_at')
        self.status_updated_at = attributes[:'status_updated_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_filters == o.account_filters &&
          account_id == o.account_id &&
          bucket_name == o.bucket_name &&
          bucket_region == o.bucket_region &&
          created_at == o.created_at &&
          error_messages == o.error_messages &&
          months == o.months &&
          report_name == o.report_name &&
          report_prefix == o.report_prefix &&
          status == o.status &&
          status_updated_at == o.status_updated_at &&
          updated_at == o.updated_at &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [account_filters, account_id, bucket_name, bucket_region, created_at, error_messages, months, report_name, report_prefix, status, status_updated_at, updated_at, additional_properties].hash
    end
  end
end
