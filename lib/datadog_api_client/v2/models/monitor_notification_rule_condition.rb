=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Conditions for `conditional_recipients`.
  class MonitorNotificationRuleCondition
    include BaseGenericModel

    # A list of recipients to notify. Uses the same format as the monitor `message` field. Must not start with an '@'.
    attr_reader :recipients

    # The scope to which the monitor applied.
    attr_reader :scope

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'recipients' => :'recipients',
        :'scope' => :'scope'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'recipients' => :'Array<String>',
        :'scope' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::MonitorNotificationRuleCondition` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'recipients')
        if (value = attributes[:'recipients']).is_a?(Array)
          self.recipients = value
        end
      end

      if attributes.key?(:'scope')
        self.scope = attributes[:'scope']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @recipients.nil?
      return false if @recipients.length > 20
      return false if @recipients.length < 1
      return false if @scope.nil?
      return false if @scope.to_s.length > 3000
      return false if @scope.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param recipients [Object] Object to be assigned
    # @!visibility private
    def recipients=(recipients)
      if recipients.nil?
        fail ArgumentError, 'invalid value for "recipients", recipients cannot be nil.'
      end
      if recipients.length > 20
        fail ArgumentError, 'invalid value for "recipients", number of items must be less than or equal to 20.'
      end
      if recipients.length < 1
        fail ArgumentError, 'invalid value for "recipients", number of items must be greater than or equal to 1.'
      end
      @recipients = recipients
    end

    # Custom attribute writer method with validation
    # @param scope [Object] Object to be assigned
    # @!visibility private
    def scope=(scope)
      if scope.nil?
        fail ArgumentError, 'invalid value for "scope", scope cannot be nil.'
      end
      if scope.to_s.length > 3000
        fail ArgumentError, 'invalid value for "scope", the character length must be smaller than or equal to 3000.'
      end
      if scope.to_s.length < 1
        fail ArgumentError, 'invalid value for "scope", the character length must be great than or equal to 1.'
      end
      @scope = scope
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          recipients == o.recipients &&
          scope == o.scope &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [recipients, scope, additional_properties].hash
    end
  end
end
