=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The definition of `ArbitraryRuleResponseDataAttributesStrategy` object.
  class ArbitraryRuleResponseDataAttributesStrategy
    include BaseGenericModel
    # The `strategy` `allocated_by`.
    attr_accessor :allocated_by
    # The `strategy` `allocated_by_filters`.
    attr_accessor :allocated_by_filters
    # The `strategy` `allocated_by_tag_keys`.
    attr_accessor :allocated_by_tag_keys
    # The `strategy` `based_on_costs`.
    attr_accessor :based_on_costs
    # The rule `strategy` `based_on_timeseries`.
    attr_accessor :based_on_timeseries
    # The `strategy` `evaluate_grouped_by_filters`.
    attr_accessor :evaluate_grouped_by_filters
    # The `strategy` `evaluate_grouped_by_tag_keys`.
    attr_accessor :evaluate_grouped_by_tag_keys
    # The `strategy` `granularity`.
    attr_accessor :granularity
    # The `strategy` `method`.
    attr_reader :method

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'allocated_by' => :'allocated_by',
        :'allocated_by_filters' => :'allocated_by_filters',
        :'allocated_by_tag_keys' => :'allocated_by_tag_keys',
        :'based_on_costs' => :'based_on_costs',
        :'based_on_timeseries' => :'based_on_timeseries',
        :'evaluate_grouped_by_filters' => :'evaluate_grouped_by_filters',
        :'evaluate_grouped_by_tag_keys' => :'evaluate_grouped_by_tag_keys',
        :'granularity' => :'granularity',
        :'method' => :'method'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'allocated_by' => :'Array<ArbitraryRuleResponseDataAttributesStrategyAllocatedByItems>',
        :'allocated_by_filters' => :'Array<ArbitraryRuleResponseDataAttributesStrategyAllocatedByFiltersItems>',
        :'allocated_by_tag_keys' => :'Array<String>',
        :'based_on_costs' => :'Array<ArbitraryRuleResponseDataAttributesStrategyBasedOnCostsItems>',
        :'based_on_timeseries' => :'Hash<String, Object>',
        :'evaluate_grouped_by_filters' => :'Array<ArbitraryRuleResponseDataAttributesStrategyEvaluateGroupedByFiltersItems>',
        :'evaluate_grouped_by_tag_keys' => :'Array<String>',
        :'granularity' => :'String',
        :'method' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::ArbitraryRuleResponseDataAttributesStrategy` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'allocated_by')
        if (value = attributes[:'allocated_by']).is_a?(Array)
          self.allocated_by = value
        end
      end

      if attributes.key?(:'allocated_by_filters')
        if (value = attributes[:'allocated_by_filters']).is_a?(Array)
          self.allocated_by_filters = value
        end
      end

      if attributes.key?(:'allocated_by_tag_keys')
        if (value = attributes[:'allocated_by_tag_keys']).is_a?(Array)
          self.allocated_by_tag_keys = value
        end
      end

      if attributes.key?(:'based_on_costs')
        if (value = attributes[:'based_on_costs']).is_a?(Array)
          self.based_on_costs = value
        end
      end

      if attributes.key?(:'based_on_timeseries')
        self.based_on_timeseries = attributes[:'based_on_timeseries']
      end

      if attributes.key?(:'evaluate_grouped_by_filters')
        if (value = attributes[:'evaluate_grouped_by_filters']).is_a?(Array)
          self.evaluate_grouped_by_filters = value
        end
      end

      if attributes.key?(:'evaluate_grouped_by_tag_keys')
        if (value = attributes[:'evaluate_grouped_by_tag_keys']).is_a?(Array)
          self.evaluate_grouped_by_tag_keys = value
        end
      end

      if attributes.key?(:'granularity')
        self.granularity = attributes[:'granularity']
      end

      if attributes.key?(:'method')
        self.method = attributes[:'method']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @method.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param method [Object] Object to be assigned
    # @!visibility private
    def method=(method)
      if method.nil?
        fail ArgumentError, 'invalid value for "method", method cannot be nil.'
      end
      @method = method
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allocated_by == o.allocated_by &&
          allocated_by_filters == o.allocated_by_filters &&
          allocated_by_tag_keys == o.allocated_by_tag_keys &&
          based_on_costs == o.based_on_costs &&
          based_on_timeseries == o.based_on_timeseries &&
          evaluate_grouped_by_filters == o.evaluate_grouped_by_filters &&
          evaluate_grouped_by_tag_keys == o.evaluate_grouped_by_tag_keys &&
          granularity == o.granularity &&
          method == o.method &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [allocated_by, allocated_by_filters, allocated_by_tag_keys, based_on_costs, based_on_timeseries, evaluate_grouped_by_filters, evaluate_grouped_by_tag_keys, granularity, method, additional_properties].hash
    end
  end
end
