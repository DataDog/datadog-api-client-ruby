=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The incident's attributes for an update request.
  class IncidentUpdateAttributes
    include BaseGenericModel

    # Timestamp when customers were no longer impacted by the incident.
    attr_accessor :customer_impact_end

    # A summary of the impact customers experienced during the incident.
    attr_accessor :customer_impact_scope

    # Timestamp when customers began being impacted by the incident.
    attr_accessor :customer_impact_start

    # A flag indicating whether the incident caused customer impact.
    attr_accessor :customer_impacted

    # Timestamp when the incident was detected.
    attr_accessor :detected

    # A condensed view of the user-defined fields for which to update selections.
    attr_accessor :fields

    # Notification handles that will be notified of the incident during update.
    attr_accessor :notification_handles

    # The title of the incident, which summarizes what happened.
    attr_accessor :title

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'customer_impact_end' => :'customer_impact_end',
        :'customer_impact_scope' => :'customer_impact_scope',
        :'customer_impact_start' => :'customer_impact_start',
        :'customer_impacted' => :'customer_impacted',
        :'detected' => :'detected',
        :'fields' => :'fields',
        :'notification_handles' => :'notification_handles',
        :'title' => :'title'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'customer_impact_end' => :'Time',
        :'customer_impact_scope' => :'String',
        :'customer_impact_start' => :'Time',
        :'customer_impacted' => :'Boolean',
        :'detected' => :'Time',
        :'fields' => :'Hash<String, IncidentFieldAttributes>',
        :'notification_handles' => :'Array<IncidentNotificationHandle>',
        :'title' => :'String'
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
        :'customer_impact_end',
        :'customer_impact_start',
        :'detected',
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::IncidentUpdateAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'customer_impact_end')
        self.customer_impact_end = attributes[:'customer_impact_end']
      end

      if attributes.key?(:'customer_impact_scope')
        self.customer_impact_scope = attributes[:'customer_impact_scope']
      end

      if attributes.key?(:'customer_impact_start')
        self.customer_impact_start = attributes[:'customer_impact_start']
      end

      if attributes.key?(:'customer_impacted')
        self.customer_impacted = attributes[:'customer_impacted']
      end

      if attributes.key?(:'detected')
        self.detected = attributes[:'detected']
      end

      if attributes.key?(:'fields')
        self.fields = attributes[:'fields']
      end

      if attributes.key?(:'notification_handles')
        if (value = attributes[:'notification_handles']).is_a?(Array)
          self.notification_handles = value
        end
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          customer_impact_end == o.customer_impact_end &&
          customer_impact_scope == o.customer_impact_scope &&
          customer_impact_start == o.customer_impact_start &&
          customer_impacted == o.customer_impacted &&
          detected == o.detected &&
          fields == o.fields &&
          notification_handles == o.notification_handles &&
          title == o.title
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [customer_impact_end, customer_impact_scope, customer_impact_start, customer_impacted, detected, fields, notification_handles, title].hash
    end
  end
end
