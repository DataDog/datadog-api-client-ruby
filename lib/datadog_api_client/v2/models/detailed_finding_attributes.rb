=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The JSON:API attributes of the detailed finding.
  class DetailedFindingAttributes
    include BaseGenericModel

    # The evaluation of the finding.
    attr_accessor :evaluation

    # The date on which the evaluation for this finding changed (Unix ms).
    attr_reader :evaluation_changed_at

    # The remediation message for this finding.
    attr_accessor :message

    # Information about the mute status of this finding.
    attr_accessor :mute

    # The resource name of this finding.
    attr_accessor :resource

    # The resource configuration for this finding.
    attr_accessor :resource_configuration

    # The date on which the resource was discovered (Unix ms).
    attr_reader :resource_discovery_date

    # The resource type of this finding.
    attr_accessor :resource_type

    # The rule that triggered this finding.
    attr_accessor :rule

    # The status of the finding.
    attr_accessor :status

    # The tags associated with this finding.
    attr_accessor :tags

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'evaluation' => :'evaluation',
        :'evaluation_changed_at' => :'evaluation_changed_at',
        :'message' => :'message',
        :'mute' => :'mute',
        :'resource' => :'resource',
        :'resource_configuration' => :'resource_configuration',
        :'resource_discovery_date' => :'resource_discovery_date',
        :'resource_type' => :'resource_type',
        :'rule' => :'rule',
        :'status' => :'status',
        :'tags' => :'tags'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'evaluation' => :'FindingEvaluation',
        :'evaluation_changed_at' => :'Integer',
        :'message' => :'String',
        :'mute' => :'FindingMute',
        :'resource' => :'String',
        :'resource_configuration' => :'Object',
        :'resource_discovery_date' => :'Integer',
        :'resource_type' => :'String',
        :'rule' => :'FindingRule',
        :'status' => :'FindingStatus',
        :'tags' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::DetailedFindingAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'evaluation')
        self.evaluation = attributes[:'evaluation']
      end

      if attributes.key?(:'evaluation_changed_at')
        self.evaluation_changed_at = attributes[:'evaluation_changed_at']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'mute')
        self.mute = attributes[:'mute']
      end

      if attributes.key?(:'resource')
        self.resource = attributes[:'resource']
      end

      if attributes.key?(:'resource_configuration')
        self.resource_configuration = attributes[:'resource_configuration']
      end

      if attributes.key?(:'resource_discovery_date')
        self.resource_discovery_date = attributes[:'resource_discovery_date']
      end

      if attributes.key?(:'resource_type')
        self.resource_type = attributes[:'resource_type']
      end

      if attributes.key?(:'rule')
        self.rule = attributes[:'rule']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if !@evaluation_changed_at.nil? && @evaluation_changed_at < 1
      return false if !@resource_discovery_date.nil? && @resource_discovery_date < 1
      true
    end

    # Custom attribute writer method with validation
    # @param evaluation_changed_at [Object] Object to be assigned
    # @!visibility private
    def evaluation_changed_at=(evaluation_changed_at)
      if !evaluation_changed_at.nil? && evaluation_changed_at < 1
        fail ArgumentError, 'invalid value for "evaluation_changed_at", must be greater than or equal to 1.'
      end
      @evaluation_changed_at = evaluation_changed_at
    end

    # Custom attribute writer method with validation
    # @param resource_discovery_date [Object] Object to be assigned
    # @!visibility private
    def resource_discovery_date=(resource_discovery_date)
      if !resource_discovery_date.nil? && resource_discovery_date < 1
        fail ArgumentError, 'invalid value for "resource_discovery_date", must be greater than or equal to 1.'
      end
      @resource_discovery_date = resource_discovery_date
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          evaluation == o.evaluation &&
          evaluation_changed_at == o.evaluation_changed_at &&
          message == o.message &&
          mute == o.mute &&
          resource == o.resource &&
          resource_configuration == o.resource_configuration &&
          resource_discovery_date == o.resource_discovery_date &&
          resource_type == o.resource_type &&
          rule == o.rule &&
          status == o.status &&
          tags == o.tags
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [evaluation, evaluation_changed_at, message, mute, resource, resource_configuration, resource_discovery_date, resource_type, rule, status, tags].hash
    end
  end
end
