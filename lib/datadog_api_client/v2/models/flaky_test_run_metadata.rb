=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Metadata about the latest failed test run of the flaky test.
  class FlakyTestRunMetadata
    include BaseGenericModel

    # The duration of the test run in milliseconds.
    attr_accessor :duration_ms

    # The error message from the test failure.
    attr_accessor :error_message

    # The stack trace from the test failure.
    attr_accessor :error_stack

    # The line number where the test ends in the source file.
    attr_accessor :source_end

    # The source file where the test is defined.
    attr_accessor :source_file

    # The line number where the test starts in the source file.
    attr_accessor :source_start

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'duration_ms' => :'duration_ms',
        :'error_message' => :'error_message',
        :'error_stack' => :'error_stack',
        :'source_end' => :'source_end',
        :'source_file' => :'source_file',
        :'source_start' => :'source_start'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'duration_ms' => :'Integer',
        :'error_message' => :'String',
        :'error_stack' => :'String',
        :'source_end' => :'Integer',
        :'source_file' => :'String',
        :'source_start' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
        :'duration_ms',
        :'error_message',
        :'error_stack',
        :'source_end',
        :'source_file',
        :'source_start',
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::FlakyTestRunMetadata` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'duration_ms')
        self.duration_ms = attributes[:'duration_ms']
      end

      if attributes.key?(:'error_message')
        self.error_message = attributes[:'error_message']
      end

      if attributes.key?(:'error_stack')
        self.error_stack = attributes[:'error_stack']
      end

      if attributes.key?(:'source_end')
        self.source_end = attributes[:'source_end']
      end

      if attributes.key?(:'source_file')
        self.source_file = attributes[:'source_file']
      end

      if attributes.key?(:'source_start')
        self.source_start = attributes[:'source_start']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          duration_ms == o.duration_ms &&
          error_message == o.error_message &&
          error_stack == o.error_stack &&
          source_end == o.source_end &&
          source_file == o.source_file &&
          source_start == o.source_start &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [duration_ms, error_message, error_stack, source_end, source_file, source_start, additional_properties].hash
    end
  end
end
