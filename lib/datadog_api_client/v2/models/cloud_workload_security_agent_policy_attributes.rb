=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # A Cloud Workload Security Agent policy returned by the API
  class CloudWorkloadSecurityAgentPolicyAttributes
    include BaseGenericModel
    # The number of rules with the blocking feature in this policy
    attr_reader :blocking_rules_count
    # Whether the policy is managed by Datadog
    attr_accessor :datadog_managed
    # The description of the policy
    attr_accessor :description
    # The number of rules that are disabled in this policy
    attr_reader :disabled_rules_count
    # Whether the Agent policy is enabled
    attr_accessor :enabled
    # The host tags defining where this policy is deployed
    attr_accessor :host_tags
    # The host tags defining where this policy is deployed, the inner values are linked with AND, the outer values are linked with OR
    attr_accessor :host_tags_lists
    # The number of rules in the monitoring state in this policy
    attr_reader :monitoring_rules_count
    # The name of the policy
    attr_accessor :name
    # Whether the policy is pinned
    attr_accessor :pinned
    # The version of the policy
    attr_accessor :policy_version
    # The priority of the policy
    attr_accessor :priority
    # The number of rules in this policy
    attr_reader :rule_count
    # Timestamp in milliseconds when the policy was last updated
    attr_accessor :update_date
    # When the policy was last updated, timestamp in milliseconds
    attr_accessor :updated_at
    # The attributes of the user who last updated the policy
    attr_accessor :updater
    # The versions of the policy
    attr_accessor :versions

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'blocking_rules_count' => :'blockingRulesCount',
        :'datadog_managed' => :'datadogManaged',
        :'description' => :'description',
        :'disabled_rules_count' => :'disabledRulesCount',
        :'enabled' => :'enabled',
        :'host_tags' => :'hostTags',
        :'host_tags_lists' => :'hostTagsLists',
        :'monitoring_rules_count' => :'monitoringRulesCount',
        :'name' => :'name',
        :'pinned' => :'pinned',
        :'policy_version' => :'policyVersion',
        :'priority' => :'priority',
        :'rule_count' => :'ruleCount',
        :'update_date' => :'updateDate',
        :'updated_at' => :'updatedAt',
        :'updater' => :'updater',
        :'versions' => :'versions'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'blocking_rules_count' => :'Integer',
        :'datadog_managed' => :'Boolean',
        :'description' => :'String',
        :'disabled_rules_count' => :'Integer',
        :'enabled' => :'Boolean',
        :'host_tags' => :'Array<String>',
        :'host_tags_lists' => :'Array<Array<String>>',
        :'monitoring_rules_count' => :'Integer',
        :'name' => :'String',
        :'pinned' => :'Boolean',
        :'policy_version' => :'String',
        :'priority' => :'Integer',
        :'rule_count' => :'Integer',
        :'update_date' => :'Integer',
        :'updated_at' => :'Integer',
        :'updater' => :'CloudWorkloadSecurityAgentPolicyUpdaterAttributes',
        :'versions' => :'Array<CloudWorkloadSecurityAgentPolicyVersion>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::CloudWorkloadSecurityAgentPolicyAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'blocking_rules_count')
        self.blocking_rules_count = attributes[:'blocking_rules_count']
      end

      if attributes.key?(:'datadog_managed')
        self.datadog_managed = attributes[:'datadog_managed']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'disabled_rules_count')
        self.disabled_rules_count = attributes[:'disabled_rules_count']
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'host_tags')
        if (value = attributes[:'host_tags']).is_a?(Array)
          self.host_tags = value
        end
      end

      if attributes.key?(:'host_tags_lists')
        if (value = attributes[:'host_tags_lists']).is_a?(Array)
          self.host_tags_lists = value
        end
      end

      if attributes.key?(:'monitoring_rules_count')
        self.monitoring_rules_count = attributes[:'monitoring_rules_count']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'pinned')
        self.pinned = attributes[:'pinned']
      end

      if attributes.key?(:'policy_version')
        self.policy_version = attributes[:'policy_version']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'rule_count')
        self.rule_count = attributes[:'rule_count']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'updater')
        self.updater = attributes[:'updater']
      end

      if attributes.key?(:'versions')
        if (value = attributes[:'versions']).is_a?(Array)
          self.versions = value
        end
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if !@blocking_rules_count.nil? && @blocking_rules_count > 2147483647
      return false if !@disabled_rules_count.nil? && @disabled_rules_count > 2147483647
      return false if !@monitoring_rules_count.nil? && @monitoring_rules_count > 2147483647
      return false if !@rule_count.nil? && @rule_count > 2147483647
      true
    end

    # Custom attribute writer method with validation
    # @param blocking_rules_count [Object] Object to be assigned
    # @!visibility private
    def blocking_rules_count=(blocking_rules_count)
      if !blocking_rules_count.nil? && blocking_rules_count > 2147483647
        fail ArgumentError, 'invalid value for "blocking_rules_count", must be smaller than or equal to 2147483647.'
      end
      @blocking_rules_count = blocking_rules_count
    end

    # Custom attribute writer method with validation
    # @param disabled_rules_count [Object] Object to be assigned
    # @!visibility private
    def disabled_rules_count=(disabled_rules_count)
      if !disabled_rules_count.nil? && disabled_rules_count > 2147483647
        fail ArgumentError, 'invalid value for "disabled_rules_count", must be smaller than or equal to 2147483647.'
      end
      @disabled_rules_count = disabled_rules_count
    end

    # Custom attribute writer method with validation
    # @param monitoring_rules_count [Object] Object to be assigned
    # @!visibility private
    def monitoring_rules_count=(monitoring_rules_count)
      if !monitoring_rules_count.nil? && monitoring_rules_count > 2147483647
        fail ArgumentError, 'invalid value for "monitoring_rules_count", must be smaller than or equal to 2147483647.'
      end
      @monitoring_rules_count = monitoring_rules_count
    end

    # Custom attribute writer method with validation
    # @param rule_count [Object] Object to be assigned
    # @!visibility private
    def rule_count=(rule_count)
      if !rule_count.nil? && rule_count > 2147483647
        fail ArgumentError, 'invalid value for "rule_count", must be smaller than or equal to 2147483647.'
      end
      @rule_count = rule_count
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          blocking_rules_count == o.blocking_rules_count &&
          datadog_managed == o.datadog_managed &&
          description == o.description &&
          disabled_rules_count == o.disabled_rules_count &&
          enabled == o.enabled &&
          host_tags == o.host_tags &&
          host_tags_lists == o.host_tags_lists &&
          monitoring_rules_count == o.monitoring_rules_count &&
          name == o.name &&
          pinned == o.pinned &&
          policy_version == o.policy_version &&
          priority == o.priority &&
          rule_count == o.rule_count &&
          update_date == o.update_date &&
          updated_at == o.updated_at &&
          updater == o.updater &&
          versions == o.versions &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [blocking_rules_count, datadog_managed, description, disabled_rules_count, enabled, host_tags, host_tags_lists, monitoring_rules_count, name, pinned, policy_version, priority, rule_count, update_date, updated_at, updater, versions, additional_properties].hash
    end
  end
end
