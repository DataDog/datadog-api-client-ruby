=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The definition of the `AzureTenant` object.
  class AzureTenant
    include BaseGenericModel
    # The Client ID, also known as the Application ID in Azure, is a unique identifier for an application. It's used to identify the application during the authentication process. Your Application (client) ID is listed in the application's overview page. You can navigate to your application via the Azure Directory.
    attr_reader :app_client_id
    # The Client Secret is a confidential piece of information known only to the application and Azure AD. It's used to prove the application's identity. Your Client Secret is available from the applicationâ€™s secrets page. You can navigate to your application via the Azure Directory.
    attr_reader :client_secret
    # If provided, the custom scope to be requested from Microsoft when acquiring an OAuth 2 access token. This custom scope is used only in conjunction with the HTTP action. A resource's scope is constructed by using the identifier URI for the resource and .default, separated by a forward slash (/) as follows:{identifierURI}/.default.
    attr_accessor :custom_scopes
    # The Tenant ID, also known as the Directory ID in Azure, is a unique identifier that represents an Azure AD instance. Your Tenant ID (Directory ID) is listed in your Active Directory overview page under the 'Tenant information' section.
    attr_reader :tenant_id
    # The definition of the `AzureTenant` object.
    attr_reader :type

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'app_client_id' => :'app_client_id',
        :'client_secret' => :'client_secret',
        :'custom_scopes' => :'custom_scopes',
        :'tenant_id' => :'tenant_id',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'app_client_id' => :'String',
        :'client_secret' => :'String',
        :'custom_scopes' => :'String',
        :'tenant_id' => :'String',
        :'type' => :'AzureTenantType'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::AzureTenant` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'app_client_id')
        self.app_client_id = attributes[:'app_client_id']
      end

      if attributes.key?(:'client_secret')
        self.client_secret = attributes[:'client_secret']
      end

      if attributes.key?(:'custom_scopes')
        self.custom_scopes = attributes[:'custom_scopes']
      end

      if attributes.key?(:'tenant_id')
        self.tenant_id = attributes[:'tenant_id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @app_client_id.nil?
      return false if @client_secret.nil?
      return false if @tenant_id.nil?
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param app_client_id [Object] Object to be assigned
    # @!visibility private
    def app_client_id=(app_client_id)
      if app_client_id.nil?
        fail ArgumentError, 'invalid value for "app_client_id", app_client_id cannot be nil.'
      end
      @app_client_id = app_client_id
    end

    # Custom attribute writer method with validation
    # @param client_secret [Object] Object to be assigned
    # @!visibility private
    def client_secret=(client_secret)
      if client_secret.nil?
        fail ArgumentError, 'invalid value for "client_secret", client_secret cannot be nil.'
      end
      @client_secret = client_secret
    end

    # Custom attribute writer method with validation
    # @param tenant_id [Object] Object to be assigned
    # @!visibility private
    def tenant_id=(tenant_id)
      if tenant_id.nil?
        fail ArgumentError, 'invalid value for "tenant_id", tenant_id cannot be nil.'
      end
      @tenant_id = tenant_id
    end

    # Custom attribute writer method with validation
    # @param type [Object] Object to be assigned
    # @!visibility private
    def type=(type)
      if type.nil?
        fail ArgumentError, 'invalid value for "type", type cannot be nil.'
      end
      @type = type
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          app_client_id == o.app_client_id &&
          client_secret == o.client_secret &&
          custom_scopes == o.custom_scopes &&
          tenant_id == o.tenant_id &&
          type == o.type &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [app_client_id, client_secret, custom_scopes, tenant_id, type, additional_properties].hash
    end
  end
end
