=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # JSON object containing all log attributes and their associated values.
  class LogAttributes
    include BaseGenericModel

    # JSON object of attributes from your log.
    attr_accessor :attributes

    # Name of the machine from where the logs are being sent.
    attr_accessor :host

    # The message [reserved attribute](https://docs.datadoghq.com/logs/log_collection/#reserved-attributes)
    # of your log. By default, Datadog ingests the value of the message attribute as the body of the log entry.
    # That value is then highlighted and displayed in the Logstream, where it is indexed for full text search.
    attr_accessor :message

    # The name of the application or service generating the log events.
    # It is used to switch from Logs to APM, so make sure you define the same
    # value when you use both products.
    attr_accessor :service

    # Status of the message associated with your log.
    attr_accessor :status

    # Array of tags associated with your log.
    attr_accessor :tags

    # Timestamp of your log.
    attr_accessor :timestamp

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'attributes' => :'attributes',
        :'host' => :'host',
        :'message' => :'message',
        :'service' => :'service',
        :'status' => :'status',
        :'tags' => :'tags',
        :'timestamp' => :'timestamp'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'attributes' => :'Hash<String, Object>',
        :'host' => :'String',
        :'message' => :'String',
        :'service' => :'String',
        :'status' => :'String',
        :'tags' => :'Array<String>',
        :'timestamp' => :'Time'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::LogAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'attributes')
        self.attributes = attributes[:'attributes']
      end

      if attributes.key?(:'host')
        self.host = attributes[:'host']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'service')
        self.service = attributes[:'service']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          attributes == o.attributes &&
          host == o.host &&
          message == o.message &&
          service == o.service &&
          status == o.status &&
          tags == o.tags &&
          timestamp == o.timestamp
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [attributes, host, message, service, status, tags, timestamp].hash
    end
  end
end
