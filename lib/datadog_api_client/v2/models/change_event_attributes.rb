=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Change event attributes.
  class ChangeEventAttributes
    include BaseGenericModel

    # Aggregation key of the event.
    attr_accessor :aggregation_key

    # The entity that made the change.
    attr_accessor :author

    # JSON object of change metadata.
    attr_accessor :change_metadata

    # A uniquely identified resource.
    attr_accessor :changed_resource

    # JSON object of event system attributes.
    attr_accessor :evt

    # A list of resources impacted by this change.
    attr_accessor :impacted_resources

    # The new state of the changed resource.
    attr_accessor :new_value

    # The previous state of the changed resource.
    attr_accessor :prev_value

    # Service that triggered the event.
    attr_accessor :service

    # POSIX timestamp of the event.
    attr_accessor :timestamp

    # The title of the event.
    attr_accessor :title

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'aggregation_key' => :'aggregation_key',
        :'author' => :'author',
        :'change_metadata' => :'change_metadata',
        :'changed_resource' => :'changed_resource',
        :'evt' => :'evt',
        :'impacted_resources' => :'impacted_resources',
        :'new_value' => :'new_value',
        :'prev_value' => :'prev_value',
        :'service' => :'service',
        :'timestamp' => :'timestamp',
        :'title' => :'title'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'aggregation_key' => :'String',
        :'author' => :'ChangeEventAttributesAuthor',
        :'change_metadata' => :'Object',
        :'changed_resource' => :'ChangeEventAttributesChangedResource',
        :'evt' => :'EventSystemAttributes',
        :'impacted_resources' => :'Array<ChangeEventAttributesImpactedResourcesItem>',
        :'new_value' => :'Object',
        :'prev_value' => :'Object',
        :'service' => :'String',
        :'timestamp' => :'Integer',
        :'title' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::ChangeEventAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'aggregation_key')
        self.aggregation_key = attributes[:'aggregation_key']
      end

      if attributes.key?(:'author')
        self.author = attributes[:'author']
      end

      if attributes.key?(:'change_metadata')
        self.change_metadata = attributes[:'change_metadata']
      end

      if attributes.key?(:'changed_resource')
        self.changed_resource = attributes[:'changed_resource']
      end

      if attributes.key?(:'evt')
        self.evt = attributes[:'evt']
      end

      if attributes.key?(:'impacted_resources')
        if (value = attributes[:'impacted_resources']).is_a?(Array)
          self.impacted_resources = value
        end
      end

      if attributes.key?(:'new_value')
        self.new_value = attributes[:'new_value']
      end

      if attributes.key?(:'prev_value')
        self.prev_value = attributes[:'prev_value']
      end

      if attributes.key?(:'service')
        self.service = attributes[:'service']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aggregation_key == o.aggregation_key &&
          author == o.author &&
          change_metadata == o.change_metadata &&
          changed_resource == o.changed_resource &&
          evt == o.evt &&
          impacted_resources == o.impacted_resources &&
          new_value == o.new_value &&
          prev_value == o.prev_value &&
          service == o.service &&
          timestamp == o.timestamp &&
          title == o.title &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [aggregation_key, author, change_metadata, changed_resource, evt, impacted_resources, new_value, prev_value, service, timestamp, title, additional_properties].hash
    end
  end
end
