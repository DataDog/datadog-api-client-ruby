=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # A single configuration file operation to perform on the target hosts.
  class FleetDeploymentOperation
    include BaseGenericModel

    # Type of file operation to perform on the target configuration file.
    # - `merge-patch`: Merges the provided patch data with the existing configuration file.
    #   Creates the file if it doesn't exist.
    # - `delete`: Removes the specified configuration file from the target hosts.
    attr_reader :file_op

    # Absolute path to the target configuration file on the host.
    attr_reader :file_path

    # Patch data in JSON format to apply to the configuration file.
    # When using `merge-patch`, this object is merged with the existing configuration,
    # allowing you to add, update, or override specific fields without replacing the entire file.
    # The structure must match the target configuration file format (for example, YAML structure for Datadog Agent config).
    # Not applicable when using the `delete` operation.
    attr_accessor :patch

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'file_op' => :'file_op',
        :'file_path' => :'file_path',
        :'patch' => :'patch'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'file_op' => :'FleetDeploymentFileOp',
        :'file_path' => :'String',
        :'patch' => :'Hash<String, Object>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::FleetDeploymentOperation` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'file_op')
        self.file_op = attributes[:'file_op']
      end

      if attributes.key?(:'file_path')
        self.file_path = attributes[:'file_path']
      end

      if attributes.key?(:'patch')
        self.patch = attributes[:'patch']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @file_op.nil?
      return false if @file_path.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param file_op [Object] Object to be assigned
    # @!visibility private
    def file_op=(file_op)
      if file_op.nil?
        fail ArgumentError, 'invalid value for "file_op", file_op cannot be nil.'
      end
      @file_op = file_op
    end

    # Custom attribute writer method with validation
    # @param file_path [Object] Object to be assigned
    # @!visibility private
    def file_path=(file_path)
      if file_path.nil?
        fail ArgumentError, 'invalid value for "file_path", file_path cannot be nil.'
      end
      @file_path = file_path
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          file_op == o.file_op &&
          file_path == o.file_path &&
          patch == o.patch &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [file_op, file_path, patch, additional_properties].hash
    end
  end
end
