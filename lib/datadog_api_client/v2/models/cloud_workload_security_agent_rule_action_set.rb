=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The set action applied on the scope matching the rule
  class CloudWorkloadSecurityAgentRuleActionSet
    include BaseGenericModel

    # Whether the value should be appended to the field.
    attr_accessor :append

    # The default value of the set action
    attr_accessor :default_value

    # The expression of the set action.
    attr_accessor :expression

    # The field of the set action
    attr_accessor :field

    # Whether the value should be inherited.
    attr_accessor :inherited

    # The name of the set action
    attr_accessor :name

    # The scope of the set action.
    attr_accessor :scope

    # The size of the set action.
    attr_accessor :size

    # The time to live of the set action.
    attr_accessor :ttl

    # The value of the set action
    attr_accessor :value

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'append' => :'append',
        :'default_value' => :'default_value',
        :'expression' => :'expression',
        :'field' => :'field',
        :'inherited' => :'inherited',
        :'name' => :'name',
        :'scope' => :'scope',
        :'size' => :'size',
        :'ttl' => :'ttl',
        :'value' => :'value'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'append' => :'Boolean',
        :'default_value' => :'String',
        :'expression' => :'String',
        :'field' => :'String',
        :'inherited' => :'Boolean',
        :'name' => :'String',
        :'scope' => :'String',
        :'size' => :'Integer',
        :'ttl' => :'Integer',
        :'value' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::CloudWorkloadSecurityAgentRuleActionSet` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'append')
        self.append = attributes[:'append']
      end

      if attributes.key?(:'default_value')
        self.default_value = attributes[:'default_value']
      end

      if attributes.key?(:'expression')
        self.expression = attributes[:'expression']
      end

      if attributes.key?(:'field')
        self.field = attributes[:'field']
      end

      if attributes.key?(:'inherited')
        self.inherited = attributes[:'inherited']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'scope')
        self.scope = attributes[:'scope']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'ttl')
        self.ttl = attributes[:'ttl']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          append == o.append &&
          default_value == o.default_value &&
          expression == o.expression &&
          field == o.field &&
          inherited == o.inherited &&
          name == o.name &&
          scope == o.scope &&
          size == o.size &&
          ttl == o.ttl &&
          value == o.value &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [append, default_value, expression, field, inherited, name, scope, size, ttl, value, additional_properties].hash
    end
  end
end
