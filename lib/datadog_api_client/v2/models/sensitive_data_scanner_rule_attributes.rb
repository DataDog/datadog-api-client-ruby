=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Attributes of the Sensitive Data Scanner rule.
  class SensitiveDataScannerRuleAttributes
    include BaseGenericModel

    # Description of the rule.
    attr_accessor :description

    # Attributes excluded from the scan. If namespaces is provided, it has to be a sub-path of the namespaces array.
    attr_accessor :excluded_namespaces

    # Object defining a set of keywords and a number of characters that help reduce noise.
    # You can provide a list of keywords you would like to check within a defined proximity of the matching pattern.
    # If any of the keywords are found within the proximity check, the match is kept.
    # If none are found, the match is discarded.
    attr_accessor :included_keyword_configuration

    # Whether or not the rule is enabled.
    attr_accessor :is_enabled

    # Name of the rule.
    attr_accessor :name

    # Attributes included in the scan. If namespaces is empty or missing, all attributes except excluded_namespaces are scanned.
    # If both are missing the whole event is scanned.
    attr_accessor :namespaces

    # Not included if there is a relationship to a standard pattern.
    attr_accessor :pattern

    # Integer from 1 (high) to 5 (low) indicating rule issue severity.
    attr_reader :priority

    # List of tags.
    attr_accessor :tags

    # Object describing how the scanned event will be replaced.
    attr_accessor :text_replacement

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'description' => :'description',
        :'excluded_namespaces' => :'excluded_namespaces',
        :'included_keyword_configuration' => :'included_keyword_configuration',
        :'is_enabled' => :'is_enabled',
        :'name' => :'name',
        :'namespaces' => :'namespaces',
        :'pattern' => :'pattern',
        :'priority' => :'priority',
        :'tags' => :'tags',
        :'text_replacement' => :'text_replacement'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'description' => :'String',
        :'excluded_namespaces' => :'Array<String>',
        :'included_keyword_configuration' => :'SensitiveDataScannerIncludedKeywordConfiguration',
        :'is_enabled' => :'Boolean',
        :'name' => :'String',
        :'namespaces' => :'Array<String>',
        :'pattern' => :'String',
        :'priority' => :'Integer',
        :'tags' => :'Array<String>',
        :'text_replacement' => :'SensitiveDataScannerTextReplacement'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::SensitiveDataScannerRuleAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'excluded_namespaces')
        if (value = attributes[:'excluded_namespaces']).is_a?(Array)
          self.excluded_namespaces = value
        end
      end

      if attributes.key?(:'included_keyword_configuration')
        self.included_keyword_configuration = attributes[:'included_keyword_configuration']
      end

      if attributes.key?(:'is_enabled')
        self.is_enabled = attributes[:'is_enabled']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'namespaces')
        if (value = attributes[:'namespaces']).is_a?(Array)
          self.namespaces = value
        end
      end

      if attributes.key?(:'pattern')
        self.pattern = attributes[:'pattern']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'text_replacement')
        self.text_replacement = attributes[:'text_replacement']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if !@priority.nil? && @priority > 5
      return false if !@priority.nil? && @priority < 1
      true
    end

    # Custom attribute writer method with validation
    # @param priority [Object] Object to be assigned
    # @!visibility private
    def priority=(priority)
      if !priority.nil? && priority > 5
        fail ArgumentError, 'invalid value for "priority", must be smaller than or equal to 5.'
      end
      if !priority.nil? && priority < 1
        fail ArgumentError, 'invalid value for "priority", must be greater than or equal to 1.'
      end
      @priority = priority
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          description == o.description &&
          excluded_namespaces == o.excluded_namespaces &&
          included_keyword_configuration == o.included_keyword_configuration &&
          is_enabled == o.is_enabled &&
          name == o.name &&
          namespaces == o.namespaces &&
          pattern == o.pattern &&
          priority == o.priority &&
          tags == o.tags &&
          text_replacement == o.text_replacement
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [description, excluded_namespaces, included_keyword_configuration, is_enabled, name, namespaces, pattern, priority, tags, text_replacement].hash
    end
  end
end
