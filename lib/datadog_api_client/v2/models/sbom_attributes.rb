=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The JSON:API attributes of the SBOM.
  class SBOMAttributes
    include BaseGenericModel
    # Specifies the format of the BOM. This helps to identify the file as CycloneDX since BOM do not have a filename convention nor does JSON schema support namespaces. This value MUST be `CycloneDX`.
    attr_reader :bom_format
    # A list of software and hardware components.
    attr_reader :components
    # List of dependencies between components of the SBOM.
    attr_reader :dependencies
    # Provides additional information about a BOM.
    attr_reader :metadata
    # Every BOM generated has a unique serial number, even if the contents of the BOM have not changed overt time. The serial number follows [RFC-4122](https://datatracker.ietf.org/doc/html/rfc4122)
    attr_reader :serial_number
    # The version of the CycloneDX specification a BOM conforms to.
    attr_reader :spec_version
    # It increments when a BOM is modified. The default value is 1.
    attr_reader :version

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'bom_format' => :'bomFormat',
        :'components' => :'components',
        :'dependencies' => :'dependencies',
        :'metadata' => :'metadata',
        :'serial_number' => :'serialNumber',
        :'spec_version' => :'specVersion',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'bom_format' => :'String',
        :'components' => :'Array<SBOMComponent>',
        :'dependencies' => :'Array<SBOMComponentDependency>',
        :'metadata' => :'SBOMMetadata',
        :'serial_number' => :'String',
        :'spec_version' => :'SpecVersion',
        :'version' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::SBOMAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'bom_format')
        self.bom_format = attributes[:'bom_format']
      end

      if attributes.key?(:'components')
        if (value = attributes[:'components']).is_a?(Array)
          self.components = value
        end
      end

      if attributes.key?(:'dependencies')
        if (value = attributes[:'dependencies']).is_a?(Array)
          self.dependencies = value
        end
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'serial_number')
        self.serial_number = attributes[:'serial_number']
      end

      if attributes.key?(:'spec_version')
        self.spec_version = attributes[:'spec_version']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @bom_format.nil?
      return false if @components.nil?
      return false if @dependencies.nil?
      return false if @metadata.nil?
      return false if @serial_number.nil?
      return false if @spec_version.nil?
      return false if @version.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param bom_format [Object] Object to be assigned
    # @!visibility private
    def bom_format=(bom_format)
      if bom_format.nil?
        fail ArgumentError, 'invalid value for "bom_format", bom_format cannot be nil.'
      end
      @bom_format = bom_format
    end

    # Custom attribute writer method with validation
    # @param components [Object] Object to be assigned
    # @!visibility private
    def components=(components)
      if components.nil?
        fail ArgumentError, 'invalid value for "components", components cannot be nil.'
      end
      @components = components
    end

    # Custom attribute writer method with validation
    # @param dependencies [Object] Object to be assigned
    # @!visibility private
    def dependencies=(dependencies)
      if dependencies.nil?
        fail ArgumentError, 'invalid value for "dependencies", dependencies cannot be nil.'
      end
      @dependencies = dependencies
    end

    # Custom attribute writer method with validation
    # @param metadata [Object] Object to be assigned
    # @!visibility private
    def metadata=(metadata)
      if metadata.nil?
        fail ArgumentError, 'invalid value for "metadata", metadata cannot be nil.'
      end
      @metadata = metadata
    end

    # Custom attribute writer method with validation
    # @param serial_number [Object] Object to be assigned
    # @!visibility private
    def serial_number=(serial_number)
      if serial_number.nil?
        fail ArgumentError, 'invalid value for "serial_number", serial_number cannot be nil.'
      end
      @serial_number = serial_number
    end

    # Custom attribute writer method with validation
    # @param spec_version [Object] Object to be assigned
    # @!visibility private
    def spec_version=(spec_version)
      if spec_version.nil?
        fail ArgumentError, 'invalid value for "spec_version", spec_version cannot be nil.'
      end
      @spec_version = spec_version
    end

    # Custom attribute writer method with validation
    # @param version [Object] Object to be assigned
    # @!visibility private
    def version=(version)
      if version.nil?
        fail ArgumentError, 'invalid value for "version", version cannot be nil.'
      end
      @version = version
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bom_format == o.bom_format &&
          components == o.components &&
          dependencies == o.dependencies &&
          metadata == o.metadata &&
          serial_number == o.serial_number &&
          spec_version == o.spec_version &&
          version == o.version &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [bom_format, components, dependencies, metadata, serial_number, spec_version, version, additional_properties].hash
    end
  end
end
