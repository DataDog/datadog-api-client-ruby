=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The definition of the upload attributes object.
  class CreateUploadRequestDataAttributes
    include BaseGenericModel

    # The headers of the CSV file to upload to be used as the schema fields, provided in the same order as the columns in the CSV file.
    attr_reader :headers

    # The number of parts in the upload.
    attr_reader :part_count

    # The size of each part in the upload in bytes. For multipart uploads (part_count > 1), all parts except the last one must be at least 5,000,000 bytes. For single-part uploads (part_count = 1), any size is allowed.
    attr_reader :part_size

    # The name of the reference table.
    attr_reader :table_name

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'headers' => :'headers',
        :'part_count' => :'part_count',
        :'part_size' => :'part_size',
        :'table_name' => :'table_name'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'headers' => :'Array<String>',
        :'part_count' => :'Integer',
        :'part_size' => :'Integer',
        :'table_name' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::CreateUploadRequestDataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'headers')
        if (value = attributes[:'headers']).is_a?(Array)
          self.headers = value
        end
      end

      if attributes.key?(:'part_count')
        self.part_count = attributes[:'part_count']
      end

      if attributes.key?(:'part_size')
        self.part_size = attributes[:'part_size']
      end

      if attributes.key?(:'table_name')
        self.table_name = attributes[:'table_name']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @headers.nil?
      return false if @part_count.nil?
      return false if @part_count > 20
      return false if @part_size.nil?
      return false if @table_name.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param headers [Object] Object to be assigned
    # @!visibility private
    def headers=(headers)
      if headers.nil?
        fail ArgumentError, 'invalid value for "headers", headers cannot be nil.'
      end
      @headers = headers
    end

    # Custom attribute writer method with validation
    # @param part_count [Object] Object to be assigned
    # @!visibility private
    def part_count=(part_count)
      if part_count.nil?
        fail ArgumentError, 'invalid value for "part_count", part_count cannot be nil.'
      end
      if part_count > 20
        fail ArgumentError, 'invalid value for "part_count", must be smaller than or equal to 20.'
      end
      @part_count = part_count
    end

    # Custom attribute writer method with validation
    # @param part_size [Object] Object to be assigned
    # @!visibility private
    def part_size=(part_size)
      if part_size.nil?
        fail ArgumentError, 'invalid value for "part_size", part_size cannot be nil.'
      end
      @part_size = part_size
    end

    # Custom attribute writer method with validation
    # @param table_name [Object] Object to be assigned
    # @!visibility private
    def table_name=(table_name)
      if table_name.nil?
        fail ArgumentError, 'invalid value for "table_name", table_name cannot be nil.'
      end
      @table_name = table_name
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          headers == o.headers &&
          part_count == o.part_count &&
          part_size == o.part_size &&
          table_name == o.table_name &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [headers, part_count, part_size, table_name, additional_properties].hash
    end
  end
end
