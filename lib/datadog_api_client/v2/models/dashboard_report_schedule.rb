=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Report schedule-specific configuration that defines when and how often a report is sent.
  class DashboardReportSchedule
    include BaseGenericModel

    # Whether the object has unparsed attributes
    # @!visibility private
    attr_accessor :_unparsed

    # Enables or disables automatic report sending as configured in the report's schedule. If set to `false`, schedule is paused and reports are not sent.
    attr_accessor :active

    # Frequency with which to send the report.
    attr_accessor :frequency

    # ISO8601 formatted time (HH:MM) to send the report, using the time zone specified in the `timezone` field.
    attr_accessor :repeat_at

    # Defines which day of the month to send the monthly report. If the frequency field uses months (for example, `1mo`), this field is required. If the frequency field does not use months (for example `1d`, `1w`), then this field must be `null` (if provided). If this field is not provided in an update request, and the update request changes the frequency to use days or weeks (for example, `1d`, `1w`), then this field is automatically set to `null`. This field is mutually exclusive with `repeat_on_day_of_week`, and cannot be defined in the same request that includes a non-null value for `repeat_on_day_of_week`.
    attr_accessor :repeat_on_day_of_month

    # Defines which day of the week to send the weekly report. If the frequency field uses weeks (such as `1w`), this field is required and defines which day of the week to send the report. If the frequency field does not use weeks (for example, `1d`, `1mo`), then this field must be `null` (if provided). If this field is not provided in an update request, and the update request changes the frequency to use days or months (for example, `1d`, `1mo`), then this field is automatically set to `null`.  This field is mutually exclusive with `repeat_on_day_of_month` and cannot be defined in the same request that includes a non-null value for `repeat_on_day_of_month`.
    attr_accessor :repeat_on_day_of_week

    # Time zone to use for repeat_at. Must be a valid Time Zone Database (https://www.iana.org/time-zones) name
    attr_accessor :timezone

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'active' => :'active',
        :'frequency' => :'frequency',
        :'repeat_at' => :'repeat_at',
        :'repeat_on_day_of_month' => :'repeat_on_day_of_month',
        :'repeat_on_day_of_week' => :'repeat_on_day_of_week',
        :'timezone' => :'timezone'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'active' => :'Boolean',
        :'frequency' => :'DashboardReportScheduleFrequency',
        :'repeat_at' => :'DashboardReportScheduleRepeatAt',
        :'repeat_on_day_of_month' => :'DashboardReportScheduleRepeatOnDayOfMonth',
        :'repeat_on_day_of_week' => :'DashboardReportScheduleRepeatOnDayOfWeek',
        :'timezone' => :'String'
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
        :'repeat_on_day_of_month',
        :'repeat_on_day_of_week',
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::DashboardReportSchedule` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V2::DashboardReportSchedule`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'frequency')
        self.frequency = attributes[:'frequency']
      end

      if attributes.key?(:'repeat_at')
        self.repeat_at = attributes[:'repeat_at']
      end

      if attributes.key?(:'repeat_on_day_of_month')
        self.repeat_on_day_of_month = attributes[:'repeat_on_day_of_month']
      end

      if attributes.key?(:'repeat_on_day_of_week')
        self.repeat_on_day_of_week = attributes[:'repeat_on_day_of_week']
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active == o.active &&
          frequency == o.frequency &&
          repeat_at == o.repeat_at &&
          repeat_on_day_of_month == o.repeat_on_day_of_month &&
          repeat_on_day_of_week == o.repeat_on_day_of_week &&
          timezone == o.timezone
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [active, frequency, repeat_at, repeat_on_day_of_month, repeat_on_day_of_week, timezone].hash
    end
  end
end
