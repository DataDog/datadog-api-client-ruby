=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Attributes of a notification rule to be created.
  class SecurityMonitoringNotificationRuleCreateAttributes
    include BaseGenericModel

    # Whether the notification rule is enabled.
    attr_reader :enabled

    # The name of the notification rule.
    attr_reader :name

    # Selectors describing the notification rule.
    attr_reader :selectors

    # Set of targets to notify.
    attr_reader :targets

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'enabled' => :'enabled',
        :'name' => :'name',
        :'selectors' => :'selectors',
        :'targets' => :'targets'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'enabled' => :'Boolean',
        :'name' => :'String',
        :'selectors' => :'SecurityMonitoringNotificationRuleSelectors',
        :'targets' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::SecurityMonitoringNotificationRuleCreateAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V2::SecurityMonitoringNotificationRuleCreateAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'selectors')
        self.selectors = attributes[:'selectors']
      end

      if attributes.key?(:'targets')
        if (value = attributes[:'targets']).is_a?(Array)
          self.targets = value
        end
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @enabled.nil?
      return false if @name.nil?
      return false if @name.to_s.length > 500
      return false if @name.to_s.length < 1
      return false if @selectors.nil?
      return false if @targets.nil?
      return false if @targets.length > 20
      return false if @targets.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param enabled [Object] Object to be assigned
    # @!visibility private
    def enabled=(enabled)
      if enabled.nil?
        fail ArgumentError, 'invalid value for "enabled", enabled cannot be nil.'
      end
      @enabled = enabled
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      if name.to_s.length > 500
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 500.'
      end
      if name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end
      @name = name
    end

    # Custom attribute writer method with validation
    # @param selectors [Object] Object to be assigned
    # @!visibility private
    def selectors=(selectors)
      if selectors.nil?
        fail ArgumentError, 'invalid value for "selectors", selectors cannot be nil.'
      end
      @selectors = selectors
    end

    # Custom attribute writer method with validation
    # @param targets [Object] Object to be assigned
    # @!visibility private
    def targets=(targets)
      if targets.nil?
        fail ArgumentError, 'invalid value for "targets", targets cannot be nil.'
      end
      if targets.length > 20
        fail ArgumentError, 'invalid value for "targets", number of items must be less than or equal to 20.'
      end
      if targets.length < 1
        fail ArgumentError, 'invalid value for "targets", number of items must be greater than or equal to 1.'
      end
      @targets = targets
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          enabled == o.enabled &&
          name == o.name &&
          selectors == o.selectors &&
          targets == o.targets
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [enabled, name, selectors, targets].hash
    end
  end
end
