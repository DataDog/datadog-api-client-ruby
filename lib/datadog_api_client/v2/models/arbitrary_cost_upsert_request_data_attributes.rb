=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The definition of `ArbitraryCostUpsertRequestDataAttributes` object.
  class ArbitraryCostUpsertRequestDataAttributes
    include BaseGenericModel

    # The `attributes` `costs_to_allocate`.
    attr_reader :costs_to_allocate

    # The `attributes` `enabled`.
    attr_accessor :enabled

    # The `attributes` `order_id`.
    attr_accessor :order_id

    # The `attributes` `provider`.
    attr_reader :provider

    # The `attributes` `rejected`.
    attr_accessor :rejected

    # The `attributes` `rule_name`.
    attr_reader :rule_name

    # The definition of `ArbitraryCostUpsertRequestDataAttributesStrategy` object.
    attr_reader :strategy

    # The `attributes` `type`.
    attr_reader :type

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'costs_to_allocate' => :'costs_to_allocate',
        :'enabled' => :'enabled',
        :'order_id' => :'order_id',
        :'provider' => :'provider',
        :'rejected' => :'rejected',
        :'rule_name' => :'rule_name',
        :'strategy' => :'strategy',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'costs_to_allocate' => :'Array<ArbitraryCostUpsertRequestDataAttributesCostsToAllocateItems>',
        :'enabled' => :'Boolean',
        :'order_id' => :'Integer',
        :'provider' => :'Array<String>',
        :'rejected' => :'Boolean',
        :'rule_name' => :'String',
        :'strategy' => :'ArbitraryCostUpsertRequestDataAttributesStrategy',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::ArbitraryCostUpsertRequestDataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'costs_to_allocate')
        if (value = attributes[:'costs_to_allocate']).is_a?(Array)
          self.costs_to_allocate = value
        end
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.key?(:'provider')
        if (value = attributes[:'provider']).is_a?(Array)
          self.provider = value
        end
      end

      if attributes.key?(:'rejected')
        self.rejected = attributes[:'rejected']
      end

      if attributes.key?(:'rule_name')
        self.rule_name = attributes[:'rule_name']
      end

      if attributes.key?(:'strategy')
        self.strategy = attributes[:'strategy']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @costs_to_allocate.nil?
      return false if @provider.nil?
      return false if @rule_name.nil?
      return false if @strategy.nil?
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param costs_to_allocate [Object] Object to be assigned
    # @!visibility private
    def costs_to_allocate=(costs_to_allocate)
      if costs_to_allocate.nil?
        fail ArgumentError, 'invalid value for "costs_to_allocate", costs_to_allocate cannot be nil.'
      end
      @costs_to_allocate = costs_to_allocate
    end

    # Custom attribute writer method with validation
    # @param provider [Object] Object to be assigned
    # @!visibility private
    def provider=(provider)
      if provider.nil?
        fail ArgumentError, 'invalid value for "provider", provider cannot be nil.'
      end
      @provider = provider
    end

    # Custom attribute writer method with validation
    # @param rule_name [Object] Object to be assigned
    # @!visibility private
    def rule_name=(rule_name)
      if rule_name.nil?
        fail ArgumentError, 'invalid value for "rule_name", rule_name cannot be nil.'
      end
      @rule_name = rule_name
    end

    # Custom attribute writer method with validation
    # @param strategy [Object] Object to be assigned
    # @!visibility private
    def strategy=(strategy)
      if strategy.nil?
        fail ArgumentError, 'invalid value for "strategy", strategy cannot be nil.'
      end
      @strategy = strategy
    end

    # Custom attribute writer method with validation
    # @param type [Object] Object to be assigned
    # @!visibility private
    def type=(type)
      if type.nil?
        fail ArgumentError, 'invalid value for "type", type cannot be nil.'
      end
      @type = type
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          costs_to_allocate == o.costs_to_allocate &&
          enabled == o.enabled &&
          order_id == o.order_id &&
          provider == o.provider &&
          rejected == o.rejected &&
          rule_name == o.rule_name &&
          strategy == o.strategy &&
          type == o.type &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [costs_to_allocate, enabled, order_id, provider, rejected, rule_name, strategy, type, additional_properties].hash
    end
  end
end
