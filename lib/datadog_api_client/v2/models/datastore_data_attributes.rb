=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The definition of `DatastoreDataAttributes` object.
  class DatastoreDataAttributes
    include BaseGenericModel

    # The `attributes` `created_at`.
    attr_accessor :created_at

    # The `attributes` `creator_user_id`.
    attr_accessor :creator_user_id

    # The `attributes` `creator_user_uuid`.
    attr_accessor :creator_user_uuid

    # The `attributes` `description`.
    attr_accessor :description

    # The `attributes` `modified_at`.
    attr_accessor :modified_at

    # The `attributes` `name`.
    attr_accessor :name

    # The `attributes` `org_id`.
    attr_accessor :org_id

    # The `attributes` `primary_column_name`.
    attr_accessor :primary_column_name

    # The `attributes` `primary_key_generation_strategy`.
    attr_accessor :primary_key_generation_strategy

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'created_at' => :'created_at',
        :'creator_user_id' => :'creator_user_id',
        :'creator_user_uuid' => :'creator_user_uuid',
        :'description' => :'description',
        :'modified_at' => :'modified_at',
        :'name' => :'name',
        :'org_id' => :'org_id',
        :'primary_column_name' => :'primary_column_name',
        :'primary_key_generation_strategy' => :'primary_key_generation_strategy'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'created_at' => :'Time',
        :'creator_user_id' => :'Integer',
        :'creator_user_uuid' => :'String',
        :'description' => :'String',
        :'modified_at' => :'Time',
        :'name' => :'String',
        :'org_id' => :'Integer',
        :'primary_column_name' => :'String',
        :'primary_key_generation_strategy' => :'DatastoreDataAttributesPrimaryKeyGenerationStrategy'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::DatastoreDataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'creator_user_id')
        self.creator_user_id = attributes[:'creator_user_id']
      end

      if attributes.key?(:'creator_user_uuid')
        self.creator_user_uuid = attributes[:'creator_user_uuid']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'modified_at')
        self.modified_at = attributes[:'modified_at']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'org_id')
        self.org_id = attributes[:'org_id']
      end

      if attributes.key?(:'primary_column_name')
        self.primary_column_name = attributes[:'primary_column_name']
      end

      if attributes.key?(:'primary_key_generation_strategy')
        self.primary_key_generation_strategy = attributes[:'primary_key_generation_strategy']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_at == o.created_at &&
          creator_user_id == o.creator_user_id &&
          creator_user_uuid == o.creator_user_uuid &&
          description == o.description &&
          modified_at == o.modified_at &&
          name == o.name &&
          org_id == o.org_id &&
          primary_column_name == o.primary_column_name &&
          primary_key_generation_strategy == o.primary_key_generation_strategy &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [created_at, creator_user_id, creator_user_uuid, description, modified_at, name, org_id, primary_column_name, primary_key_generation_strategy, additional_properties].hash
    end
  end
end
