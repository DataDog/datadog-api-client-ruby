=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Attributes for a Google Cloud Usage Cost config.
  class GCPUsageCostConfigAttributes
    include BaseGenericModel
    # The Google Cloud account ID.
    attr_reader :account_id
    # The Google Cloud bucket name used to store the Usage Cost export.
    attr_reader :bucket_name
    # The timestamp when the Google Cloud Usage Cost config was created.
    attr_reader :created_at
    # The export dataset name used for the Google Cloud Usage Cost Report.
    attr_reader :dataset
    # The error messages for the Google Cloud Usage Cost config.
    attr_accessor :error_messages
    # The export prefix used for the Google Cloud Usage Cost Report.
    attr_reader :export_prefix
    # The name of the Google Cloud Usage Cost Report.
    attr_reader :export_project_name
    # The number of months the report has been backfilled.
    attr_reader :months
    # The `project_id` of the Google Cloud Usage Cost report.
    attr_accessor :project_id
    # The unique Google Cloud service account email.
    attr_reader :service_account
    # The status of the Google Cloud Usage Cost config.
    attr_reader :status
    # The timestamp when the Google Cloud Usage Cost config status was updated.
    attr_reader :status_updated_at
    # The timestamp when the Google Cloud Usage Cost config status was updated.
    attr_reader :updated_at

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'account_id' => :'account_id',
        :'bucket_name' => :'bucket_name',
        :'created_at' => :'created_at',
        :'dataset' => :'dataset',
        :'error_messages' => :'error_messages',
        :'export_prefix' => :'export_prefix',
        :'export_project_name' => :'export_project_name',
        :'months' => :'months',
        :'project_id' => :'project_id',
        :'service_account' => :'service_account',
        :'status' => :'status',
        :'status_updated_at' => :'status_updated_at',
        :'updated_at' => :'updated_at'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'account_id' => :'String',
        :'bucket_name' => :'String',
        :'created_at' => :'String',
        :'dataset' => :'String',
        :'error_messages' => :'Array<String>',
        :'export_prefix' => :'String',
        :'export_project_name' => :'String',
        :'months' => :'Integer',
        :'project_id' => :'String',
        :'service_account' => :'String',
        :'status' => :'String',
        :'status_updated_at' => :'String',
        :'updated_at' => :'String'
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
        :'error_messages',
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::GCPUsageCostConfigAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'bucket_name')
        self.bucket_name = attributes[:'bucket_name']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'dataset')
        self.dataset = attributes[:'dataset']
      end

      if attributes.key?(:'error_messages')
        if (value = attributes[:'error_messages']).is_a?(Array)
          self.error_messages = value
        end
      end

      if attributes.key?(:'export_prefix')
        self.export_prefix = attributes[:'export_prefix']
      end

      if attributes.key?(:'export_project_name')
        self.export_project_name = attributes[:'export_project_name']
      end

      if attributes.key?(:'months')
        self.months = attributes[:'months']
      end

      if attributes.key?(:'project_id')
        self.project_id = attributes[:'project_id']
      end

      if attributes.key?(:'service_account')
        self.service_account = attributes[:'service_account']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'status_updated_at')
        self.status_updated_at = attributes[:'status_updated_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @account_id.nil?
      return false if @bucket_name.nil?
      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6}$/)
      return false if !@created_at.nil? && @created_at !~ pattern
      return false if @dataset.nil?
      return false if @export_prefix.nil?
      return false if @export_project_name.nil?
      return false if !@months.nil? && @months > 36
      return false if @service_account.nil?
      return false if @status.nil?
      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6}$/)
      return false if !@status_updated_at.nil? && @status_updated_at !~ pattern
      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6}$/)
      return false if !@updated_at.nil? && @updated_at !~ pattern
      true
    end

    # Custom attribute writer method with validation
    # @param account_id [Object] Object to be assigned
    # @!visibility private
    def account_id=(account_id)
      if account_id.nil?
        fail ArgumentError, 'invalid value for "account_id", account_id cannot be nil.'
      end
      @account_id = account_id
    end

    # Custom attribute writer method with validation
    # @param bucket_name [Object] Object to be assigned
    # @!visibility private
    def bucket_name=(bucket_name)
      if bucket_name.nil?
        fail ArgumentError, 'invalid value for "bucket_name", bucket_name cannot be nil.'
      end
      @bucket_name = bucket_name
    end

    # Custom attribute writer method with validation
    # @param created_at [Object] Object to be assigned
    # @!visibility private
    def created_at=(created_at)
      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6}$/)
      if !created_at.nil? && created_at !~ pattern
        fail ArgumentError, "invalid value for \"created_at\", must conform to the pattern #{pattern}."
      end
      @created_at = created_at
    end

    # Custom attribute writer method with validation
    # @param dataset [Object] Object to be assigned
    # @!visibility private
    def dataset=(dataset)
      if dataset.nil?
        fail ArgumentError, 'invalid value for "dataset", dataset cannot be nil.'
      end
      @dataset = dataset
    end

    # Custom attribute writer method with validation
    # @param export_prefix [Object] Object to be assigned
    # @!visibility private
    def export_prefix=(export_prefix)
      if export_prefix.nil?
        fail ArgumentError, 'invalid value for "export_prefix", export_prefix cannot be nil.'
      end
      @export_prefix = export_prefix
    end

    # Custom attribute writer method with validation
    # @param export_project_name [Object] Object to be assigned
    # @!visibility private
    def export_project_name=(export_project_name)
      if export_project_name.nil?
        fail ArgumentError, 'invalid value for "export_project_name", export_project_name cannot be nil.'
      end
      @export_project_name = export_project_name
    end

    # Custom attribute writer method with validation
    # @param months [Object] Object to be assigned
    # @!visibility private
    def months=(months)
      if !months.nil? && months > 36
        fail ArgumentError, 'invalid value for "months", must be smaller than or equal to 36.'
      end
      @months = months
    end

    # Custom attribute writer method with validation
    # @param service_account [Object] Object to be assigned
    # @!visibility private
    def service_account=(service_account)
      if service_account.nil?
        fail ArgumentError, 'invalid value for "service_account", service_account cannot be nil.'
      end
      @service_account = service_account
    end

    # Custom attribute writer method with validation
    # @param status [Object] Object to be assigned
    # @!visibility private
    def status=(status)
      if status.nil?
        fail ArgumentError, 'invalid value for "status", status cannot be nil.'
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param status_updated_at [Object] Object to be assigned
    # @!visibility private
    def status_updated_at=(status_updated_at)
      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6}$/)
      if !status_updated_at.nil? && status_updated_at !~ pattern
        fail ArgumentError, "invalid value for \"status_updated_at\", must conform to the pattern #{pattern}."
      end
      @status_updated_at = status_updated_at
    end

    # Custom attribute writer method with validation
    # @param updated_at [Object] Object to be assigned
    # @!visibility private
    def updated_at=(updated_at)
      pattern = Regexp.new(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6}$/)
      if !updated_at.nil? && updated_at !~ pattern
        fail ArgumentError, "invalid value for \"updated_at\", must conform to the pattern #{pattern}."
      end
      @updated_at = updated_at
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_id == o.account_id &&
          bucket_name == o.bucket_name &&
          created_at == o.created_at &&
          dataset == o.dataset &&
          error_messages == o.error_messages &&
          export_prefix == o.export_prefix &&
          export_project_name == o.export_project_name &&
          months == o.months &&
          project_id == o.project_id &&
          service_account == o.service_account &&
          status == o.status &&
          status_updated_at == o.status_updated_at &&
          updated_at == o.updated_at &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [account_id, bucket_name, created_at, dataset, error_messages, export_prefix, export_project_name, months, project_id, service_account, status, status_updated_at, updated_at, additional_properties].hash
    end
  end
end
