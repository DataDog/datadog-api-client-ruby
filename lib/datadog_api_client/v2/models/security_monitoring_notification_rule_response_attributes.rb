=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Attributes of the notification rule.
  class SecurityMonitoringNotificationRuleResponseAttributes
    include BaseGenericModel

    # Timestamp of creation of the notification rule in milliseconds.
    attr_accessor :creation_date

    # The author of the notification rule.
    attr_accessor :creator

    # Whether the notification rule is enabled.
    attr_accessor :enabled

    # The name of the notification rule.
    attr_accessor :name

    # Selectors describing the notification rule.
    attr_accessor :selectors

    # Set of targets to notify.
    attr_reader :targets

    # Timestamp of last modification of the notification rule in milliseconds.
    attr_accessor :update_date

    # The editor of the notification rule.
    attr_accessor :updater

    # The version of the rule being updated.
    attr_reader :version

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'creation_date' => :'creation_date',
        :'creator' => :'creator',
        :'enabled' => :'enabled',
        :'name' => :'name',
        :'selectors' => :'selectors',
        :'targets' => :'targets',
        :'update_date' => :'update_date',
        :'updater' => :'updater',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'creation_date' => :'Integer',
        :'creator' => :'SecurityMonitoringCreator',
        :'enabled' => :'Boolean',
        :'name' => :'String',
        :'selectors' => :'SecurityMonitoringNotificationRuleSelectors',
        :'targets' => :'Array<String>',
        :'update_date' => :'Integer',
        :'updater' => :'SecurityMonitoringUpdater',
        :'version' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::SecurityMonitoringNotificationRuleResponseAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V2::SecurityMonitoringNotificationRuleResponseAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'creation_date')
        self.creation_date = attributes[:'creation_date']
      end

      if attributes.key?(:'creator')
        self.creator = attributes[:'creator']
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'selectors')
        self.selectors = attributes[:'selectors']
      end

      if attributes.key?(:'targets')
        if (value = attributes[:'targets']).is_a?(Array)
          self.targets = value
        end
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'updater')
        self.updater = attributes[:'updater']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if !@targets.nil? && @targets.length > 20
      return false if !@targets.nil? && @targets.length < 1
      return false if !@version.nil? && @version > 2147483647
      true
    end

    # Custom attribute writer method with validation
    # @param targets [Object] Object to be assigned
    # @!visibility private
    def targets=(targets)
      if !targets.nil? && targets.length > 20
        fail ArgumentError, 'invalid value for "targets", number of items must be less than or equal to 20.'
      end
      if !targets.nil? && targets.length < 1
        fail ArgumentError, 'invalid value for "targets", number of items must be greater than or equal to 1.'
      end
      @targets = targets
    end

    # Custom attribute writer method with validation
    # @param version [Object] Object to be assigned
    # @!visibility private
    def version=(version)
      if !version.nil? && version > 2147483647
        fail ArgumentError, 'invalid value for "version", must be smaller than or equal to 2147483647.'
      end
      @version = version
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          creation_date == o.creation_date &&
          creator == o.creator &&
          enabled == o.enabled &&
          name == o.name &&
          selectors == o.selectors &&
          targets == o.targets &&
          update_date == o.update_date &&
          updater == o.updater &&
          version == o.version
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [creation_date, creator, enabled, name, selectors, targets, update_date, updater, version].hash
    end
  end
end
