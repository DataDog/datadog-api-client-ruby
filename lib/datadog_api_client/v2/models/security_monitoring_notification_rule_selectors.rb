=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Selectors describing the notification rule.
  class SecurityMonitoringNotificationRuleSelectors
    include BaseGenericModel

    # Set of rule and signal tags for which a notification will be triggered.
    attr_reader :attributes

    # Whether vulnerability_management rules are matched by default when the selector for rule type is empty.
    attr_reader :implicit_vm_rule_match

    # True if the notification_rule was created with signal tags/attributes and migrated to an event query and false if it was created with an event query
    attr_accessor :migrated

    # Query for matching the notification_rule against signal content
    attr_accessor :query

    # Set of rule tags for which a notification will be triggered.
    attr_reader :rule_tags

    # Set of signal types (rule types) for which a notification will be triggered.
    attr_reader :rule_types

    # Set of signal severities (rule case statuses) for which a notification will be triggered.
    attr_reader :severities

    # Set of signal tags for which a notification will be triggered.
    attr_reader :signal_tags

    # Specifies the evaluation result (Signal or Finding).
    attr_accessor :trigger_source

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'attributes' => :'attributes',
        :'implicit_vm_rule_match' => :'implicit_vm_rule_match',
        :'migrated' => :'migrated',
        :'query' => :'query',
        :'rule_tags' => :'rule_tags',
        :'rule_types' => :'rule_types',
        :'severities' => :'severities',
        :'signal_tags' => :'signal_tags',
        :'trigger_source' => :'trigger_source'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'attributes' => :'Array<String>',
        :'implicit_vm_rule_match' => :'Boolean',
        :'migrated' => :'Boolean',
        :'query' => :'String',
        :'rule_tags' => :'Array<String>',
        :'rule_types' => :'Array<SecurityMonitoringRuleTypes>',
        :'severities' => :'Array<SecurityMonitoringRuleSeverity>',
        :'signal_tags' => :'Array<String>',
        :'trigger_source' => :'SecurityMonitoringNotificationRuleTriggerSource'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::SecurityMonitoringNotificationRuleSelectors` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V2::SecurityMonitoringNotificationRuleSelectors`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'attributes')
        if (value = attributes[:'attributes']).is_a?(Array)
          self.attributes = value
        end
      end

      if attributes.key?(:'implicit_vm_rule_match')
        self.implicit_vm_rule_match = attributes[:'implicit_vm_rule_match']
      end

      if attributes.key?(:'migrated')
        self.migrated = attributes[:'migrated']
      end

      if attributes.key?(:'query')
        self.query = attributes[:'query']
      end

      if attributes.key?(:'rule_tags')
        if (value = attributes[:'rule_tags']).is_a?(Array)
          self.rule_tags = value
        end
      end

      if attributes.key?(:'rule_types')
        if (value = attributes[:'rule_types']).is_a?(Array)
          self.rule_types = value
        end
      end

      if attributes.key?(:'severities')
        if (value = attributes[:'severities']).is_a?(Array)
          self.severities = value
        end
      end

      if attributes.key?(:'signal_tags')
        if (value = attributes[:'signal_tags']).is_a?(Array)
          self.signal_tags = value
        end
      end

      if attributes.key?(:'trigger_source')
        self.trigger_source = attributes[:'trigger_source']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @attributes.nil?
      return false if @implicit_vm_rule_match.nil?
      return false if @rule_tags.nil?
      return false if @rule_tags.length > 20
      return false if @rule_types.nil?
      return false if @severities.nil?
      return false if @signal_tags.nil?
      return false if @signal_tags.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param attributes [Object] Object to be assigned
    # @!visibility private
    def attributes=(attributes)
      if attributes.nil?
        fail ArgumentError, 'invalid value for "attributes", attributes cannot be nil.'
      end
      @attributes = attributes
    end

    # Custom attribute writer method with validation
    # @param implicit_vm_rule_match [Object] Object to be assigned
    # @!visibility private
    def implicit_vm_rule_match=(implicit_vm_rule_match)
      if implicit_vm_rule_match.nil?
        fail ArgumentError, 'invalid value for "implicit_vm_rule_match", implicit_vm_rule_match cannot be nil.'
      end
      @implicit_vm_rule_match = implicit_vm_rule_match
    end

    # Custom attribute writer method with validation
    # @param rule_tags [Object] Object to be assigned
    # @!visibility private
    def rule_tags=(rule_tags)
      if rule_tags.nil?
        fail ArgumentError, 'invalid value for "rule_tags", rule_tags cannot be nil.'
      end
      if rule_tags.length > 20
        fail ArgumentError, 'invalid value for "rule_tags", number of items must be less than or equal to 20.'
      end
      @rule_tags = rule_tags
    end

    # Custom attribute writer method with validation
    # @param rule_types [Object] Object to be assigned
    # @!visibility private
    def rule_types=(rule_types)
      if rule_types.nil?
        fail ArgumentError, 'invalid value for "rule_types", rule_types cannot be nil.'
      end
      @rule_types = rule_types
    end

    # Custom attribute writer method with validation
    # @param severities [Object] Object to be assigned
    # @!visibility private
    def severities=(severities)
      if severities.nil?
        fail ArgumentError, 'invalid value for "severities", severities cannot be nil.'
      end
      @severities = severities
    end

    # Custom attribute writer method with validation
    # @param signal_tags [Object] Object to be assigned
    # @!visibility private
    def signal_tags=(signal_tags)
      if signal_tags.nil?
        fail ArgumentError, 'invalid value for "signal_tags", signal_tags cannot be nil.'
      end
      if signal_tags.length > 20
        fail ArgumentError, 'invalid value for "signal_tags", number of items must be less than or equal to 20.'
      end
      @signal_tags = signal_tags
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          attributes == o.attributes &&
          implicit_vm_rule_match == o.implicit_vm_rule_match &&
          migrated == o.migrated &&
          query == o.query &&
          rule_tags == o.rule_tags &&
          rule_types == o.rule_types &&
          severities == o.severities &&
          signal_tags == o.signal_tags &&
          trigger_source == o.trigger_source
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [attributes, implicit_vm_rule_match, migrated, query, rule_tags, rule_types, severities, signal_tags, trigger_source].hash
    end
  end
end
