=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The definition of `CreateTenancyConfigDataAttributes` object.
  class CreateTenancyConfigDataAttributes
    include BaseGenericModel

    # The auth credentials of the user. Consists of a public key fingerprint and private key.
    attr_reader :auth_credentials

    # The config version. It is not recommended to add or change this value, as it is determined internally.
    attr_accessor :config_version

    # The OCID of the compartment containing Datadog managed resources.
    attr_accessor :dd_compartment_id

    # The OCID of the resource manager stack for creating Datadog managed resources.
    attr_accessor :dd_stack_id

    # The home region of the tenancy to be integrated.
    attr_reader :home_region

    # The definition of `OCILogsConfig` object.
    attr_accessor :logs_config

    # The definition of `OCIMetricsConfig` object.
    attr_accessor :metrics_config

    # The definition of `RegionsConfig` object.
    attr_accessor :regions_config

    # Enable or disable resource collection.
    attr_accessor :resource_collection_enabled

    # The OCID of the user needed to authenticate and collect data.
    attr_reader :user_ocid

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'auth_credentials' => :'auth_credentials',
        :'config_version' => :'config_version',
        :'dd_compartment_id' => :'dd_compartment_id',
        :'dd_stack_id' => :'dd_stack_id',
        :'home_region' => :'home_region',
        :'logs_config' => :'logs_config',
        :'metrics_config' => :'metrics_config',
        :'regions_config' => :'regions_config',
        :'resource_collection_enabled' => :'resource_collection_enabled',
        :'user_ocid' => :'user_ocid'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'auth_credentials' => :'AuthCredentials',
        :'config_version' => :'Integer',
        :'dd_compartment_id' => :'String',
        :'dd_stack_id' => :'String',
        :'home_region' => :'String',
        :'logs_config' => :'OCILogsConfig',
        :'metrics_config' => :'OCIMetricsConfig',
        :'regions_config' => :'RegionsConfig',
        :'resource_collection_enabled' => :'Boolean',
        :'user_ocid' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::CreateTenancyConfigDataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'auth_credentials')
        self.auth_credentials = attributes[:'auth_credentials']
      end

      if attributes.key?(:'config_version')
        self.config_version = attributes[:'config_version']
      end

      if attributes.key?(:'dd_compartment_id')
        self.dd_compartment_id = attributes[:'dd_compartment_id']
      end

      if attributes.key?(:'dd_stack_id')
        self.dd_stack_id = attributes[:'dd_stack_id']
      end

      if attributes.key?(:'home_region')
        self.home_region = attributes[:'home_region']
      end

      if attributes.key?(:'logs_config')
        self.logs_config = attributes[:'logs_config']
      end

      if attributes.key?(:'metrics_config')
        self.metrics_config = attributes[:'metrics_config']
      end

      if attributes.key?(:'regions_config')
        self.regions_config = attributes[:'regions_config']
      end

      if attributes.key?(:'resource_collection_enabled')
        self.resource_collection_enabled = attributes[:'resource_collection_enabled']
      end

      if attributes.key?(:'user_ocid')
        self.user_ocid = attributes[:'user_ocid']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @auth_credentials.nil?
      return false if @home_region.nil?
      return false if @user_ocid.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param auth_credentials [Object] Object to be assigned
    # @!visibility private
    def auth_credentials=(auth_credentials)
      if auth_credentials.nil?
        fail ArgumentError, 'invalid value for "auth_credentials", auth_credentials cannot be nil.'
      end
      @auth_credentials = auth_credentials
    end

    # Custom attribute writer method with validation
    # @param home_region [Object] Object to be assigned
    # @!visibility private
    def home_region=(home_region)
      if home_region.nil?
        fail ArgumentError, 'invalid value for "home_region", home_region cannot be nil.'
      end
      @home_region = home_region
    end

    # Custom attribute writer method with validation
    # @param user_ocid [Object] Object to be assigned
    # @!visibility private
    def user_ocid=(user_ocid)
      if user_ocid.nil?
        fail ArgumentError, 'invalid value for "user_ocid", user_ocid cannot be nil.'
      end
      @user_ocid = user_ocid
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auth_credentials == o.auth_credentials &&
          config_version == o.config_version &&
          dd_compartment_id == o.dd_compartment_id &&
          dd_stack_id == o.dd_stack_id &&
          home_region == o.home_region &&
          logs_config == o.logs_config &&
          metrics_config == o.metrics_config &&
          regions_config == o.regions_config &&
          resource_collection_enabled == o.resource_collection_enabled &&
          user_ocid == o.user_ocid &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [auth_credentials, config_version, dd_compartment_id, dd_stack_id, home_region, logs_config, metrics_config, regions_config, resource_collection_enabled, user_ocid, additional_properties].hash
    end
  end
end
