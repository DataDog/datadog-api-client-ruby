=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Attributes of a flaky test.
  class FlakyTestAttributes
    include BaseGenericModel

    # Unique identifier for the attempt to fix this flaky test. Use this ID in the Git commit message in order to trigger the attempt to fix workflow.
    #
    # When the workflow is triggered the test is automatically retried by the tracer a certain number of configurable times. When all retries pass, the test is automatically marked as fixed in Flaky Test Management.
    # Test runs are tagged with @test.test_management.attempt_to_fix_passed and @test.test_management.is_attempt_to_fix when the attempt to fix workflow is triggered.
    attr_accessor :attempt_to_fix_id

    # The name of the test's code owners as inferred from the repository configuration.
    attr_accessor :codeowners

    # List of environments where this test has been flaky.
    attr_accessor :envs

    # The branch name where the test exhibited flakiness for the first time.
    attr_accessor :first_flaked_branch

    # The commit SHA where the test exhibited flakiness for the first time.
    attr_accessor :first_flaked_sha

    # Unix timestamp when the test exhibited flakiness for the first time.
    attr_accessor :first_flaked_ts

    # The category of a flaky test.
    attr_accessor :flaky_category

    # The current state of the flaky test.
    attr_accessor :flaky_state

    # The branch name where the test exhibited flakiness for the last time.
    attr_accessor :last_flaked_branch

    # The commit SHA where the test exhibited flakiness for the last time.
    attr_accessor :last_flaked_sha

    # Unix timestamp when the test exhibited flakiness for the last time.
    attr_accessor :last_flaked_ts

    # The name of the test module. The definition of module changes slightly per language:
    # - In .NET, a test module groups every test that is run under the same unit test project.
    # - In Swift, a test module groups every test that is run for a given bundle.
    # - In JavaScript, the test modules map one-to-one to test sessions.
    # - In Java, a test module groups every test that is run by the same Maven Surefire/Failsafe or Gradle Test task execution.
    # - In Python, a test module groups every test that is run under the same `.py` file as part of a test suite, which is typically managed by a framework like `unittest` or `pytest`.
    # - In Ruby, a test module groups every test that is run within the same test file, which is typically managed by a framework like `RSpec` or `Minitest`.
    attr_accessor :_module

    # The test name. A concise name for a test case. Defined in the test itself.
    attr_accessor :name

    # CI pipeline related statistics for the flaky test. This information is only available if test runs are associated with CI pipeline events from CI Visibility.
    attr_accessor :pipeline_stats

    # List of test service names where this test has been flaky.
    #
    # A test service is a group of tests associated with a project or repository. It contains all the individual tests for your code, optionally organized into test suites, which are like folders for your tests.
    attr_accessor :services

    # The name of the test suite. A group of tests exercising the same unit of code depending on your language and testing framework.
    attr_accessor :suite

    # Metadata about the latest failed test run of the flaky test.
    attr_accessor :test_run_metadata

    # Test statistics for the flaky test.
    attr_accessor :test_stats

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'attempt_to_fix_id' => :'attempt_to_fix_id',
        :'codeowners' => :'codeowners',
        :'envs' => :'envs',
        :'first_flaked_branch' => :'first_flaked_branch',
        :'first_flaked_sha' => :'first_flaked_sha',
        :'first_flaked_ts' => :'first_flaked_ts',
        :'flaky_category' => :'flaky_category',
        :'flaky_state' => :'flaky_state',
        :'last_flaked_branch' => :'last_flaked_branch',
        :'last_flaked_sha' => :'last_flaked_sha',
        :'last_flaked_ts' => :'last_flaked_ts',
        :'_module' => :'module',
        :'name' => :'name',
        :'pipeline_stats' => :'pipeline_stats',
        :'services' => :'services',
        :'suite' => :'suite',
        :'test_run_metadata' => :'test_run_metadata',
        :'test_stats' => :'test_stats'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'attempt_to_fix_id' => :'String',
        :'codeowners' => :'Array<String>',
        :'envs' => :'Array<String>',
        :'first_flaked_branch' => :'String',
        :'first_flaked_sha' => :'String',
        :'first_flaked_ts' => :'Integer',
        :'flaky_category' => :'String',
        :'flaky_state' => :'FlakyTestAttributesFlakyState',
        :'last_flaked_branch' => :'String',
        :'last_flaked_sha' => :'String',
        :'last_flaked_ts' => :'Integer',
        :'_module' => :'String',
        :'name' => :'String',
        :'pipeline_stats' => :'FlakyTestPipelineStats',
        :'services' => :'Array<String>',
        :'suite' => :'String',
        :'test_run_metadata' => :'FlakyTestRunMetadata',
        :'test_stats' => :'FlakyTestStats'
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
        :'flaky_category',
        :'_module',
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::FlakyTestAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'attempt_to_fix_id')
        self.attempt_to_fix_id = attributes[:'attempt_to_fix_id']
      end

      if attributes.key?(:'codeowners')
        if (value = attributes[:'codeowners']).is_a?(Array)
          self.codeowners = value
        end
      end

      if attributes.key?(:'envs')
        if (value = attributes[:'envs']).is_a?(Array)
          self.envs = value
        end
      end

      if attributes.key?(:'first_flaked_branch')
        self.first_flaked_branch = attributes[:'first_flaked_branch']
      end

      if attributes.key?(:'first_flaked_sha')
        self.first_flaked_sha = attributes[:'first_flaked_sha']
      end

      if attributes.key?(:'first_flaked_ts')
        self.first_flaked_ts = attributes[:'first_flaked_ts']
      end

      if attributes.key?(:'flaky_category')
        self.flaky_category = attributes[:'flaky_category']
      end

      if attributes.key?(:'flaky_state')
        self.flaky_state = attributes[:'flaky_state']
      end

      if attributes.key?(:'last_flaked_branch')
        self.last_flaked_branch = attributes[:'last_flaked_branch']
      end

      if attributes.key?(:'last_flaked_sha')
        self.last_flaked_sha = attributes[:'last_flaked_sha']
      end

      if attributes.key?(:'last_flaked_ts')
        self.last_flaked_ts = attributes[:'last_flaked_ts']
      end

      if attributes.key?(:'_module')
        self._module = attributes[:'_module']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'pipeline_stats')
        self.pipeline_stats = attributes[:'pipeline_stats']
      end

      if attributes.key?(:'services')
        if (value = attributes[:'services']).is_a?(Array)
          self.services = value
        end
      end

      if attributes.key?(:'suite')
        self.suite = attributes[:'suite']
      end

      if attributes.key?(:'test_run_metadata')
        self.test_run_metadata = attributes[:'test_run_metadata']
      end

      if attributes.key?(:'test_stats')
        self.test_stats = attributes[:'test_stats']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          attempt_to_fix_id == o.attempt_to_fix_id &&
          codeowners == o.codeowners &&
          envs == o.envs &&
          first_flaked_branch == o.first_flaked_branch &&
          first_flaked_sha == o.first_flaked_sha &&
          first_flaked_ts == o.first_flaked_ts &&
          flaky_category == o.flaky_category &&
          flaky_state == o.flaky_state &&
          last_flaked_branch == o.last_flaked_branch &&
          last_flaked_sha == o.last_flaked_sha &&
          last_flaked_ts == o.last_flaked_ts &&
          _module == o._module &&
          name == o.name &&
          pipeline_stats == o.pipeline_stats &&
          services == o.services &&
          suite == o.suite &&
          test_run_metadata == o.test_run_metadata &&
          test_stats == o.test_stats &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [attempt_to_fix_id, codeowners, envs, first_flaked_branch, first_flaked_sha, first_flaked_ts, flaky_category, flaky_state, last_flaked_branch, last_flaked_sha, last_flaked_ts, _module, name, pipeline_stats, services, suite, test_run_metadata, test_stats, additional_properties].hash
    end
  end
end
