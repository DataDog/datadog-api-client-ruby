=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Attributes from the monitor that triggered the event.
  class MonitorType
    include BaseGenericModel

    # Whether the object has unparsed attributes
    # @!visibility private
    attr_accessor :_unparsed

    # The POSIX timestamp of the monitor's creation in nanoseconds.
    attr_accessor :created_at

    # Monitor group status used when there is no `result_groups`.
    attr_reader :group_status

    # Groups to which the monitor belongs.
    attr_accessor :groups

    # The monitor ID.
    attr_accessor :id

    # The monitor message.
    attr_accessor :message

    # The monitor's last-modified timestamp.
    attr_accessor :modified

    # The monitor name.
    attr_accessor :name

    # The query that triggers the alert.
    attr_accessor :query

    # A list of tags attached to the monitor.
    attr_accessor :tags

    # The templated name of the monitor before resolving any template variables.
    attr_accessor :templated_name

    # The monitor type.
    attr_accessor :type

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'created_at' => :'created_at',
        :'group_status' => :'group_status',
        :'groups' => :'groups',
        :'id' => :'id',
        :'message' => :'message',
        :'modified' => :'modified',
        :'name' => :'name',
        :'query' => :'query',
        :'tags' => :'tags',
        :'templated_name' => :'templated_name',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'created_at' => :'Integer',
        :'group_status' => :'Integer',
        :'groups' => :'Array<String>',
        :'id' => :'Integer',
        :'message' => :'String',
        :'modified' => :'Integer',
        :'name' => :'String',
        :'query' => :'String',
        :'tags' => :'Array<String>',
        :'templated_name' => :'String',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::MonitorType` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DatadogAPIClient::V2::MonitorType`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'group_status')
        self.group_status = attributes[:'group_status']
      end

      if attributes.key?(:'groups')
        if (value = attributes[:'groups']).is_a?(Array)
          self.groups = value
        end
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'modified')
        self.modified = attributes[:'modified']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'query')
        self.query = attributes[:'query']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'templated_name')
        self.templated_name = attributes[:'templated_name']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if !@group_status.nil? && @group_status > 2147483647
      true
    end

    # Custom attribute writer method with validation
    # @param group_status [Object] Object to be assigned
    # @!visibility private
    def group_status=(group_status)
      if !group_status.nil? && group_status > 2147483647
        fail ArgumentError, 'invalid value for "group_status", must be smaller than or equal to 2147483647.'
      end
      @group_status = group_status
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_at == o.created_at &&
          group_status == o.group_status &&
          groups == o.groups &&
          id == o.id &&
          message == o.message &&
          modified == o.modified &&
          name == o.name &&
          query == o.query &&
          tags == o.tags &&
          templated_name == o.templated_name &&
          type == o.type
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [created_at, group_status, groups, id, message, modified, name, query, tags, templated_name, type].hash
    end
  end
end
