=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # 
  class SegmentDataAttributes
    include BaseGenericModel

    #
    attr_accessor :created_at

    #
    attr_accessor :created_by

    #
    attr_reader :data_query

    #
    attr_accessor :description

    #
    attr_accessor :disabled_at

    #
    attr_accessor :disabled_by

    #
    attr_accessor :materialization_row_count

    #
    attr_accessor :materialized_at

    #
    attr_accessor :modified_at

    #
    attr_accessor :modified_by

    #
    attr_reader :name

    #
    attr_accessor :org_id

    #
    attr_accessor :source

    #
    attr_accessor :tags

    #
    attr_accessor :version

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'created_at' => :'created_at',
        :'created_by' => :'created_by',
        :'data_query' => :'data_query',
        :'description' => :'description',
        :'disabled_at' => :'disabled_at',
        :'disabled_by' => :'disabled_by',
        :'materialization_row_count' => :'materialization_row_count',
        :'materialized_at' => :'materialized_at',
        :'modified_at' => :'modified_at',
        :'modified_by' => :'modified_by',
        :'name' => :'name',
        :'org_id' => :'org_id',
        :'source' => :'source',
        :'tags' => :'tags',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'created_at' => :'Time',
        :'created_by' => :'SegmentDataSource',
        :'data_query' => :'SegmentDataAttributesDataQuery',
        :'description' => :'String',
        :'disabled_at' => :'Time',
        :'disabled_by' => :'SegmentDataSource',
        :'materialization_row_count' => :'Integer',
        :'materialized_at' => :'String',
        :'modified_at' => :'Time',
        :'modified_by' => :'SegmentDataSource',
        :'name' => :'String',
        :'org_id' => :'Integer',
        :'source' => :'Integer',
        :'tags' => :'Array<String>',
        :'version' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::SegmentDataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'data_query')
        self.data_query = attributes[:'data_query']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'disabled_at')
        self.disabled_at = attributes[:'disabled_at']
      end

      if attributes.key?(:'disabled_by')
        self.disabled_by = attributes[:'disabled_by']
      end

      if attributes.key?(:'materialization_row_count')
        self.materialization_row_count = attributes[:'materialization_row_count']
      end

      if attributes.key?(:'materialized_at')
        self.materialized_at = attributes[:'materialized_at']
      end

      if attributes.key?(:'modified_at')
        self.modified_at = attributes[:'modified_at']
      end

      if attributes.key?(:'modified_by')
        self.modified_by = attributes[:'modified_by']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'org_id')
        self.org_id = attributes[:'org_id']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @data_query.nil?
      return false if @name.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param data_query [Object] Object to be assigned
    # @!visibility private
    def data_query=(data_query)
      if data_query.nil?
        fail ArgumentError, 'invalid value for "data_query", data_query cannot be nil.'
      end
      @data_query = data_query
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_at == o.created_at &&
          created_by == o.created_by &&
          data_query == o.data_query &&
          description == o.description &&
          disabled_at == o.disabled_at &&
          disabled_by == o.disabled_by &&
          materialization_row_count == o.materialization_row_count &&
          materialized_at == o.materialized_at &&
          modified_at == o.modified_at &&
          modified_by == o.modified_by &&
          name == o.name &&
          org_id == o.org_id &&
          source == o.source &&
          tags == o.tags &&
          version == o.version &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [created_at, created_by, data_query, description, disabled_at, disabled_by, materialization_row_count, materialized_at, modified_at, modified_by, name, org_id, source, tags, version, additional_properties].hash
    end
  end
end
