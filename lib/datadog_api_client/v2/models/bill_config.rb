=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # Bill config.
  class BillConfig
    include BaseGenericModel

    # The name of the configured Azure Export.
    attr_reader :export_name

    # The path where the Azure Export is saved.
    attr_reader :export_path

    # The name of the storage account where the Azure Export is saved.
    attr_reader :storage_account

    # The name of the storage container where the Azure Export is saved.
    attr_reader :storage_container

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'export_name' => :'export_name',
        :'export_path' => :'export_path',
        :'storage_account' => :'storage_account',
        :'storage_container' => :'storage_container'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'export_name' => :'String',
        :'export_path' => :'String',
        :'storage_account' => :'String',
        :'storage_container' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::BillConfig` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'export_name')
        self.export_name = attributes[:'export_name']
      end

      if attributes.key?(:'export_path')
        self.export_path = attributes[:'export_path']
      end

      if attributes.key?(:'storage_account')
        self.storage_account = attributes[:'storage_account']
      end

      if attributes.key?(:'storage_container')
        self.storage_container = attributes[:'storage_container']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @export_name.nil?
      return false if @export_path.nil?
      return false if @storage_account.nil?
      return false if @storage_container.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param export_name [Object] Object to be assigned
    # @!visibility private
    def export_name=(export_name)
      if export_name.nil?
        fail ArgumentError, 'invalid value for "export_name", export_name cannot be nil.'
      end
      @export_name = export_name
    end

    # Custom attribute writer method with validation
    # @param export_path [Object] Object to be assigned
    # @!visibility private
    def export_path=(export_path)
      if export_path.nil?
        fail ArgumentError, 'invalid value for "export_path", export_path cannot be nil.'
      end
      @export_path = export_path
    end

    # Custom attribute writer method with validation
    # @param storage_account [Object] Object to be assigned
    # @!visibility private
    def storage_account=(storage_account)
      if storage_account.nil?
        fail ArgumentError, 'invalid value for "storage_account", storage_account cannot be nil.'
      end
      @storage_account = storage_account
    end

    # Custom attribute writer method with validation
    # @param storage_container [Object] Object to be assigned
    # @!visibility private
    def storage_container=(storage_container)
      if storage_container.nil?
        fail ArgumentError, 'invalid value for "storage_container", storage_container cannot be nil.'
      end
      @storage_container = storage_container
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          export_name == o.export_name &&
          export_path == o.export_path &&
          storage_account == o.storage_account &&
          storage_container == o.storage_container
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [export_name, export_path, storage_account, storage_container].hash
    end
  end
end
