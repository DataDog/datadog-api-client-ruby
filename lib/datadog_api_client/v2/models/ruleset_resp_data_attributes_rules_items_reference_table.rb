=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The definition of `RulesetRespDataAttributesRulesItemsReferenceTable` object.
  class RulesetRespDataAttributesRulesItemsReferenceTable
    include BaseGenericModel

    # The `reference_table` `case_insensitivity`.
    attr_accessor :case_insensitivity

    # The `reference_table` `field_pairs`.
    attr_reader :field_pairs

    # The `reference_table` `if_not_exists`.
    attr_accessor :if_not_exists

    # The `reference_table` `source_keys`.
    attr_reader :source_keys

    # The `reference_table` `table_name`.
    attr_reader :table_name

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'case_insensitivity' => :'case_insensitivity',
        :'field_pairs' => :'field_pairs',
        :'if_not_exists' => :'if_not_exists',
        :'source_keys' => :'source_keys',
        :'table_name' => :'table_name'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'case_insensitivity' => :'Boolean',
        :'field_pairs' => :'Array<RulesetRespDataAttributesRulesItemsReferenceTableFieldPairsItems>',
        :'if_not_exists' => :'Boolean',
        :'source_keys' => :'Array<String>',
        :'table_name' => :'String'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::RulesetRespDataAttributesRulesItemsReferenceTable` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'case_insensitivity')
        self.case_insensitivity = attributes[:'case_insensitivity']
      end

      if attributes.key?(:'field_pairs')
        if (value = attributes[:'field_pairs']).is_a?(Array)
          self.field_pairs = value
        end
      end

      if attributes.key?(:'if_not_exists')
        self.if_not_exists = attributes[:'if_not_exists']
      end

      if attributes.key?(:'source_keys')
        if (value = attributes[:'source_keys']).is_a?(Array)
          self.source_keys = value
        end
      end

      if attributes.key?(:'table_name')
        self.table_name = attributes[:'table_name']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @field_pairs.nil?
      return false if @source_keys.nil?
      return false if @table_name.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param field_pairs [Object] Object to be assigned
    # @!visibility private
    def field_pairs=(field_pairs)
      if field_pairs.nil?
        fail ArgumentError, 'invalid value for "field_pairs", field_pairs cannot be nil.'
      end
      @field_pairs = field_pairs
    end

    # Custom attribute writer method with validation
    # @param source_keys [Object] Object to be assigned
    # @!visibility private
    def source_keys=(source_keys)
      if source_keys.nil?
        fail ArgumentError, 'invalid value for "source_keys", source_keys cannot be nil.'
      end
      @source_keys = source_keys
    end

    # Custom attribute writer method with validation
    # @param table_name [Object] Object to be assigned
    # @!visibility private
    def table_name=(table_name)
      if table_name.nil?
        fail ArgumentError, 'invalid value for "table_name", table_name cannot be nil.'
      end
      @table_name = table_name
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          case_insensitivity == o.case_insensitivity &&
          field_pairs == o.field_pairs &&
          if_not_exists == o.if_not_exists &&
          source_keys == o.source_keys &&
          table_name == o.table_name &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [case_insensitivity, field_pairs, if_not_exists, source_keys, table_name, additional_properties].hash
    end
  end
end
