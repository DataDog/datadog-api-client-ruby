=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # The definition of `RulesetRespDataAttributes` object.
  class RulesetRespDataAttributes
    include BaseGenericModel
    # The definition of `RulesetRespDataAttributesCreated` object.
    attr_reader :created
    # The `attributes` `enabled`.
    attr_reader :enabled
    # The `attributes` `last_modified_user_uuid`.
    attr_reader :last_modified_user_uuid
    # The definition of `RulesetRespDataAttributesModified` object.
    attr_reader :modified
    # The `attributes` `name`.
    attr_reader :name
    # The `attributes` `position`.
    attr_reader :position
    # The `attributes` `processing_status`.
    attr_accessor :processing_status
    # The `attributes` `rules`.
    attr_reader :rules
    # The `attributes` `version`.
    attr_reader :version

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'created' => :'created',
        :'enabled' => :'enabled',
        :'last_modified_user_uuid' => :'last_modified_user_uuid',
        :'modified' => :'modified',
        :'name' => :'name',
        :'position' => :'position',
        :'processing_status' => :'processing_status',
        :'rules' => :'rules',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'created' => :'RulesetRespDataAttributesCreated',
        :'enabled' => :'Boolean',
        :'last_modified_user_uuid' => :'String',
        :'modified' => :'RulesetRespDataAttributesModified',
        :'name' => :'String',
        :'position' => :'Integer',
        :'processing_status' => :'String',
        :'rules' => :'Array<RulesetRespDataAttributesRulesItems>',
        :'version' => :'Integer'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::RulesetRespDataAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'last_modified_user_uuid')
        self.last_modified_user_uuid = attributes[:'last_modified_user_uuid']
      end

      if attributes.key?(:'modified')
        self.modified = attributes[:'modified']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'position')
        self.position = attributes[:'position']
      end

      if attributes.key?(:'processing_status')
        self.processing_status = attributes[:'processing_status']
      end

      if attributes.key?(:'rules')
        if (value = attributes[:'rules']).is_a?(Array)
          self.rules = value
        end
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
      return false if @created.nil?
      return false if @enabled.nil?
      return false if @last_modified_user_uuid.nil?
      return false if @modified.nil?
      return false if @name.nil?
      return false if @position.nil?
      return false if @position > 2147483647
      return false if @rules.nil?
      return false if @version.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param created [Object] Object to be assigned
    # @!visibility private
    def created=(created)
      if created.nil?
        fail ArgumentError, 'invalid value for "created", created cannot be nil.'
      end
      @created = created
    end

    # Custom attribute writer method with validation
    # @param enabled [Object] Object to be assigned
    # @!visibility private
    def enabled=(enabled)
      if enabled.nil?
        fail ArgumentError, 'invalid value for "enabled", enabled cannot be nil.'
      end
      @enabled = enabled
    end

    # Custom attribute writer method with validation
    # @param last_modified_user_uuid [Object] Object to be assigned
    # @!visibility private
    def last_modified_user_uuid=(last_modified_user_uuid)
      if last_modified_user_uuid.nil?
        fail ArgumentError, 'invalid value for "last_modified_user_uuid", last_modified_user_uuid cannot be nil.'
      end
      @last_modified_user_uuid = last_modified_user_uuid
    end

    # Custom attribute writer method with validation
    # @param modified [Object] Object to be assigned
    # @!visibility private
    def modified=(modified)
      if modified.nil?
        fail ArgumentError, 'invalid value for "modified", modified cannot be nil.'
      end
      @modified = modified
    end

    # Custom attribute writer method with validation
    # @param name [Object] Object to be assigned
    # @!visibility private
    def name=(name)
      if name.nil?
        fail ArgumentError, 'invalid value for "name", name cannot be nil.'
      end
      @name = name
    end

    # Custom attribute writer method with validation
    # @param position [Object] Object to be assigned
    # @!visibility private
    def position=(position)
      if position.nil?
        fail ArgumentError, 'invalid value for "position", position cannot be nil.'
      end
      if position > 2147483647
        fail ArgumentError, 'invalid value for "position", must be smaller than or equal to 2147483647.'
      end
      @position = position
    end

    # Custom attribute writer method with validation
    # @param rules [Object] Object to be assigned
    # @!visibility private
    def rules=(rules)
      if rules.nil?
        fail ArgumentError, 'invalid value for "rules", rules cannot be nil.'
      end
      @rules = rules
    end

    # Custom attribute writer method with validation
    # @param version [Object] Object to be assigned
    # @!visibility private
    def version=(version)
      if version.nil?
        fail ArgumentError, 'invalid value for "version", version cannot be nil.'
      end
      @version = version
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          enabled == o.enabled &&
          last_modified_user_uuid == o.last_modified_user_uuid &&
          modified == o.modified &&
          name == o.name &&
          position == o.position &&
          processing_status == o.processing_status &&
          rules == o.rules &&
          version == o.version &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [created, enabled, last_modified_user_uuid, modified, name, position, processing_status, rules, version, additional_properties].hash
    end
  end
end
