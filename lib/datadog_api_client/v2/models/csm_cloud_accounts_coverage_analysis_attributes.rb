=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V2
  # CSM Cloud Accounts Coverage Analysis attributes.
  class CsmCloudAccountsCoverageAnalysisAttributes
    include BaseGenericModel

    # CSM Coverage Analysis.
    attr_accessor :aws_coverage

    # CSM Coverage Analysis.
    attr_accessor :azure_coverage

    # CSM Coverage Analysis.
    attr_accessor :gcp_coverage

    # The ID of your organization.
    attr_accessor :org_id

    # CSM Coverage Analysis.
    attr_accessor :total_coverage

    attr_accessor :additional_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'aws_coverage' => :'aws_coverage',
        :'azure_coverage' => :'azure_coverage',
        :'gcp_coverage' => :'gcp_coverage',
        :'org_id' => :'org_id',
        :'total_coverage' => :'total_coverage'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'aws_coverage' => :'CsmCoverageAnalysis',
        :'azure_coverage' => :'CsmCoverageAnalysis',
        :'gcp_coverage' => :'CsmCoverageAnalysis',
        :'org_id' => :'Integer',
        :'total_coverage' => :'CsmCoverageAnalysis'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V2::CsmCloudAccountsCoverageAnalysisAttributes` initialize method"
      end

      self.additional_properties = {}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          self.additional_properties[k.to_sym] = v
        else
          h[k.to_sym] = v
        end
      }

      if attributes.key?(:'aws_coverage')
        self.aws_coverage = attributes[:'aws_coverage']
      end

      if attributes.key?(:'azure_coverage')
        self.azure_coverage = attributes[:'azure_coverage']
      end

      if attributes.key?(:'gcp_coverage')
        self.gcp_coverage = attributes[:'gcp_coverage']
      end

      if attributes.key?(:'org_id')
        self.org_id = attributes[:'org_id']
      end

      if attributes.key?(:'total_coverage')
        self.total_coverage = attributes[:'total_coverage']
      end
    end

    # Returns the object in the form of hash, with additionalProperties support.
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      self.additional_properties.each_pair do |attr, value|
        hash[attr] = value
      end
      hash
    end

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aws_coverage == o.aws_coverage &&
          azure_coverage == o.azure_coverage &&
          gcp_coverage == o.gcp_coverage &&
          org_id == o.org_id &&
          total_coverage == o.total_coverage &&
          additional_properties == o.additional_properties
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [aws_coverage, azure_coverage, gcp_coverage, org_id, total_coverage, additional_properties].hash
    end
  end
end
