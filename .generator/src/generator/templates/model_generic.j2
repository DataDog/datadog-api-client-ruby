  class {{ name }}
    # Whether the object has unparsed attributes
    # @!visibility private
    attr_accessor :_unparsed
{%- for attr, definition in model.get("properties", {}).items() %}

    {{ definition.description|block_comment|indent(4) }}
    attr_accessor :{{ attr|attribute_name }}
{%- endfor %}

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
{%- for attr in model.properties %}
        :'{{ attr|attribute_name }}' => :'{{ attr }}'{% if not loop.last %},{% endif %}
{%- endfor %}
      }
    end

    # Returns all the JSON keys this model knows about{# TODO add parent #}
    # @!visibility private
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
{%- for attr in model.properties %}
        :'{{ attr|attribute_name }}' => :'{{ get_type_for_attribute(model, attr, current_name=name) }}'{% if not loop.last %},{% endif %}
{%- endfor %}
      }
    end

    # List of attributes with nullable: true
    # @!visibility private
    def self.openapi_nullable
      Set.new([
      {%- for attr, spec in model.properties.items() if spec.nullable %}
        :'{{ attr|attribute_name }}',
      {%- endfor %}
      ])
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `{{ config.moduleName }}::{{ name }}` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `{{ config.moduleName }}::{{ name }}`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }
{%- for attr, definition in model.get("properties", {}).items() %}

      if attributes.key?(:'{{ attr|attribute_name }}')
        {%- if definition.get("type", "object") == "array" %}
        if (value = attributes[:'{{ attr|attribute_name }}']).is_a?(Array)
          self.{{ attr|attribute_name }} = value
        end
        {%- else %}
        self.{{ attr|attribute_name }} = attributes[:'{{ attr|attribute_name }}']
        {%- endif %}
{%- if "default" in definition and definition.default != None %}
      else
        self.{{ attr|attribute_name }} = {{ definition.default|format_value }}
{%- endif %}
      end
{%- endfor %}
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    # @!visibility private
    def list_invalid_properties
      invalid_properties = Array.new
{%- for attr, definition in model.get("properties", {}).items() %}
      {%- set required = attr in model.get("required", []) %}
      {%- if not definition.nullable and required %}
      if @{{ attr|attribute_name }}.nil?
        invalid_properties.push('invalid value for "{{ attr|attribute_name }}", {{ attr|attribute_name }} cannot be nil.')
      end
      {%- endif %}
      {%- if definition.maxLength is defined %}
      if {% if not required %}!@{{ attr|attribute_name }}.nil? && {% endif %}@{{ attr|attribute_name }}.to_s.length > {{ definition.maxLength }}
        invalid_properties.push('invalid value for "{{ attr|attribute_name }}", the character length must be smaller than or equal to {{ definition.maxLength }}.')
      end
      {%- endif %}
      {%- if definition.minLength is defined %}
      if {% if not required %}!@{{ attr|attribute_name }}.nil? && {% endif %}@{{ attr|attribute_name }}.to_s.length < {{ definition.minLength }}
        invalid_properties.push('invalid value for "{{ attr|attribute_name }}", the character length must be great than or equal to {{ definition.minLength }}.')
      end
      {%- endif %}
      {%- if definition.maximum is defined %}
      if {% if not required %}!@{{ attr|attribute_name }}.nil? && {% endif %}@{{ attr|attribute_name }} >{% if definition.exclusiveMaximum %}={% endif %} {{ definition.maximum }}
        invalid_properties.push('invalid value for "{{ attr|attribute_name }}", must be smaller than {% if not definition.exclusiveMaximum %}or equal to {% endif %}{{ definition.maximum }}.')
      end
      {%- endif %}
      {%- if definition.minimum is defined %}
      if {% if not required %}!@{{ attr|attribute_name }}.nil? && {% endif %}@{{ attr|attribute_name }} <{% if definition.exclusiveMinimum %}={% endif %} {{ definition.minimum }}
        invalid_properties.push('invalid value for "{{ attr|attribute_name }}", must be greater than {% if not definition.exclusiveMinimum %}or equal to {% endif %}{{ definition.minimum }}.')
      end
      {%- endif %}
      {%- if definition.pattern is defined %}
      pattern = Regexp.new({{ definition.pattern }})
      if {% if not required %}!@{{ attr|attribute_name }}.nil? && {% endif %}@{{ attr|attribute_name }} !~ pattern
        invalid_properties.push("invalid value for \"{{ attr|attribute_name }}\", must conform to the pattern #{pattern}.")
      end
      {%- endif %}
      {%- if definition.maxItems is defined %}
      if {% if not required %}!@{{ attr|attribute_name }}.nil? && {% endif %}@{{ attr|attribute_name }}.length > {{ definition.maxItems }}
        invalid_properties.push('invalid value for "{{ attr|attribute_name }}", number of items must be less than or equal to {{ definition.maxItems }}.')
      end
      {%- endif %}
      {%- if definition.minItems is defined %}
      if {% if not required %}!@{{ attr|attribute_name }}.nil? && {% endif %}@{{ attr|attribute_name }}.length < {{ definition.minItems }}
        invalid_properties.push('invalid value for "{{ attr|attribute_name }}", number of items must be greater than or equal to {{ definition.minItems }}.')
      end
      {%- endif %}
{%- endfor %}
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    # @!visibility private
    def valid?
{%- for attr, definition in model.get("properties", {}).items() %}
      {%- set required = attr in model.get("required", []) %}
      {%- if not definition.nullable and required %}
      return false if @{{ attr|attribute_name }}.nil?
      {%- endif %}
      {%- if definition.maxLength is defined %}
      return false if {% if not required %}!@{{ attr|attribute_name }}.nil? && {% endif %}@{{ attr|attribute_name }}.to_s.length > {{ definition.maxLength }}
      {%- endif %}
      {%- if definition.minLength is defined %}
      return false if {% if not required %}!@{{ attr|attribute_name }}.nil? && {% endif %}@{{ attr|attribute_name }}.to_s.length < {{ definition.minLength }}
      {%- endif %}
      {%- if definition.maximum is defined %}
      return false if {% if not required %}!@{{ attr|attribute_name }}.nil? && {% endif %}@{{ attr|attribute_name }} >{% if definition.exclusiveMaximum %}={% endif %} {{ definition.maximum }}
      {%- endif %}
      {%- if definition.minimum is defined %}
      return false if {% if not required %}!@{{ attr|attribute_name }}.nil? && {% endif %}@{{ attr|attribute_name }} <{% if definition.exclusiveMinimum %}={% endif %} {{ definition.minimum }}
      {%- endif %}
      {%- if definition.pattern is defined %}
      pattern = Regexp.new({{ definition.pattern }})
      return false if {% if not required %}!@{{ attr|attribute_name }}.nil? && {% endif %}@{{ attr|attribute_name }} !~ pattern
      {%- endif %}
      {%- if definition.maxItems is defined %}
      return false if {% if not required %}!@{{ attr|attribute_name }}.nil? && {% endif %}@{{ attr|attribute_name }}.length > {{ definition.maxItems }}
      {%- endif %}
      {%- if definition.minItems is defined %}
      return false if {% if not required %}!@{{ attr|attribute_name }}.nil? && {% endif %}@{{ attr|attribute_name }}.length < {{ definition.minItems }}
      {%- endif %}
{%- endfor %}
      true
    end

{%- for attr, definition in model.get("properties", {}).items() %}
    {%- set required = attr in model.get("required", []) %}
    {%- set collection = definition.get("type") == "array" or "items" in definition %}
    {%- set has_validation = (
      (not definition.nullable and required) or
      definition.maxLength is defined or
      definition.minLength is defined or
      definition.maximum is defined or
      definition.minimum is defined or
      definition.pattern is defined or
      definition.maxItems is defined or
      definition.minItems is defined or
      (not collection and definition.enum is defined)
    ) %}
    {%- if has_validation %}

    # Custom attribute writer method with validation
    # @param {{ attr|attribute_name }} [Object] Object to be assigned
    # @!visibility private
    def {{ attr|attribute_name }}=({{ attr|attribute_name }})
      {%- if not collection and definition.enum is defined %}
      validator = {{ config.moduleName }}::EnumAttributeValidator.new('{{ get_name(definition) }}', [{% for value in definition.enum %}{{ value|format_value }}{%- if not loop.last %}, {% endif %}{% endfor %}])
      unless validator.valid?({{ attr|attribute_name }})
        fail ArgumentError, "invalid value for \"{{ attr|attribute_name }}\", must be one of #{validator.allowable_values}."
      end
      {%- endif %}
      {%- if not definition.nullable and required %}
      if @{{ attr|attribute_name }}.nil?
        fail ArgumentError, 'invalid value for "{{ attr|attribute_name }}", {{ attr|attribute_name }} cannot be nil.'
      end
      {%- endif %}
      {%- if definition.maxLength is defined %}
      if {% if not required %}!{{ attr|attribute_name }}.nil? && {% endif %}{{ attr|attribute_name }}.to_s.length > {{ definition.maxLength }}
        fail ArgumentError, 'invalid value for "{{ attr|attribute_name }}", the character length must be smaller than or equal to {{ definition.maxLength }}.'
      end
      {%- endif %}
      {%- if definition.minLength is defined %}
      if {% if not required %}!{{ attr|attribute_name }}.nil? && {% endif %}{{ attr|attribute_name }}.to_s.length < {{ definition.minLength }}
        fail ArgumentError, 'invalid value for "{{ attr|attribute_name }}", the character length must be great than or equal to {{ definition.minLength }}.'
      end
      {%- endif %}
      {%- if definition.maximum is defined %}
      if {% if not required %}!{{ attr|attribute_name }}.nil? && {% endif %}{{ attr|attribute_name }} >{% if definition.exclusiveMaximum %}={% endif %} {{ definition.maximum }}
        fail ArgumentError, 'invalid value for "{{ attr|attribute_name }}", must be smaller than {% if not definition.exclusiveMaximum %}or equal to {% endif %}{{ definition.maximum }}.'
      end
      {%- endif %}
      {%- if definition.minimum is defined %}
      if {% if not required %}!{{ attr|attribute_name }}.nil? && {% endif %}{{ attr|attribute_name }} <{% if definition.exclusiveMinimum %}={% endif %} {{ definition.minimum }}
        fail ArgumentError, 'invalid value for "{{ attr|attribute_name }}", must be greater than {% if not definition.exclusiveMinimum %}or equal to {% endif %}{{ definition.minimum }}.'
      end
      {%- endif %}
      {%- if definition.pattern is defined %}
      pattern = Regexp.new({{ definition.pattern }})
      if {% if not required %}!{{ attr|attribute_name }}.nil? && {% endif %}{{ attr|attribute_name }} !~ pattern
        fail ArgumentError, "invalid value for \"{{ attr|attribute_name }}\", must conform to the pattern #{pattern}."
      end
      {%- endif %}
      {%- if definition.maxItems is defined %}
      if {% if not required %}!{{ attr|attribute_name }}.nil? && {% endif %}{{ attr|attribute_name }}.length > {{ definition.maxItems }}
        fail ArgumentError, 'invalid value for "{{ attr|attribute_name }}", number of items must be less than or equal to {{ definition.maxItems }}.'
      end
      {%- endif %}
      {%- if definition.minItems is defined %}
      if {% if not required %}!{{ attr|attribute_name }}.nil? && {% endif %}{{ attr|attribute_name }}.length < {{ definition.minItems }}
        fail ArgumentError, 'invalid value for "{{ attr|attribute_name }}", number of items must be greater than or equal to {{ definition.minItems }}.'
      end
      {%- endif %}
      @{{ attr|attribute_name }} = {{ attr|attribute_name }}
    end
    {%- endif %}
{%- endfor %}

    # Checks equality by comparing each attribute.
    # @param o [Object] Object to be compared
    # @!visibility private
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
{%- for attr in model.properties %}
          {{ attr|attribute_name }} == o.{{ attr|attribute_name }}{% if not loop.last %} &&{% endif %}
{%- endfor %}
    end

    # @see the `==` method
    # @param o [Object] Object to be compared
    # @!visibility private
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    # @!visibility private
    def hash
      [{% for attr in model.properties %}{{ attr|attribute_name }}{% if not loop.last %}, {% endif %}{% endfor %}].hash
    end

    # Builds the object from hash
    # @param attributes [Hash] Model attributes in the form of hash
    # @return [Object] Returns the model itself
    # @!visibility private
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param attributes [Hash] Model attributes in the form of hash
    # @return [Object] Returns the model itself
    # @!visibility private
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param type [string] Data type
    # @param value [string] Value to be deserialized
    # @return [Object] Deserialized data
    # @!visibility private
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when :Array
        # generic array, return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = {{ config.moduleName }}.const_get(type)
        res = klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
        if res.instance_of? {{ config.moduleName }}::UnparsedObject
          self._unparsed = true
        end
        res
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    # @!visibility private
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    # @!visibility private
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param value [Object] Any valid value
    # @return [Hash] Returns the value in the form of hash
    # @!visibility private
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end