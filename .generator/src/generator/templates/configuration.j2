=begin
{% include "api_info.j2" %}
=end

module {{ config.moduleName }}
  class Configuration
    # Defines url scheme
    attr_accessor :scheme

    # Defines url host
    attr_accessor :host

    # Defines url base path
    attr_accessor :base_path

    # Define server configuration index
    attr_accessor :server_index

    # Define server operation configuration index
    attr_accessor :server_operation_index

    # Default server variables
    attr_accessor :server_variables

    # Default server operation variables
    attr_accessor :server_operation_variables

    # Defines API keys used with API Key authentications.
    #
    # @return [Hash] key: parameter name, value: parameter value (API key)
    #
    # @example parameter name is "api_key", API key is "xxx" (e.g. "api_key=xxx" in query string)
    #   config.api_key['api_key'] = 'xxx'
    attr_accessor :api_key

    # Defines API key prefixes used with API Key authentications.
    #
    # @return [Hash] key: parameter name, value: API key prefix
    #
    # @example parameter name is "Authorization", API key prefix is "Token" (e.g. "Authorization: Token xxx" in headers)
    #   config.api_key_prefix['api_key'] = 'Token'
    attr_accessor :api_key_prefix

    # Defines the username used with HTTP basic authentication.
    #
    # @return [String]
    attr_accessor :username

    # Defines the password used with HTTP basic authentication.
    #
    # @return [String]
    attr_accessor :password

    # Defines the access token (Bearer) used with OAuth2.
    attr_accessor :access_token

    # Set this to enable/disable debugging. When enabled (set to true), HTTP request/response
    # details will be logged with `logger.debug` (see the `logger` attribute).
    # Default to false.
    #
    # @return [true, false]
    attr_accessor :debugging

    # Defines the logger used for debugging.
    # Default to `Rails.logger` (when in Rails) or logging to STDOUT.
    #
    # @return [#debug]
    attr_accessor :logger

    # Defines the temporary folder to store downloaded files
    # (for API endpoints that have file response).
    # Default to use `Tempfile`.
    #
    # @return [String]
    attr_accessor :temp_folder_path

    # The time limit for HTTP request in seconds.
    # Default to 0 (never times out).
    attr_accessor :timeout

    # Set this to false to skip client side validation in the operation.
    # Default to true.
    # @return [true, false]
    attr_accessor :client_side_validation

    # Keep track of the unstable operations, and if they have been enabled
    attr_accessor :unstable_operations

    ### TLS/SSL setting
    # Set this to false to skip verifying SSL certificate when calling API from https server.
    # Default to true.
    #
    # @note Do NOT set it to false in production code, otherwise you would face multiple types of cryptographic attacks.
    #
    # @return [true, false]
    attr_accessor :verify_ssl

    ### TLS/SSL setting
    # Set this to false to skip verifying SSL host name
    # Default to true.
    #
    # @note Do NOT set it to false in production code, otherwise you would face multiple types of cryptographic attacks.
    #
    # @return [true, false]
    attr_accessor :verify_ssl_host

    ### TLS/SSL setting
    # Set this to customize the certificate file to verify the peer.
    #
    # @return [String] the path to the certificate file
    #
    # @see The `cainfo` option of Typhoeus, `--cert` option of libcurl. Related source code:
    # https://github.com/typhoeus/typhoeus/blob/master/lib/typhoeus/easy_factory.rb#L145
    attr_accessor :ssl_ca_cert

    ### TLS/SSL setting
    # Client certificate file (for client certificate)
    attr_accessor :cert_file

    ### TLS/SSL setting
    # Client private key file (for client certificate)
    attr_accessor :key_file

    # Set this to customize parameters encoding of array parameter with multi collectionFormat.
    # Default to nil.
    #
    # @see The params_encoding option of Ethon. Related source code:
    # https://github.com/typhoeus/ethon/blob/master/lib/ethon/easy/queryable.rb#L96
    attr_accessor :params_encoding

    attr_accessor :inject_format

    attr_accessor :force_ending_format

    # Set this to add accept encoding header for compression
    attr_accessor :compress

    def initialize
      {%- set default_server = openapi.servers[0]|format_server %}
      @scheme = '{{ default_server.scheme }}'
      @host = '{{ default_server.netloc }}'
      @base_path = '{{ default_server.path }}'
      @server_index = 0
      @server_operation_index = {}
      @server_variables = {}
      @server_operation_variables = {}
      @api_key = {}
      @api_key_prefix = {}
      @timeout = nil
      @client_side_validation = true
      @verify_ssl = true
      @verify_ssl_host = true
      @params_encoding = nil
      @cert_file = nil
      @key_file = nil
      @debugging = false
      @inject_format = false
      @force_ending_format = false
      @compress = true
      @logger = defined?(Rails) ? Rails.logger : Logger.new(STDOUT)
      @unstable_operations = {
      {%- for path in openapi.paths.values() %}
      {%- for operation in path.values() %}
      {%- if "x-unstable" in operation %}
            {{ operation.operationId|snake_case }}: false,
      {%- endif %}
      {%- endfor %}
      {%- endfor %}
      }
      @server_variables[:site] = ENV['DD_SITE'] if ENV.key? 'DD_SITE'
      {%- for name, schema in openapi.components.securitySchemes.items() if "x-env-name" in schema and schema.in == "header" and schema.type == "apiKey" %}
      @api_key['{{ name }}'] = ENV['{{ schema["x-env-name"] }}'] if ENV.key? '{{ schema["x-env-name"] }}'
      {%- endfor %}

      yield(self) if block_given?
    end

    # The default Configuration object.
    def self.default
      @@default ||= Configuration.new
    end

    def configure
      yield(self) if block_given?
    end

    def scheme=(scheme)
      # remove :// from scheme
      @scheme = scheme.sub(/:\/\//, '')
    end

    def host=(host)
      # remove http(s):// and anything after a slash
      @host = host.sub(/https?:\/\//, '').split('/').first
    end

    def base_path=(base_path)
      # Add leading and trailing slashes to base_path
      @base_path = "/#{base_path}".gsub(/\/+/, '/')
      @base_path = '' if @base_path == '/'
    end

    # Returns base URL for specified operation based on server settings
    def base_url(operation = nil)
      index = server_operation_index.fetch(operation, server_index)
      return "#{scheme}://#{[host, base_path].join('/').gsub(/\/+/, '/')}".sub(/\/+\z/, '') if index == nil

      server_url(index, server_operation_variables.fetch(operation, server_variables), operation_server_settings[operation])
    end

    # Gets API key (with prefix if set).
    # @param [String] param_name the parameter name of API key auth
    def api_key_with_prefix(param_name, param_alias = nil)
      key = @api_key[param_name]
      key = @api_key.fetch(param_alias, key) unless param_alias.nil?
      if @api_key_prefix[param_name]
        "#{@api_key_prefix[param_name]} #{key}"
      else
        key
      end
    end

    # Gets Basic Auth token string
    def basic_auth_token
      'Basic ' + ["#{username}:#{password}"].pack('m').delete("\r\n")
    end

    # Returns Auth Settings hash for api client.
    def auth_settings
      {
{%- for name, schema in openapi.components.securitySchemes.items() %}
{%- if schema.type == "apiKey" %}
        {{ name }}:
          {
            type: 'api_key',
            in: '{{ schema.in }}',
            key: '{{ schema.name }}',
            value: api_key_with_prefix('{{ name }}'{% if "x-auth-id-alias" in schema %}, '{{ schema["x-auth-id-alias"] }}'{% endif %})
          },
{%- elif schema.type == "http" and schema.scheme == "basic" %}
        {{name}}:
          {
            type: 'basic',
            in: 'header',
            key: 'Authorization',
            value: basic_auth_token
          },
{%- elif schema.type == "http" and schema.scheme == "bearer" %}
        {{name}}:
          {
            type: 'bearer',
            in: 'header',
            {% if schema.bearerFormat %}
            format: '{{ schema.bearerFormat }}',
            {% endif %}
            key: 'Authorization',
            value: "Bearer #{access_token}"
          },
{%- elif schema.type == "oauth2" %}
        {{name}}:
          {
            type: 'oauth2',
            in: 'header',
            key: 'Authorization',
            value: "Bearer #{access_token}"
          },
{%- endif %}
{%- endfor %}
      }
    end

    # Returns an array of Server setting
{%- macro server_configuration(server) -%}
{
  url: "{{ server.url }}",
  description: "{{ server.description|default("No description provided") }}",
  variables: {
  {%- for name, variable in server.get("variables", {}).items() %}
    {{ name }}: {
      description: "{{ variable.description|default("No description provided") }}",
      default_value: "{{ variable.default }}",
      {%- for value in variable.enum %}
      {%- if loop.first %}
      enum_values: [
      {%- endif %}
        "{{ value }}"{% if not loop.last %},{% endif %}
      {%- if loop.last %}
      ]
      {%- endif %}
      {%- endfor %}
    }{%- if not loop.last %},{%- endif %}
  {%- if loop.last %}
  }
  {%- endif %}
  {%- endfor%}
}
{%- endmacro %}
    def server_settings
      [
      {%- for server in openapi.servers %}
        {{ server_configuration(server)|indent(8) }}{% if not loop.last %},{% endif %}
      {%- endfor %}
      ]
    end

    def operation_server_settings
      {
        {%- for path in openapi.paths.values() %}
        {%- for operation in path.values() %}
        {%- for server in operation.servers %}
        {%- if loop.first %}
        {{ operation.operationId|snake_case }}: [
        {%- endif %}
          {{ server_configuration(server)|indent(10) }}{% if not loop.last %},{% endif %}
        {%- if loop.last %}  
        ],
        {%- endif %}
        {%- endfor %}
        {%- endfor %}
        {%- endfor %}
      }
    end

    # Returns URL based on server settings
    #
    # @param index array index of the server settings
    # @param variables hash of variable and the corresponding value
    def server_url(index, variables = {}, servers = nil)
      servers = server_settings if servers == nil

      # check array index out of bound
      if (index < 0 || index >= servers.size)
        fail ArgumentError, "Invalid index #{index} when selecting the server. Must be less than #{servers.size}"
      end

      server = servers[index]
      url = server[:url]

      return url unless server.key? :variables

      # go through variable and assign a value
      server[:variables].each do |name, variable|
        if variables.key?(name)
          if (!server[:variables][name].key?(:enum_values) || server[:variables][name][:enum_values].include?(variables[name]))
            url.gsub! "{" + name.to_s + "}", variables[name]
          else
            fail ArgumentError, "The variable `#{name}` in the server URL has invalid value #{variables[name]}. Must be #{server[:variables][name][:enum_values]}."
          end
        else
          # use default value
          url.gsub! "{" + name.to_s + "}", server[:variables][name][:default_value]
        end
      end

      url
    end
  end

  class UnparsedObject
    # Defines unparsed object
    attr_accessor :data

    def initialize(data)
      @data = data
    end

    def to_hash
      self.data
    end
  end

end
