  module {{ name }}
    class << self
      include BaseOneOfModel
      {# keep new line #}

      # List of class defined in oneOf (OpenAPI v3)
      def openapi_one_of
        [
      {%- for schema in model.oneOf %}
          :'{{ get_name(schema) }}'{% if not loop.last %},{% endif %}
      {%- endfor %}
        ]
      end

      {%- if model.discriminator %}
      {%- if model.discriminator.propertyName %}
      # Discriminator's property name (OpenAPI v3)
      def openapi_discriminator_name
        :'{{ model.discriminator.propertyName}}'
      end

      {%- endif %}
      {# TODO add support for discriminator mapping (OpenAPI v3)
      {{#mappedModels}}
      {{#-first}}
      # Discriminator's mapping (OpenAPI v3)
      def openapi_discriminator_mapping
        {
      {{/-first}}
          :'{{{mappingName}}}' => :'{{{modelName}}}'{{^-last}},{{/-last}}
      {{#-last}}
        }
      end

      {{/-last}}
      {{/mappedModels}}
      #}
      {%- endif %}
      # Builds the object
      # @param [Mixed] Data to be matched against the list of oneOf items
      # @return [Object] Returns the model or the data itself
      def build(data)
      {%- if model.discriminator %}
        discriminator_value = data[openapi_discriminator_name]
        return nil unless discriminator_value
      {# TODO
      {{#mappedModels}}
      {{#-first}}

        klass = openapi_discriminator_mapping[discriminator_value.to_sym]
        return nil unless klass

        {{moduleName}}.const_get(klass).build_from_hash(data)
      {{/-first}}
      {{/mappedModels}}
      {{^mappedModels}}
        {{moduleName}}.const_get(discriminator_value).build_from_hash(data)
      {{/mappedModels}}
      #}
      {%- else %}
        # Go through the list of oneOf items and attempt to identify the appropriate one.
        # Note:
        # - We do not attempt to check whether exactly one item matches.
        # - No advanced validation of types in some cases (e.g. "x: { type: string }" will happily match { x: 123 })
        #   due to the way the deserialization is made in the base_object template (it just casts without verifying).
        # - TODO: scalar values are de facto behaving as if they were nullable.
        # - TODO: logging when debugging is set.
        openapi_one_of.each do |klass|
          begin
            next if klass == :AnyType # "nullable: true"
            typed_data = find_and_cast_into_type(klass, data)
            next if typed_data._unparsed
            return typed_data if typed_data
          rescue # rescue all errors so we keep iterating even if the current item lookup raises
          end
        end

        if openapi_one_of.include?(:AnyType)
          data
        else
          self._unparsed = true
          {{ config.moduleName }}::UnparsedObject.new(data)
        end

      {%- endif %}
      end
      {%- if not model.discriminator %}

      private

      SchemaMismatchError = Class.new(StandardError)

      # Note: 'File' is missing here because in the regular case we get the data _after_ a call to JSON.parse.
      def find_and_cast_into_type(klass, data)
        return if data.nil?

        case klass.to_s
        when 'Boolean'
          return data if data.instance_of?(TrueClass) || data.instance_of?(FalseClass)
        when 'Float'
          return data if data.instance_of?(Float)
        when 'Integer'
          return data if data.instance_of?(Integer)
        when 'Time'
          return Time.parse(data)
        when 'Date'
          return Date.parse(data)
        when 'String'
          return data if data.instance_of?(String)
        when 'Object' # "type: object"
          return data if data.instance_of?(Hash)
        when /\AArray<(?<sub_type>.+)>\z/ # "type: array"
          if data.instance_of?(Array)
            sub_type = Regexp.last_match[:sub_type]
            return data.map { |item| find_and_cast_into_type(sub_type, item) }
          end
        when /\AHash<String, (?<sub_type>.+)>\z/ # "type: object" with "additionalProperties: { ... }"
          if data.instance_of?(Hash) && data.keys.all? { |k| k.instance_of?(Symbol) || k.instance_of?(String) }
            sub_type = Regexp.last_match[:sub_type]
            return data.each_with_object({}) { |(k, v), hsh| hsh[k] = find_and_cast_into_type(sub_type, v) }
          end
        else # model
          const = {{ config.moduleName }}.const_get(klass)
          if const
            if const.respond_to?(:openapi_one_of) # nested oneOf model
              model = const.build(data)
              return model if model
            else
              # raise if data contains keys that are not known to the model
              raise unless (data.keys - const.acceptable_attributes).empty?
              model = const.build_from_hash(data)
              return model if model && model.valid?
            end
          end
        end

        raise # if no match by now, raise
      rescue
        raise SchemaMismatchError, "#{data} doesn't match the #{klass} type"
      end
      {%- endif %}
    end
  end
