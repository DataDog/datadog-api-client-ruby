=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require_relative '../features/support/env.rb'
require 'datadog/ci'
require 'webmock/rspec'

Datadog.configure do |c|
  c.ci.enabled = true
  c.ci.instrument :rspec
  c.tracing.instrument :ethon
end


module Helpers
  def generate_unique_name(suffix = "")
    "#{@unique}#{suffix}"
  end

  def load_fixture(fixture)
    File.read(File.join(File.dirname(File.expand_path(__FILE__)), "v#{@api_version}", "fixtures", fixture))
  end
end

# The following  was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|

  config.include Helpers

  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
    mocks.verify_doubled_constant_names = true
  end

  config.around(:example) do |example|
    name = example.metadata[:file_path].delete_prefix("./").chomp('.rb') + "/" + example.metadata[:full_description].gsub(/[^A-Za-z0-9]+/, '_')[0..100]
    VCR.use_cassette(name, :record_on_error => false) do |cassette|
      if ENV["RECORD"] == "true"
        # Delete old cassette when recording, so that old interactions are cleaned out
        # Otherwise it causes issues with the time freezing, as the old interactions recorded_at value never changes,
        # so cassette.originally_recorded_at never changes. Also cassette files grow forever.
        File.delete(cassette.file) if File.exist?(cassette.file)
      end
      Timecop.freeze(use_real_time? ? Time.now : cassette.originally_recorded_at) do
        example.run
      end
    end
  end

  config.before(:example) do |example|
    unless example.metadata[:skip_before]
      now = Time.now
      name = example.metadata[:full_description].gsub(/[^A-Za-z0-9]+/, '-')[0..100]
      @unique ||= "ruby-#{name}-#{now.to_i}"
      api = Object.const_get("DatadogAPIClient")
      @configuration = api::Configuration.new
      @configuration.api_key = ENV["DD_TEST_CLIENT_API_KEY"]
      @configuration.application_key = ENV["DD_TEST_CLIENT_APP_KEY"]
      @configuration.debugging = (!ENV["DEBUG"].nil? and ENV["DEBUG"] != "false")
      @configuration.configure do |c|
        if ENV.key? 'DD_TEST_SITE' then
          c.server_index = 2
          c.server_variables[:site] = ENV['DD_TEST_SITE']
        end
      end
      @api_client = api::APIClient.new @configuration
    end
  end

  config.example_status_persistence_file_path = 'failed.txt'

  # The settings below are suggested to provide a good initial experience
  # with RSpec, but feel free to customize to your heart's content.
=begin
  # These two settings work together to allow you to limit a spec run
  # to individual examples or groups you care about by tagging them with
  # `:focus` metadata. When nothing is tagged with `:focus`, all examples
  # get run.
  config.filter_run :focus
  config.run_all_when_everything_filtered = true

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
  config.disable_monkey_patching!

  # This setting enables warnings. It's recommended, but in some cases may
  # be too noisy due to issues in dependencies.
  config.warnings = true

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = 'doc'
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
=end
end
