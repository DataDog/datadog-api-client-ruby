=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://openapi-generator.tech

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'spec_helper'
require 'json'

# Unit tests for DatadogAPIClient::V2::UsersAPI
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'UsersAPI' do
  before do
    # run before each test
    @api_instance = DatadogAPIClient::V2::UsersAPI.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UsersAPI' do
    it 'should create an instance of UsersAPI' do
      expect(@api_instance).to be_instance_of(DatadogAPIClient::V2::UsersAPI)
    end
  end

  # unit tests for create_user
  # Create a user
  # Create a user for your organization.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [UserResponse]
  describe 'create_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disable_user
  # Disable a user
  # Disable a user. Can only be used with an application key belonging to an administrator user.
  # @param user_id The ID of the user.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'disable_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invitation
  # Get a user invitation
  # Returns a single user invitation by its UUID.
  # @param user_invitation_uuid The UUID of the user invitation.
  # @param [Hash] opts the optional parameters
  # @return [UserInvitationResponse]
  describe 'get_invitation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user
  # Get user details
  # Get a user in the organization specified by the user’s &#x60;user_id&#x60;.
  # @param user_id The ID of the user.
  # @param [Hash] opts the optional parameters
  # @return [UserResponse]
  describe 'get_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_user_organizations
  # Get a user organization
  # Get a user organization. Returns the user information and all organizations joined by this user.
  # @param user_id The ID of the user.
  # @param [Hash] opts the optional parameters
  # @return [UserResponse]
  describe 'list_user_organizations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_user_permissions
  # Get a user permissions
  # Get a user permission set. Returns a list of the user’s permissions granted by the associated user&#39;s roles.
  # @param user_id The ID of the user.
  # @param [Hash] opts the optional parameters
  # @return [PermissionsResponse]
  describe 'list_user_permissions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_users
  # List all users
  # Get the list of all users in the organization. This list includes all users even if they are deactivated or unverified.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size Size for a given page.
  # @option opts [Integer] :page_number Specific page number to return.
  # @option opts [String] :sort User attribute to order results by. Sort order is ascending by default. Sort order is descending if the field is prefixed by a negative sign, for example &#x60;sort&#x3D;-name&#x60;. Options: &#x60;name&#x60;, &#x60;modified_at&#x60;, &#x60;user_count&#x60;.
  # @option opts [QuerySortOrder] :sort_dir Direction of sort. Options: &#x60;asc&#x60;, &#x60;desc&#x60;.
  # @option opts [String] :filter Filter all users by the given string. Defaults to no filtering.
  # @option opts [String] :filter_status Filter on status attribute. Comma separated list, with possible values &#x60;Active&#x60;, &#x60;Pending&#x60;, and &#x60;Disabled&#x60;. Defaults to no filtering.
  # @return [UsersResponse]
  describe 'list_users test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_invitations
  # Send invitation emails
  # Sends emails to one or more users inviting them to join the organization.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [UserInvitationsResponse]
  describe 'send_invitations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_user
  # Update a user
  # Edit a user. Can only be used with an application key belonging to an administrator user.
  # @param user_id The ID of the user.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [UserResponse]
  describe 'update_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
