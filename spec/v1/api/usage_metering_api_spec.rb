=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://openapi-generator.tech

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'spec_helper'
require 'json'

# Unit tests for DatadogAPIClient::V1::UsageMeteringAPI
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'UsageMeteringAPI' do
  before do
    # run before each test
    @api_instance = DatadogAPIClient::V1::UsageMeteringAPI.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UsageMeteringAPI' do
    it 'should create an instance of UsageMeteringAPI' do
      expect(@api_instance).to be_instance_of(DatadogAPIClient::V1::UsageMeteringAPI)
    end
  end

  # unit tests for get_daily_custom_reports
  # Get the list of available daily custom reports
  # Get daily custom reports.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of files to return in the response. &#x60;[default&#x3D;60]&#x60;.
  # @option opts [Integer] :page_number The identifier of the first page to return. This parameter is used for the pagination feature &#x60;[default&#x3D;0]&#x60;.
  # @option opts [UsageSortDirection] :sort_dir The direction to sort by: &#x60;[desc, asc]&#x60;.
  # @option opts [UsageSort] :sort The field to sort by: &#x60;[computed_on, size, start_date, end_date]&#x60;.
  # @return [UsageCustomReportsResponse]
  describe 'get_daily_custom_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_hourly_usage_attribution
  # Get Hourly Usage Attribution
  # Get Hourly Usage Attribution.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param usage_type Usage type to retrieve.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @option opts [String] :next_record_id List following results with a next_record_id provided in the previous query.
  # @option opts [String] :tag_breakdown_keys Comma separated list of tags used to group usage. If no value is provided the usage will not be broken down by tags.
  # @return [HourlyUsageAttributionResponse]
  describe 'get_hourly_usage_attribution test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_incident_management
  # Get hourly usage for incident management
  # Get hourly usage for incident management.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @return [UsageIncidentManagementResponse]
  describe 'get_incident_management test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ingested_spans
  # Get hourly usage for ingested spans
  # Get hourly usage for ingested spans.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @return [UsageIngestedSpansResponse]
  describe 'get_ingested_spans test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_monthly_custom_reports
  # Get the list of available monthly custom reports
  # Get monthly custom reports.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of files to return in the response &#x60;[default&#x3D;60].&#x60;
  # @option opts [Integer] :page_number The identifier of the first page to return. This parameter is used for the pagination feature &#x60;[default&#x3D;0]&#x60;.
  # @option opts [UsageSortDirection] :sort_dir The direction to sort by: &#x60;[desc, asc]&#x60;.
  # @option opts [UsageSort] :sort The field to sort by: &#x60;[computed_on, size, start_date, end_date]&#x60;.
  # @return [UsageCustomReportsResponse]
  describe 'get_monthly_custom_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_monthly_usage_attribution
  # Get Monthly Usage Attribution
  # Get Monthly Usage Attribution.
  # @param start_month Datetime in ISO-8601 format, UTC, precise to month: &#x60;[YYYY-MM]&#x60; for usage beginning in this month. Maximum of 15 months ago.
  # @param fields Comma-separated list of usage types to return, or &#x60;*&#x60; for all usage types.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_month Datetime in ISO-8601 format, UTC, precise to month: &#x60;[YYYY-MM]&#x60; for usage ending this month.
  # @option opts [UsageSortDirection] :sort_direction The direction to sort by: &#x60;[desc, asc]&#x60;.
  # @option opts [MonthlyUsageAttributionSupportedMetrics] :sort_name The field to sort by.
  # @option opts [String] :tag_breakdown_keys Comma separated list of tags used to group usage. If no value is provided the usage will not be broken down by tags.
  # @option opts [String] :next_record_id List following results with a next_record_id provided in the previous query.
  # @return [MonthlyUsageAttributionResponse]
  describe 'get_monthly_usage_attribution test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_specified_daily_custom_reports
  # Get specified daily custom reports
  # Get specified daily custom reports.
  # @param report_id Date of the report in the format &#x60;YYYY-MM-DD&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [UsageSpecifiedCustomReportsResponse]
  describe 'get_specified_daily_custom_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_specified_monthly_custom_reports
  # Get specified monthly custom reports
  # Get specified monthly custom reports.
  # @param report_id Date of the report in the format &#x60;YYYY-MM-DD&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [UsageSpecifiedCustomReportsResponse]
  describe 'get_specified_monthly_custom_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_analyzed_logs
  # Get hourly usage for analyzed logs
  # Get hourly usage for analyzed logs (Security Monitoring).
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @return [UsageAnalyzedLogsResponse]
  describe 'get_usage_analyzed_logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_attribution
  # Get Usage Attribution
  # Get Usage Attribution.
  # @param start_month Datetime in ISO-8601 format, UTC, precise to month: &#x60;[YYYY-MM]&#x60; for usage beginning in this month. Maximum of 15 months ago.
  # @param fields Comma-separated list of usage types to return, or &#x60;*&#x60; for all usage types.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_month Datetime in ISO-8601 format, UTC, precise to month: &#x60;[YYYY-MM]&#x60; for usage ending this month.
  # @option opts [UsageSortDirection] :sort_direction The direction to sort by: &#x60;[desc, asc]&#x60;.
  # @option opts [UsageAttributionSort] :sort_name The field to sort by.
  # @option opts [Boolean] :include_descendants Include child org usage in the response. Defaults to false.
  # @option opts [Integer] :offset Number of records to skip before beginning to return.
  # @option opts [Integer] :limit Maximum number of records to be returned.
  # @return [UsageAttributionResponse]
  describe 'get_usage_attribution test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_audit_logs
  # Get hourly usage for audit logs
  # Get hourly usage for audit logs.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @return [UsageAuditLogsResponse]
  describe 'get_usage_audit_logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_billable_summary
  # Get billable usage across your account
  # Get billable usage across your account.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :month Datetime in ISO-8601 format, UTC, precise to month: &#x60;[YYYY-MM]&#x60; for usage starting this month.
  # @return [UsageBillableSummaryResponse]
  describe 'get_usage_billable_summary test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_cloud_security_posture_management
  # Get hourly usage for CSPM
  # Get hourly usage for Cloud Security Posture Management (CSPM).
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @return [UsageCloudSecurityPostureManagementResponse]
  describe 'get_usage_cloud_security_posture_management test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_cws
  # Get hourly usage for Cloud Workload Security
  # Get hourly usage for Cloud Workload Security.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @return [UsageCWSResponse]
  describe 'get_usage_cws test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_dbm
  # Get hourly usage for Database Monitoring
  # Get hourly usage for Database Monitoring
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @return [UsageDBMResponse]
  describe 'get_usage_dbm test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_fargate
  # Get hourly usage for Fargate
  # Get hourly usage for [Fargate](https://docs.datadoghq.com/integrations/ecs_fargate/).
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending **before** this hour.
  # @return [UsageFargateResponse]
  describe 'get_usage_fargate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_hosts
  # Get hourly usage for hosts and containers
  # Get hourly usage for hosts and containers.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending **before** this hour.
  # @return [UsageHostsResponse]
  describe 'get_usage_hosts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_indexed_spans
  # Get hourly usage for indexed spans
  # Get hourly usage for indexed spans.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @return [UsageIndexedSpansResponse]
  describe 'get_usage_indexed_spans test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_internet_of_things
  # Get hourly usage for IoT
  # Get hourly usage for IoT.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @return [UsageIoTResponse]
  describe 'get_usage_internet_of_things test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_lambda
  # Get hourly usage for Lambda
  # Get hourly usage for lambda.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending **before** this hour.
  # @return [UsageLambdaResponse]
  describe 'get_usage_lambda test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_logs
  # Get hourly usage for Logs
  # Get hourly usage for logs.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending **before** this hour.
  # @return [UsageLogsResponse]
  describe 'get_usage_logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_logs_by_index
  # Get hourly usage for Logs by Index
  # Get hourly usage for logs by index.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending **before** this hour.
  # @option opts [Array<String>] :index_name Comma-separated list of log index names.
  # @return [UsageLogsByIndexResponse]
  describe 'get_usage_logs_by_index test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_logs_by_retention
  # Get hourly logs usage by retention
  # Get hourly usage for indexed logs by retention period.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @return [UsageLogsByRetentionResponse]
  describe 'get_usage_logs_by_retention test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_network_flows
  # Get hourly usage for Network Flows
  # Get hourly usage for network flows.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @return [UsageNetworkFlowsResponse]
  describe 'get_usage_network_flows test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_network_hosts
  # Get hourly usage for Network Hosts
  # Get hourly usage for network hosts.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending **before** this hour.
  # @return [UsageNetworkHostsResponse]
  describe 'get_usage_network_hosts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_profiling
  # Get hourly usage for profiled hosts
  # Get hourly usage for profiled hosts.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @return [UsageProfilingResponse]
  describe 'get_usage_profiling test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_rum_sessions
  # Get hourly usage for RUM Sessions
  # Get hourly usage for [RUM](https://docs.datadoghq.com/real_user_monitoring/) Sessions.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending **before** this hour.
  # @option opts [String] :type RUM type: &#x60;[browser, mobile]&#x60;. Defaults to &#x60;browser&#x60;.
  # @return [UsageRumSessionsResponse]
  describe 'get_usage_rum_sessions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_rum_units
  # Get hourly usage for RUM Units
  # Get hourly usage for [RUM](https://docs.datadoghq.com/real_user_monitoring/) Units.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending **before** this hour.
  # @return [UsageRumUnitsResponse]
  describe 'get_usage_rum_units test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_sds
  # Get hourly usage for Sensitive Data Scanner
  # Get hourly usage for Sensitive Data Scanner.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @return [UsageSDSResponse]
  describe 'get_usage_sds test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_snmp
  # Get hourly usage for SNMP devices
  # Get hourly usage for SNMP devices.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: &#x60;[YYYY-MM-DDThh]&#x60; for usage ending **before** this hour.
  # @return [UsageSNMPResponse]
  describe 'get_usage_snmp test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_summary
  # Get usage across your multi-org account
  # Get usage across your multi-org account. You must have the multi-org feature enabled.
  # @param start_month Datetime in ISO-8601 format, UTC, precise to month: &#x60;[YYYY-MM]&#x60; for usage beginning in this month. Maximum of 15 months ago.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_month Datetime in ISO-8601 format, UTC, precise to month: &#x60;[YYYY-MM]&#x60; for usage ending this month.
  # @option opts [Boolean] :include_org_details Include usage summaries for each sub-org.
  # @return [UsageSummaryResponse]
  describe 'get_usage_summary test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_synthetics
  # Get hourly usage for Synthetics Checks
  # Get hourly usage for [Synthetics checks](https://docs.datadoghq.com/synthetics/).
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending **before** this hour.
  # @return [UsageSyntheticsResponse]
  describe 'get_usage_synthetics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_synthetics_api
  # Get hourly usage for Synthetics API Checks
  # Get hourly usage for [synthetics API checks](https://docs.datadoghq.com/synthetics/).
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending **before** this hour.
  # @return [UsageSyntheticsAPIResponse]
  describe 'get_usage_synthetics_api test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_synthetics_browser
  # Get hourly usage for Synthetics Browser Checks
  # Get hourly usage for synthetics browser checks.
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending **before** this hour.
  # @return [UsageSyntheticsBrowserResponse]
  describe 'get_usage_synthetics_browser test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_timeseries
  # Get hourly usage for custom metrics
  # Get hourly usage for [custom metrics](https://docs.datadoghq.com/developers/metrics/custom_metrics/).
  # @param start_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage beginning at this hour.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :end_hr Datetime in ISO-8601 format, UTC, precise to hour: [YYYY-MM-DDThh] for usage ending **before** this hour.
  # @return [UsageTimeseriesResponse]
  describe 'get_usage_timeseries test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_usage_top_avg_metrics
  # Get all custom metrics by hourly average
  # Get all [custom metrics](https://docs.datadoghq.com/developers/metrics/custom_metrics/) by hourly average. Use the month parameter to get a month-to-date data resolution or use the day parameter to get a daily resolution. One of the two is required, and only one of the two is allowed.
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :month Datetime in ISO-8601 format, UTC, precise to month: [YYYY-MM] for usage beginning at this hour. (Either month or day should be specified, but not both)
  # @option opts [Time] :day Datetime in ISO-8601 format, UTC, precise to day: [YYYY-MM-DD] for usage beginning at this hour. (Either month or day should be specified, but not both)
  # @option opts [Array<String>] :names Comma-separated list of metric names.
  # @option opts [Integer] :limit Maximum number of results to return (between 1 and 5000) - defaults to 500 results if limit not specified.
  # @option opts [String] :next_record_id List following results with a next_record_id provided in the previous query.
  # @return [UsageTopAvgMetricsResponse]
  describe 'get_usage_top_avg_metrics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
