=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'json'

# Unit tests for DatadogAPIClient::V1::DashboardsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DashboardsApi' do
  before(:context) do
    # run before each test
    @configuration = DatadogAPIClient::V1::Configuration.new
    @configuration.api_key["apiKeyAuth"] = ENV["DD_TEST_CLIENT_API_KEY"]
    @configuration.api_key["appKeyAuth"] = ENV["DD_TEST_CLIENT_APP_KEY"]
    @configuration.debugging = (!ENV["DEBUG"].nil? and ENV["DEBUG"] != false)
    @api_client = DatadogAPIClient::V1::ApiClient.new @configuration
    @api = DatadogAPIClient::V1::DashboardsApi.new @api_client
  end

  after do
    # run after each test
  end

  describe 'dashboards api test' do
    it 'dashboards lifecycle' do
      # Create a Dashboard with each available Widget type

      # TODO: Create an SLO to reference in the SLO widget
      # eventSLO.setName(getUniqueEntityName());
      # SLOListResponse sloResp = sloApi.createSLO().body(eventSLO).execute();
      # ServiceLevelObjective slo = sloResp.getData().get(0);
      # deleteSLO = slo.getId();

      # Add widgets to this list and the created dashboard to have them dynamically tested against the "get" call
      ordered_widget_list = Set.new
      free_widget_list = Set.new

      # Alert Graph Widget
      alert_graph_definition = DatadogAPIClient::V1::AlertGraphWidgetDefinition.new({
        alert_id: "1234",
        viz_type: DatadogAPIClient::V1::WidgetVizType::TIMESERIES,
        title: "Test Alert Graph Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FIFTEEN_MINUTES
        })
      })
      alert_graph_widget = DatadogAPIClient::V1::Widget.new({ definition: alert_graph_definition })
      ordered_widget_list.add(alert_graph_widget)

      dashboard = DatadogAPIClient::V1::Dashboard.new({
        layout_type: DatadogAPIClient::V1::DashboardLayoutType::ORDERED,
        widgets: [alert_graph_widget],
        title: @unique + "-ordered",
        description: "Test dashboard for Ruby client",
        is_read_only: false,
        notify_list: ["test@datadoghq.com"]
      })

      # Create ordered dashboard with all expected fields
      response = @api.create_dashboard(dashboard)

      # Assert the get response for this dashboard matches the create response
      get_response = @api.get_dashboard(response.id)
      expect(get_response).to eq(response)
    end
  end
end
