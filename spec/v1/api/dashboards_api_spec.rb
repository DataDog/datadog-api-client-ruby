=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'json'

# Unit tests for DatadogAPIClient::V1::DashboardsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DashboardsApi' do
  before(:example) do
    # run before each test
    @configuration = DatadogAPIClient::V1::Configuration.new
    @configuration.api_key["apiKeyAuth"] = ENV["DD_TEST_CLIENT_API_KEY"]
    @configuration.api_key["appKeyAuth"] = ENV["DD_TEST_CLIENT_APP_KEY"]
    @configuration.debugging = (!ENV["DEBUG"].nil? and ENV["DEBUG"] != false)
    @api_client = DatadogAPIClient::V1::ApiClient.new @configuration
    @api = DatadogAPIClient::V1::DashboardsApi.new @api_client
    @undo = Array.new
  end

  after(:example) do
    # run after each test
    @undo.reverse_each do |proc|
      begin
        proc.call
      rescue DatadogAPIClient::V1::ApiError => e
        puts "Error undoing operation: #{e.message}"
      end
    end
  end

  describe 'dashboards api test' do
    it 'dashboards lifecycle' do
      # Create a Dashboard with each available Widget type

      # Create an SLO to reference in the SLO widget
      slo_api = DatadogAPIClient::V1::ServiceLevelObjectivesApi.new @api_client
      event_slo = DatadogAPIClient::V1::ServiceLevelObjectiveRequest.new({
        name: @unique,
        type: DatadogAPIClient::V1::SLOType::METRIC,
        description: "Make sure we don't have too many failed HTTP responses",
        thresholds: [DatadogAPIClient::V1::SLOThreshold.new({
          timeframe: DatadogAPIClient::V1::SLOTimeframe::SEVEN_DAYS,
          target: 95.0,
          warning: 98.0
        })],
        query: DatadogAPIClient::V1::ServiceLevelObjectiveQuery.new({
          numerator: "default(sum:non_existant_metric{*}.as_count(), 1)",
          denominator: "default(sum:non_existant_metric{*}.as_count(), 2)"
        })
      })
      slo_resp = slo_api.create_slo(event_slo)
      slo = slo_resp.data[0]
      @undo << Proc.new {
        slo_api.delete_slo(slo.id, { force: true })
      }

      # Add widgets to this list and the created dashboard to have them dynamically tested against the "get" call
      ordered_widget_list = Set.new
      free_widget_list = Set.new

      # Alert Graph Widget
      alert_graph_definition = DatadogAPIClient::V1::AlertGraphWidgetDefinition.new({
        alert_id: "1234",
        viz_type: DatadogAPIClient::V1::WidgetVizType::TIMESERIES,
        title: "Test Alert Graph Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FIFTEEN_MINUTES
        })
      })
      alert_graph_widget = DatadogAPIClient::V1::Widget.new({ definition: alert_graph_definition })
      ordered_widget_list.add(alert_graph_widget)

      # Alert Value Widget
      alert_value_definition = DatadogAPIClient::V1::AlertValueWidgetDefinition.new({
        alert_id: "1234",
        precision: 2,
        unit: "ms",
        title_size: "12",
        text_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title: "Test Alert Value Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER
      })
      alert_value_widget = DatadogAPIClient::V1::Widget.new({
        definition: alert_value_definition
      })
      ordered_widget_list.add(alert_value_widget)

      # Change Widget
      change_widget_definition = DatadogAPIClient::V1::ChangeWidgetDefinition.new({
        title: "Test Change Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FIFTEEN_MINUTES
        }),
        custom_links: [DatadogAPIClient::V1::WidgetCustomLink.new({
          label: "Test Custom Link label",
          link: "https://app.datadoghq.com/dashboard/lists"
        })],
        requests: [DatadogAPIClient::V1::ChangeWidgetRequest.new({
          q: "avg:system.load.1{*}",
          change_type: DatadogAPIClient::V1::WidgetChangeType::ABSOLUTE,
          compare_to: DatadogAPIClient::V1::WidgetCompareTo::HOUR_BEFORE,
          increase_good: true,
          order_by: DatadogAPIClient::V1::WidgetOrderBy::CHANGE,
          order_dir: DatadogAPIClient::V1::WidgetSort::ASCENDING,
          show_present: true
        })]
      })

      change_widget = DatadogAPIClient::V1::Widget.new({
        definition: change_widget_definition
      })
      ordered_widget_list.add(change_widget)

      # Check Status Widget
      check_status_widget_definition = DatadogAPIClient::V1::CheckStatusWidgetDefinition.new({
        check: "service_check.up",
        grouping: DatadogAPIClient::V1::WidgetGrouping::CHECK,
        group: "*",
        tags: ["foo:bar"],
        group_by: ["bar"],
        title: "Test Check Status Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FIFTEEN_MINUTES
        }),
      })
      check_status_widget = DatadogAPIClient::V1::Widget.new({
        definition: check_status_widget_definition
      })
      ordered_widget_list.add(check_status_widget)

      # Distribution Widget
      distribution_widget_definition = DatadogAPIClient::V1::DistributionWidgetDefinition.new({
        requests: [DatadogAPIClient::V1::DistributionWidgetRequest.new({
          q: "avg:system.load.1{*}",
          style: DatadogAPIClient::V1::WidgetStyle.new({
            palette: "dog_classic",
          })
        })],
        show_legend: true,
        title: "Test Distribution Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FIFTEEN_MINUTES
        })
      })
      distribution_widget = DatadogAPIClient::V1::Widget.new({
        definition: distribution_widget_definition
      })
      ordered_widget_list.add(distribution_widget)

      # Event Stream Widget ONLY AVAILABLE ON FREE LAYOUTS
      event_stream_widget_definition = DatadogAPIClient::V1::EventStreamWidgetDefinition.new({
        query: "Build successful",
        event_size: DatadogAPIClient::V1::WidgetEventSize::LARGE,
        title: "Test Event Stream Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_ONE_DAY
        })
      })
      event_stream_widget = DatadogAPIClient::V1::Widget.new({
        definition: event_stream_widget_definition,
        layout: DatadogAPIClient::V1::WidgetLayout.new({
          height: 10,
          width: 10,
          x: 0,
          y: 0
        })
      })
      free_widget_list.add(event_stream_widget)

      # Event Timeline Widget ONLY AVAILABLE ON FREE LAYOUTS
      event_timeline_widget_definition = DatadogAPIClient::V1::EventTimelineWidgetDefinition.new({
        query: "Build Failed",
        title: "Test Event Timeline Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::LEFT,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_ONE_MONTH
        })
      })
      event_timeline_widget = DatadogAPIClient::V1::Widget.new({
        definition: event_timeline_widget_definition,
        layout: DatadogAPIClient::V1::WidgetLayout.new({
          height: 10,
          width: 10,
          x: 0,
          y: 0
        })
      })
      free_widget_list.add(event_timeline_widget)

      # Free Text Widget ONLY AVAILABLE ON FREE LAYOUTS
      free_text_widget_definition = DatadogAPIClient::V1::FreeTextWidgetDefinition.new({
        text: "Test me text",
        color: "blue",
        font_size: "16",
        text_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER
      })
      free_text_widget = DatadogAPIClient::V1::Widget.new({
        definition: free_text_widget_definition,
        layout: DatadogAPIClient::V1::WidgetLayout.new({
          height: 10,
          width: 10,
          x: 0,
          y: 0
        })
      })
      free_widget_list.add(free_text_widget)

      # Group Widget
      group_note_widget_definition = DatadogAPIClient::V1::NoteWidgetDefinition.new({
        content: "Test Note Inside Group"
      })
      group_note_widget = DatadogAPIClient::V1::Widget.new({
        definition: group_note_widget_definition
      })
      group_widget_definition = DatadogAPIClient::V1::GroupWidgetDefinition.new({
        layout_type: DatadogAPIClient::V1::WidgetLayoutType::ORDERED,
        title: "Test Group Widget",
        widgets: [group_note_widget]
      })
      group_widget = DatadogAPIClient::V1::Widget.new({
        definition: group_widget_definition
      })
      ordered_widget_list.add(group_widget)

      # HeatMap Widget
      heat_map_widget_definition = DatadogAPIClient::V1::HeatMapWidgetDefinition.new({
        requests: [DatadogAPIClient::V1::HeatMapWidgetRequest.new({
          style: DatadogAPIClient::V1::WidgetStyle.new({
            palette: "dog_classic"
          }),
          q: "avg:system.load.1{*}"
        })],
        yaxis: DatadogAPIClient::V1::WidgetAxis.new({
          include_zero: true,
          min: "0",
          max: "100",
          scale: "linear"
        }),
        events: [DatadogAPIClient::V1::WidgetEvent.new({
          q: "Build succeeded",
          tags_execution: "tags"
        })],
        title: "Test Heatmap Widget",
        show_legend: true,
        legend_size: "4",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FIFTEEN_MINUTES
        }),
        custom_links: [DatadogAPIClient::V1::WidgetCustomLink.new({
          label: "Test Custom Link label",
          link: "https://app.datadoghq.com/dashboard/lists"
        })]
      })
      heat_map_widget = DatadogAPIClient::V1::Widget.new({
        definition: heat_map_widget_definition
      })
      ordered_widget_list.add(heat_map_widget)

      # HostMap Widget
      host_map_widget_definition = DatadogAPIClient::V1::HostMapWidgetDefinition.new({
        node_type: DatadogAPIClient::V1::WidgetNodeType::CONTAINER,
        requests: DatadogAPIClient::V1::HostMapWidgetDefinitionRequests.new({
          fill: DatadogAPIClient::V1::HostMapRequest.new({
            q: "avg:system.load.1{*}",
          }),
          size: DatadogAPIClient::V1::HostMapRequest.new({
            q: "avg:system.load.1{*}",
          })
        }),
        no_metric_hosts: true,
        no_group_hosts: true,
        group: ["env:prod"],
        scope: ["foo"],
        style: DatadogAPIClient::V1::HostMapWidgetDefinitionStyle.new({
          palette: "dog_classic",
          palette_flip: true,
          fill_min: "0",
          fill_max: "100"
        }),
        title: "Test HostMap Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        custom_links: [DatadogAPIClient::V1::WidgetCustomLink.new({
          label: "Test Custom Link label",
          link: "https://app.datadoghq.com/dashboard/lists"
        })]
      })
      host_map_widget = DatadogAPIClient::V1::Widget.new({
        definition: host_map_widget_definition
      })
      ordered_widget_list.add(host_map_widget)

      # Iframe Widget ONLY AVAILABLE ON FREE LAYOUTS
      iframe_widget_definition = DatadogAPIClient::V1::IFrameWidgetDefinition.new({
        url: "https://datadoghq.com"
      })
      iframe_widget = DatadogAPIClient::V1::Widget.new({
        definition: iframe_widget_definition,
        layout: DatadogAPIClient::V1::WidgetLayout.new({
          height: 10,
          width: 10,
          x: 0,
          y: 0
        })
      })
      free_widget_list.add(iframe_widget)

      # Image Widget ONLY AVAILABLE ON FREE LAYOUTS
      image_widget_definition = DatadogAPIClient::V1::ImageWidgetDefinition.new({
        url: "https://docs.datadoghq.com/images/dashboards/widgets/image/image.mp4",
        sizing: DatadogAPIClient::V1::WidgetImageSizing::CENTER,
        margin: DatadogAPIClient::V1::WidgetMargin::LARGE
      })
      image_widget = DatadogAPIClient::V1::Widget.new({
        definition: image_widget_definition,
        layout: DatadogAPIClient::V1::WidgetLayout.new({
          height: 10,
          width: 10,
          x: 0,
          y: 0
        })
      })
      free_widget_list.add(image_widget)

      # LogStream ONLY AVAILABLE ON FREE LAYOUTS
      log_stream_widget_definition = DatadogAPIClient::V1::LogStreamWidgetDefinition.new({
        indexes: ["main"],
        logset: "106",
        query: "Route XYZ failed",
        columns: ["Route"],
        title: "Test Logstream Widget",
        title_size: "16",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::RIGHT,
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_TWO_DAYS
        }),
        message_display: DatadogAPIClient::V1::WidgetMessageDisplay::EXPANDED_LARGE,
        show_date_column: true,
        show_message_column: true,
        sort: DatadogAPIClient::V1::WidgetFieldSort.new({
          column: "Route",
          order: DatadogAPIClient::V1::WidgetSort::ASCENDING
        })
      })
      log_stream_widget = DatadogAPIClient::V1::Widget.new({
        definition: log_stream_widget_definition,
        layout: DatadogAPIClient::V1::WidgetLayout.new({
          height: 10,
          width: 10,
          x: 0,
          y: 0
        })
      })
      free_widget_list.add(log_stream_widget)

      # Monitor Summary ONLY AVAILABLE ON FREE LAYOUTS
      monitor_summary_widget_definition = DatadogAPIClient::V1::MonitorSummaryWidgetDefinition.new({
        query: "Errors are increasing",
        summary_type: DatadogAPIClient::V1::WidgetSummaryType::COMBINED,
        sort: DatadogAPIClient::V1::WidgetMonitorSummarySort::NAME_ASCENDING,
        display_format: DatadogAPIClient::V1::WidgetMonitorSummaryDisplayFormat::COUNTS,
        color_preference: DatadogAPIClient::V1::WidgetColorPreference::BACKGROUND,
        hide_zero_counts: false,
        show_last_triggered: true,
        title: "Test Monitor Summary Widget",
        title_size: "16",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        start: 0,
        count: 5
      })
      monitor_summary_widget = DatadogAPIClient::V1::Widget.new({
        definition: monitor_summary_widget_definition,
        layout: DatadogAPIClient::V1::WidgetLayout.new({
          height: 10,
          width: 10,
          x: 0,
          y: 0
        })
      })
      free_widget_list.add(monitor_summary_widget)

      # Note Widget
      note_definition = DatadogAPIClient::V1::NoteWidgetDefinition.new({
        font_size: "13",
        content: "Test Note Widget Example",
        background_color: "blue",
        text_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        show_tick: true,
        tick_pos: "4", tick_edge: DatadogAPIClient::V1::WidgetTickEdge::BOTTOM
      })
      note_widget = DatadogAPIClient::V1::Widget.new({
        definition: note_definition
      })
      ordered_widget_list.add(note_widget)

      # Query Value Widget
      query_value_widget_definition = DatadogAPIClient::V1::QueryValueWidgetDefinition.new({
        requests: [DatadogAPIClient::V1::QueryValueWidgetRequest.new({
          q: "avg:system.load.1{*}",
          aggregator: DatadogAPIClient::V1::WidgetAggregator::AVERAGE,
          conditional_formats: DatadogAPIClient::V1::WidgetConditionalFormat.new({
            comparator: DatadogAPIClient::V1::WidgetComparator::GREATER_THAN,
            value: 7,
            palette: DatadogAPIClient::V1::WidgetPalette::RED_ON_WHITE,
            custom_bg_color: "blue",
            custom_fg_color: "black",
            image_url: "https://docs.datadoghq.com/images/dashboards/widgets/image/image.mp4"
          })
        })],
        autoscale: true,
        custom_unit: "ns",
        precision: 2,
        text_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title: "Test Query Value Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FIFTEEN_MINUTES
        }),
        custom_links: [DatadogAPIClient::V1::WidgetCustomLink.new({
          label: "Test Custom Link Label",
          link: "https://app.datadoghq.com/dashboard/lists"
        })]
      })
      query_value_widget = DatadogAPIClient::V1::Widget.new({
        definition: query_value_widget_definition
      })
      ordered_widget_list.add(query_value_widget)

      # Scatter Plot Widget
      scatter_plot_widget_definition = DatadogAPIClient::V1::ScatterPlotWidgetDefinition.new({
        requests: DatadogAPIClient::V1::ScatterPlotWidgetDefinitionRequests.new({
          x: DatadogAPIClient::V1::ScatterPlotRequest.new({
            q: "avg:system.load.1{*}",
            aggregator: DatadogAPIClient::V1::WidgetAggregator::AVERAGE
          }),
          y: DatadogAPIClient::V1::ScatterPlotRequest.new({
            q: "avg:system.load.1{*}",
            aggregator: DatadogAPIClient::V1::WidgetAggregator::AVERAGE
          }),
        }),
        xaxis: DatadogAPIClient::V1::WidgetAxis.new({
          scale: "linear",
          min: "0",
          max: "100",
          include_zero: true
        }),
        yaxis: DatadogAPIClient::V1::WidgetAxis.new({
          scale: "linear",
          min: "0",
          max: "100",
          include_zero: true
        }),
        color_by_groups: ["env"],
        title: "Test Scatter Plot Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FIFTEEN_MINUTES
        }),
        custom_links: [DatadogAPIClient::V1::WidgetCustomLink.new({
          label: "Test Custom Link Label",
          link: "https://app.datadoghq.com/dashboard/lists"
        })]
      })
      scatter_plot_widget = DatadogAPIClient::V1::Widget.new({
        definition: scatter_plot_widget_definition
      })
      ordered_widget_list.add(scatter_plot_widget)

      # SLO Widget
      slo_widget_definition = DatadogAPIClient::V1::SLOWidgetDefinition.new({
        view_type: "detail",
        title: "Test SLO Widget",
        title_size: "16",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        slo_id: slo.id,
        show_error_budget: true,
        view_mode: DatadogAPIClient::V1::WidgetViewMode::BOTH,
        time_windows: [DatadogAPIClient::V1::WidgetTimeWindows::SEVEN_DAYS]
      })
      slo_widget = DatadogAPIClient::V1::Widget.new({
        definition: slo_widget_definition
      })
      ordered_widget_list.add(slo_widget)

      # Service Map Widget
      service_map_widget_definition = DatadogAPIClient::V1::ServiceMapWidgetDefinition.new({
        filters: ["*"],
        service: "1234",
        title: "Test Service Map Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        custom_links: [DatadogAPIClient::V1::WidgetCustomLink.new({
          label: "Test Custom Link Label",
          link: "https://app.datadoghq.com/dashboard/lists"
        })]
      })
      service_map_widget = DatadogAPIClient::V1::Widget.new({
        definition: service_map_widget_definition
      })
      ordered_widget_list.add(service_map_widget)

      # Service Summary Widget
      service_summary_widget_definition = DatadogAPIClient::V1::ServiceSummaryWidgetDefinition.new({
        env: "prod",
        service: "web",
        span_name: "endpoint",
        show_hits: true,
        show_errors: true,
        show_latency: true,
        show_breakdown: true,
        show_distribution: true,
        show_resource_list: true,
        size_format: DatadogAPIClient::V1::WidgetSizeFormat::LARGE,
        display_format: DatadogAPIClient::V1::WidgetServiceSummaryDisplayFormat::TWO_COLUMN,
        title: "Test Service Summary Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_ONE_HOUR
        }),
      })
      service_summary_widget = DatadogAPIClient::V1::Widget.new({
        definition: service_summary_widget_definition,
        layout: DatadogAPIClient::V1::WidgetLayout.new({
          height: 10,
          width: 10,
          x: 0,
          y: 0
        })
      })
      free_widget_list.add(service_summary_widget)

      # Table Widget
      table_widget_definition = DatadogAPIClient::V1::TableWidgetDefinition.new({
        requests: [DatadogAPIClient::V1::TableWidgetRequest.new({
          q: "avg:system.load.1{*}",
          _alias: "System Load",
          aggregator: DatadogAPIClient::V1::WidgetAggregator::AVERAGE,
          limit: 50,
          order: DatadogAPIClient::V1::WidgetSort::ASCENDING,
          conditional_formats: [DatadogAPIClient::V1::WidgetConditionalFormat.new({
            comparator: DatadogAPIClient::V1::WidgetComparator::GREATER_THAN,
            value: 7.0,
            palette: DatadogAPIClient::V1::WidgetPalette::RED_ON_WHITE,
            custom_bg_color: "blue",
            custom_fg_color: "black",
            image_url: "https://docs.datadoghq.com/images/dashboards/widgets/image/image.mp4"
          })]
        })],
        title: "Test Table Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FIFTEEN_MINUTES
        }),
        custom_links: [DatadogAPIClient::V1::WidgetCustomLink.new({
          label: "Test Custom Link Label",
          link: "https://app.datadoghq.com/dashboard/lists"
        })]
      })
      table_widget = DatadogAPIClient::V1::Widget.new({
        definition: table_widget_definition
      })
      ordered_widget_list.add(table_widget)

      # Timeseries Widget
      timeseries_widget_definition = DatadogAPIClient::V1::TimeseriesWidgetDefinition.new({
        requests: [DatadogAPIClient::V1::TimeseriesWidgetRequest.new({
          q: "avg:system.load.1{*}",
          style: DatadogAPIClient::V1::WidgetRequestStyle.new({
            palette: "dog_classic",
            line_type: DatadogAPIClient::V1::WidgetLineType::DASHED,
            line_width: DatadogAPIClient::V1::WidgetLineWidth::THICK
          }),
          metadata: [DatadogAPIClient::V1::TimeseriesWidgetRequestMetadata.new({
            expression: "avg:system.load.1{*}",
            alias_name: "Aliased metric"
          })],
          display_type: DatadogAPIClient::V1::WidgetDisplayType::LINE
        })],
        yaxis: DatadogAPIClient::V1::WidgetAxis.new({
          scale: "linear",
          min: "0",
          max: "100",
          include_zero: true
        }),
        events: [DatadogAPIClient::V1::WidgetEvent.new({
          q: "Build succeeded"
        })],
        markers: [DatadogAPIClient::V1::WidgetMarker.new({
          value: "y=15",
          display_type: "error dashed",
          label: "error threshold",
          time: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FOUR_HOURS
        })],
        title: "Test Timeseries Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FIFTEEN_MINUTES
        }),
        custom_links: [DatadogAPIClient::V1::WidgetCustomLink.new({
          label: "Test Custom Link Label",
          link: "https://app.datadoghq.com/dashboard/lists"
        })],
        show_legend: true,
        legend_size: "16"
      })
      timeseries_widget = DatadogAPIClient::V1::Widget.new({
        definition: timeseries_widget_definition
      })
      ordered_widget_list.add(timeseries_widget)

      # Timeseries Widget with Process query
      timeseries_widget_definition_process_query = DatadogAPIClient::V1::TimeseriesWidgetDefinition.new({
        requests: [DatadogAPIClient::V1::TimeseriesWidgetRequest.new({
          process_query: DatadogAPIClient::V1::ProcessQueryDefinition.new({
            metric: "process.stat.cpu.total_pct",
            filter_by: ["account:test"],
            limit: 10,
            search_by: "editor"
          }),
          style: DatadogAPIClient::V1::WidgetRequestStyle.new({
            palette: "dog_classic",
            line_type: DatadogAPIClient::V1::WidgetLineType::DASHED,
            line_width: DatadogAPIClient::V1::WidgetLineWidth::THICK
          }),
          metadata: [DatadogAPIClient::V1::TimeseriesWidgetRequestMetadata.new({
            expression: "avg:system.load.1{*}",
            alias_name: "Aliased metric"
          })],
          display_type: DatadogAPIClient::V1::WidgetDisplayType::LINE
        })],
        yaxis: DatadogAPIClient::V1::WidgetAxis.new({
          scale: "linear",
          min: "0",
          max: "100",
          include_zero: true
        }),
        events: [DatadogAPIClient::V1::WidgetEvent.new({
          q: "Build succeeded"
        })],
        markers: [DatadogAPIClient::V1::WidgetMarker.new({
          value: "y=15",
          display_type: "error dashed",
          label: "error threshold",
          time: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FOUR_HOURS
        })],
        title: "Test Timeseries Widget with Process Query",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FIFTEEN_MINUTES
        }),
        custom_links: [DatadogAPIClient::V1::WidgetCustomLink.new({
          label: "Test Custom Link Label",
          link: "https://app.datadoghq.com/dashboard/lists"
        })],
        show_legend: true,
        legend_size: "16"
      })
      timeseries_widget_process_query = DatadogAPIClient::V1::Widget.new({
        definition: timeseries_widget_definition_process_query
      })
      ordered_widget_list.add(timeseries_widget_process_query)

      # Timeseries Widget with log query
      timeseries_widget_definition_log_query = DatadogAPIClient::V1::TimeseriesWidgetDefinition.new({
        requests: [DatadogAPIClient::V1::TimeseriesWidgetRequest.new({
          log_query: DatadogAPIClient::V1::LogQueryDefinition.new({
            index: "main",
            compute: DatadogAPIClient::V1::LogsQueryCompute.new({
              aggregation: "count",
              facet: "host",
              interval: 10,
            }),
            search: DatadogAPIClient::V1::LogQueryDefinitionSearch.new({
              query: "Error parsing"
            }),
            group_by: [DatadogAPIClient::V1::LogQueryDefinitionGroupBy.new({
              facet: "host",
              limit: 5,
              sort: DatadogAPIClient::V1::LogQueryDefinitionSort.new({
                aggregation: "count",
                order: DatadogAPIClient::V1::WidgetSort::ASCENDING
              })
            })]
          }),
          style: DatadogAPIClient::V1::WidgetRequestStyle.new({
            palette: "dog_classic",
            line_type: DatadogAPIClient::V1::WidgetLineType::DASHED,
            line_width: DatadogAPIClient::V1::WidgetLineWidth::THICK
          }),
          metadata: [DatadogAPIClient::V1::TimeseriesWidgetRequestMetadata.new({
            expression: "avg:system.load.1{*}",
            alias_name: "Aliased metric"
          })],
          display_type: DatadogAPIClient::V1::WidgetDisplayType::LINE
        })],
        yaxis: DatadogAPIClient::V1::WidgetAxis.new({
          scale: "linear",
          min: "0",
          max: "100",
          include_zero: true
        }),
        events: [DatadogAPIClient::V1::WidgetEvent.new({
          q: "Build succeeded"
        })],
        markers: [DatadogAPIClient::V1::WidgetMarker.new({
          value: "y=15",
          display_type: "error dashed",
          label: "error threshold",
          time: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FOUR_HOURS
        })],
        title: "Test Timeseries Widget with Log Query",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FIFTEEN_MINUTES
        }),
        custom_links: [DatadogAPIClient::V1::WidgetCustomLink.new({
          label: "Test Custom Link Label",
          link: "https://app.datadoghq.com/dashboard/lists"
        })],
        show_legend: true,
        legend_size: "16"
      })
      timeseries_widget_log_query = DatadogAPIClient::V1::Widget.new({
        definition: timeseries_widget_definition_log_query
      })
      ordered_widget_list.add(timeseries_widget_log_query)

      # Timeseries Widget with event query
      timeseries_widget_definition_event_query = DatadogAPIClient::V1::TimeseriesWidgetDefinition.new({
        requests: [DatadogAPIClient::V1::TimeseriesWidgetRequest.new({
          event_query: DatadogAPIClient::V1::EventQueryDefinition.new({
            search: "Build Failure",
            tags_execution: "build"
          }),
          style: DatadogAPIClient::V1::WidgetRequestStyle.new({
            palette: "dog_classic",
            line_type: DatadogAPIClient::V1::WidgetLineType::DASHED,
            line_width: DatadogAPIClient::V1::WidgetLineWidth::THICK
          }),
          metadata: [DatadogAPIClient::V1::TimeseriesWidgetRequestMetadata.new({
            expression: "avg:system.load.1{*}",
            alias_name: "Aliased metric"
          })],
          display_type: DatadogAPIClient::V1::WidgetDisplayType::LINE
        })],
        yaxis: DatadogAPIClient::V1::WidgetAxis.new({
          scale: "linear",
          min: "0",
          max: "100",
          include_zero: true
        }),
        events: [DatadogAPIClient::V1::WidgetEvent.new({
          q: "Build succeeded"
        })],
        markers: [DatadogAPIClient::V1::WidgetMarker.new({
          value: "y=15",
          display_type: "error dashed",
          label: "error threshold",
          time: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FOUR_HOURS
        })],
        title: "Test Timeseries Widget with Event Query",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FIFTEEN_MINUTES
        }),
        custom_links: [DatadogAPIClient::V1::WidgetCustomLink.new({
          label: "Test Custom Link Label",
          link: "https://app.datadoghq.com/dashboard/lists"
        })],
        show_legend: true,
        legend_size: "16"
      })
      timeseries_widget_event_query = DatadogAPIClient::V1::Widget.new({
        definition: timeseries_widget_definition_event_query
      })
      ordered_widget_list.add(timeseries_widget_event_query)

      # Toplist Widget
      toplist_widget_definition = DatadogAPIClient::V1::ToplistWidgetDefinition.new({
        requests: [DatadogAPIClient::V1::ToplistWidgetRequest.new({
          q: "avg:system.load.1{*}",
          conditional_formats: [DatadogAPIClient::V1::WidgetConditionalFormat.new({
            comparator: DatadogAPIClient::V1::WidgetComparator::GREATER_THAN,
            value: 7.0,
            palette: DatadogAPIClient::V1::WidgetPalette::RED_ON_WHITE,
            custom_bg_color: "blue",
            custom_fg_color: "black",
            image_url: "https://docs.datadoghq.com/images/dashboards/widgets/image/image.mp4"
          })]
        })],
        title: "Test Toplist Widget",
        title_align: DatadogAPIClient::V1::WidgetTextAlign::CENTER,
        title_size: "16",
        time: DatadogAPIClient::V1::WidgetTime.new({
          live_span: DatadogAPIClient::V1::WidgetLiveSpan::PAST_FIFTEEN_MINUTES
        }),
        custom_links: [DatadogAPIClient::V1::WidgetCustomLink.new({
          label: "Test Custom Link Label",
          link: "https://app.datadoghq.com/dashboard/lists"
        })]
      })
      toplist_widget = DatadogAPIClient::V1::Widget.new({
        definition: toplist_widget_definition
      })
      ordered_widget_list.add(toplist_widget)

      # Template Variables
      template_variables = [DatadogAPIClient::V1::DashboardTemplateVariables.new({
        name: "test template var",
        prefix: "test-java",
        default: "*"
      })]

      # Template Variable Presets
      dashboard_template_variable_presets = [DatadogAPIClient::V1::DashboardTemplateVariablePreset.new({
        name: "Test Preset",
        template_variables: [DatadogAPIClient::V1::DashboardTemplateVariablePresetValue.new({
          name: "test preset",
          value: "*"
        })]
      })]

      dashboard = DatadogAPIClient::V1::Dashboard.new({
        layout_type: DatadogAPIClient::V1::DashboardLayoutType::ORDERED,
        widgets: [
          note_widget,
          alert_graph_widget,
          alert_value_widget,
          change_widget,
          check_status_widget,
          distribution_widget,
          group_widget,
          heat_map_widget,
          host_map_widget,
          query_value_widget,
          scatter_plot_widget,
          slo_widget,
          service_map_widget,
          table_widget,
          timeseries_widget,
          timeseries_widget_process_query,
          timeseries_widget_log_query,
          timeseries_widget_event_query,
          toplist_widget
        ],
        title: @unique + "-ordered",
        description: "Test dashboard for Ruby client",
        is_read_only: false,
        template_variables: template_variables,
        template_variable_presets: dashboard_template_variable_presets,
        notify_list: ["test@datadoghq.com"]
      })

      # Create ordered dashboard with all expected fields
      response = @api.create_dashboard(dashboard)
      @undo << Proc.new {
        @api.delete_dashboard(response.id)
      }

      # Assert the get response for this dashboard matches the create response
      get_response = @api.get_dashboard(response.id)
      expect(get_response).to eq(response)

      free_dashboard = DatadogAPIClient::V1::Dashboard.new({
        layout_type: DatadogAPIClient::V1::DashboardLayoutType::FREE,
        widgets: [
          event_stream_widget,
          event_timeline_widget,
          free_text_widget,
          iframe_widget,
          image_widget,
          log_stream_widget,
          monitor_summary_widget,
          service_summary_widget,
        ],
        title: @unique + "-free",
        description: "Test Free layout dashboard for Ruby client",
        is_read_only: false,
        template_variables: template_variables
      })

      # Create ordered dashboard with all expected fields
      create_free_response = @api.create_dashboard(free_dashboard)
      @undo << Proc.new {
        @api.delete_dashboard(create_free_response.id)
      }

      # Assert the get response for this dashboard matches the create response
      get_free_response = @api.get_dashboard(create_free_response.id)
      expect(get_free_response).to eq(create_free_response)

      # Assert root dashboard items on the create response
      expect(dashboard.title).to eq(response.title)
      expect(dashboard.description).to eq(response.description)
      expect(dashboard.is_read_only).to eq(response.is_read_only)
      # The end of the url is a normalized version of the title, so lets just check the beginning of the URL
      expect(response.url).to include("/dashboard/#{response.id}")
      expect(response.created_at).not_to be_nil
      expect(response.modified_at).not_to be_nil
      expect(response.author_handle).not_to be_nil
      expect(response.layout_type).to eq(response.layout_type)

      # Template Variables
      expect(template_variables).to eq(response.template_variables)

      # Assert each individual widget but first remove the readOnly field `id`
      response.widgets.each do |check_widget|
        expect(check_widget.id).not_to be_nil
        check_widget.id = nil
        # Unset the `id` from the sub widgets definitions of the group widget
        if check_widget.definition.is_a? DatadogAPIClient::V1::GroupWidgetDefinition
          check_widget.definition.widgets.each do |sub_widget|
            sub_widget.id = nil
          end
        end
      end
      expect(Set.new(response.widgets)).to eq(ordered_widget_list)

      # Assert the same for the free dashboard widgets
      get_free_response.widgets.each do |check_widget|
        expect(check_widget.id).not_to be_nil
        check_widget.id = nil
      end
      expect(Set.new(get_free_response.widgets)).to eq(free_widget_list)

      # Update the dashboard and set all nullable fields to null
      dashboard.description = nil
      dashboard.template_variables = nil
      dashboard.template_variable_presets = nil
      dashboard.notify_list = nil
      note_definition.content = "Updated content"
      note_definition.font_size = "30"
      update_response = @api.update_dashboard(response.id, dashboard)
      expect(dashboard.description).to be_nil
      expect(dashboard.template_variables).to be_nil
      expect(dashboard.template_variable_presets).to be_nil
      expect(dashboard.notify_list).to be_nil
      expect(dashboard.title).to eq(update_response.title)
      first_widget = update_response.widgets[0]
      first_widget.id = nil
      expect(dashboard.widgets[0]).to eq(first_widget)
      found_widget = false
      update_response.widgets.each do |note_widget_response|
        if note_widget_response.definition.is_a? DatadogAPIClient::V1::NoteWidgetDefinition
          found_widget = true
          expect(note_widget_response.definition.content).to eq("Updated content")
          expect(note_widget_response.definition.font_size).to eq("30")
          break
        end
      end
      expect(found_widget).to be(true)
      expect(update_response.widgets.length).to be > 1

      # Delete the dashboard and assert response
      delete_response = @api.delete_dashboard(response.id)
      expect(delete_response.deleted_dashboard_id).to eq(response.id)
    end
  end
end
