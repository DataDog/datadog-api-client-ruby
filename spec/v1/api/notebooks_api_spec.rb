=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://openapi-generator.tech

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'spec_helper'
require 'json'

# Unit tests for DatadogAPIClient::V1::NotebooksAPI
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'NotebooksAPI' do
  before do
    # run before each test
    @api_instance = DatadogAPIClient::V1::NotebooksAPI.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of NotebooksAPI' do
    it 'should create an instance of NotebooksAPI' do
      expect(@api_instance).to be_instance_of(DatadogAPIClient::V1::NotebooksAPI)
    end
  end

  # unit tests for create_notebook
  # Create a notebook
  # Create a notebook using the specified options.
  # @param body The JSON description of the notebook you want to create.
  # @param [Hash] opts the optional parameters
  # @return [NotebookResponse]
  describe 'create_notebook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_notebook
  # Delete a notebook
  # Delete a notebook using the specified ID.
  # @param notebook_id Unique ID, assigned when you create the notebook.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_notebook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_notebook
  # Get a notebook
  # Get a notebook using the specified notebook ID.
  # @param notebook_id Unique ID, assigned when you create the notebook.
  # @param [Hash] opts the optional parameters
  # @return [NotebookResponse]
  describe 'get_notebook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_notebooks
  # Get all notebooks
  # Get all notebooks. This can also be used to search for notebooks with a particular &#x60;query&#x60; in the notebook &#x60;name&#x60; or author &#x60;handle&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :author_handle Return notebooks created by the given &#x60;author_handle&#x60;.
  # @option opts [String] :exclude_author_handle Return notebooks not created by the given &#x60;author_handle&#x60;.
  # @option opts [Integer] :start The index of the first notebook you want returned.
  # @option opts [Integer] :count The number of notebooks to be returned.
  # @option opts [String] :sort_field Sort by field &#x60;modified&#x60;, &#x60;name&#x60;, or &#x60;created&#x60;.
  # @option opts [String] :sort_dir Sort by direction &#x60;asc&#x60; or &#x60;desc&#x60;.
  # @option opts [String] :query Return only notebooks with &#x60;query&#x60; string in notebook name or author handle.
  # @option opts [Boolean] :include_cells Value of &#x60;false&#x60; excludes the &#x60;cells&#x60; and global &#x60;time&#x60; for each notebook.
  # @option opts [Boolean] :is_template True value returns only template notebooks. Default is false (returns only non-template notebooks).
  # @option opts [String] :type If type is provided, returns only notebooks with that metadata type. Default does not have type filtering.
  # @return [NotebooksResponse]
  describe 'list_notebooks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_notebook
  # Update a notebook
  # Update a notebook using the specified ID.
  # @param notebook_id Unique ID, assigned when you create the notebook.
  # @param body Update notebook request body.
  # @param [Hash] opts the optional parameters
  # @return [NotebookResponse]
  describe 'update_notebook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
