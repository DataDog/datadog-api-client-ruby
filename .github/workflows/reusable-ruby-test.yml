name: Reusable Ruby Testing Workflow

on:
  workflow_call:
    inputs:
      target-branch:
        description: 'Branch to checkout and test (defaults to the calling branch)'
        required: false
        type: string
        default: ''
      ruby-versions:
        description: 'JSON array of Ruby versions to test against'
        required: false
        type: string
        default: '["2.7", "3.2", "jruby-9.4.12.0"]'
      platforms:
        description: 'JSON array of platforms to run tests on'
        required: false
        type: string
        default: '["ubuntu-latest"]'
      test-script:
        description: 'Test script to execute'
        required: false
        type: string
        default: './run-tests.sh'
      cache-version:
        description: 'Cache version for gem dependencies'
        required: false
        type: string
        default: ''
    secrets:
      PIPELINE_GITHUB_APP_ID:
        required: false
      PIPELINE_GITHUB_APP_PRIVATE_KEY:
        required: false
      DD_API_KEY:
        required: false

jobs:
  test:
    strategy:
      matrix:
        ruby-version: ${{ fromJSON(inputs.ruby-versions) }}
        platform: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ matrix.platform }}
    if: (github.event.pull_request.draft == false && !contains(github.event.pull_request.labels.*.name, 'ci/skip') && !contains(github.event.pull_request.head.ref, 'datadog-api-spec/test/')) || github.event_name == 'schedule'
    env:
      BUNDLE_WITHOUT: docs
      DD_PROFILING_NO_EXTENSION: true
      DD_CIVISIBILITY_AGENTLESS_ENABLED: true
      DD_ENV: prod
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: DataDog/datadog-api-client-ruby
          ref: ${{ inputs.target-branch || github.ref }}
      - name: Set up Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true
          cache-version: ${{ inputs.cache-version }}
      - name: Test
        run: ${{ inputs.test-script }}
        shell: bash
